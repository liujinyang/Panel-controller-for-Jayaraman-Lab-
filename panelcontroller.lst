
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bdd8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004ea  00802000  0000bdd8  0000be8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000739  008024ea  008024ea  0000c376  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000c376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e23  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009727  00000000  00000000  0000e0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001612  00000000  00000000  000177fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006768  00000000  00000000  00018e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a70  00000000  00000000  0001f574  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020fb  00000000  00000000  0001ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000796d  00000000  00000000  000220df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000258  00000000  00000000  00029a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__ctors_end>
       4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
       8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
       c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      10:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      14:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      18:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      1c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      20:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      24:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      28:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      2c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      30:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      34:	0c 94 91 21 	jmp	0x4322	; 0x4322 <__vector_13>
      38:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      3c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      40:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      44:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      48:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      4c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      50:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      54:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      58:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      5c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      60:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      64:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <__vector_25>
      68:	0c 94 54 2f 	jmp	0x5ea8	; 0x5ea8 <__vector_26>
      6c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      70:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      74:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      78:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      7c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      80:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      84:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      88:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      8c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      90:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      94:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      98:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      9c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      a0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      a4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      a8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      ac:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      b0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      b4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      b8:	0c 94 27 21 	jmp	0x424e	; 0x424e <__vector_46>
      bc:	0c 94 c9 2f 	jmp	0x5f92	; 0x5f92 <__vector_47>
      c0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      c4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      c8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      cc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      d0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      d4:	0c 94 c4 54 	jmp	0xa988	; 0xa988 <__vector_53>
      d8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      dc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      e0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      e4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      e8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      ec:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      f0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      f4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      f8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
      fc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     100:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     104:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     108:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     10c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     110:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     114:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     118:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     11c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     120:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     124:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     128:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     12c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     130:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <__vector_76>
     134:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     138:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     13c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     140:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     144:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     148:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     14c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     150:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     154:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     158:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     15c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     160:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     164:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     168:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     16c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     170:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     174:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     178:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     17c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     180:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     184:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     188:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     18c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     190:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     194:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     198:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     19c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1a0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1a4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1a8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1ac:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <__vector_107>
     1b0:	0c 94 fa 55 	jmp	0xabf4	; 0xabf4 <__vector_108>
     1b4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1b8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1bc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1c0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1c4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1c8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1cc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1d0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1d4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1d8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1dc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1e0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1e4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1e8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1ec:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1f0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__bad_interrupt>
     1f4:	bb 1a       	sub	r11, r27
     1f6:	c0 1a       	sub	r12, r16
     1f8:	c5 1a       	sub	r12, r21
     1fa:	c9 1a       	sub	r12, r25
     1fc:	cd 1a       	sub	r12, r29
     1fe:	d1 1a       	sub	r13, r17
     200:	da 1a       	sub	r13, r26
     202:	de 1a       	sub	r13, r30
     204:	e2 1a       	sub	r14, r18
     206:	16 1b       	sub	r17, r22
     208:	16 1b       	sub	r17, r22
     20a:	16 1b       	sub	r17, r22
     20c:	16 1b       	sub	r17, r22
     20e:	16 1b       	sub	r17, r22
     210:	16 1b       	sub	r17, r22
     212:	e6 1a       	sub	r14, r22
     214:	fb 1a       	sub	r15, r27
     216:	fe 1a       	sub	r15, r30
     218:	28 53       	subi	r18, 0x38	; 56
     21a:	34 53       	subi	r19, 0x34	; 52
     21c:	95 53       	subi	r25, 0x35	; 53
     21e:	9b 53       	subi	r25, 0x3B	; 59
     220:	25 53       	subi	r18, 0x35	; 53
     222:	25 53       	subi	r18, 0x35	; 53
     224:	25 53       	subi	r18, 0x35	; 53
     226:	25 53       	subi	r18, 0x35	; 53
     228:	25 53       	subi	r18, 0x35	; 53
     22a:	25 53       	subi	r18, 0x35	; 53
     22c:	36 54       	subi	r19, 0x46	; 70
     22e:	3b 54       	subi	r19, 0x4B	; 75
     230:	3d 54       	subi	r19, 0x4D	; 77
     232:	4b 54       	subi	r20, 0x4B	; 75
     234:	6a 54       	subi	r22, 0x4A	; 74

00000236 <__c.5630>:
     236:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     246:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000253 <__c.5628>:
     253:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     263:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000274 <__c.5623>:
     274:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     284:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

00000292 <__c.5584>:
     292:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     2a2:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2b2:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2c2:	75 66 66 65 72 0a 00                                uffer..

000002c9 <__c.5582>:
     2c9:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002d4 <__c.5580>:
     2d4:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     2e4:	69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43 6e     in update_funcCn
     2f4:	74 5f 79 0a 00                                      t_y..

000002f9 <__c.5578>:
     2f9:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000304 <__c.5521>:
     304:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     314:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     324:	6e 74 5f 78 0a 00                                   nt_x..

0000032a <__c.5519>:
     32a:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000335 <__c.5517>:
     335:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     345:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     355:	63 43 6e 74 5f 78 0a 00                             cCnt_x..

0000035d <__c.5515>:
     35d:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000368 <__c.5457>:
     368:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     378:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     388:	2e 0a 00                                            ...

0000038b <__c.5454>:
     38b:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     39b:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000003ac <__c.5452>:
     3ac:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     3bc:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000003cd <__c.5450>:
     3cd:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     3dd:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     3ed:	20 59 0a 00                                          Y..

000003f1 <__c.5446>:
     3f1:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     401:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000412 <__c.5444>:
     412:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     422:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000433 <__c.5442>:
     433:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     443:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     453:	72 20 58 0a 00                                      r X..

00000458 <__c.5398>:
     458:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     468:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     478:	2e 0a 00                                            ...

0000047b <__c.5395>:
     47b:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     48b:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

0000049c <__c.5393>:
     49c:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     4ac:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

000004ba <__c.5391>:
     4ba:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     4ca:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4da:	20 59 0a 00                                          Y..

000004de <__c.5387>:
     4de:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     4ee:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000004ff <__c.5385>:
     4ff:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     50f:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

0000051c <__c.5383>:
     51c:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     52c:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     53c:	20 58 0a 00                                          X..

00000540 <__c.5365>:
     540:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     550:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

00000560 <__c.5359>:
     560:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     570:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

00000581 <__c.5352>:
     581:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     591:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

000005a2 <__c.5303>:
     5a2:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     5b2:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     5c2:	20 3d 20 25 75 0a 00                                 = %u..

000005c9 <__c.5279>:
     5c9:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     5d9:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     5e9:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     5f9:	61 72 64 2e 0a 00                                   ard...

000005ff <__c.5277>:
     5ff:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     60f:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     61f:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     62f:	50 52 4f 4d 0a 00                                   PROM..

00000635 <__c.5228>:
     635:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     645:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000651 <__c.5226>:
     651:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     661:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000670 <__c.5224>:
     670:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     680:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     690:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     6a0:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     6b0:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     6c0:	75 0a 00                                            u..

000006c3 <__c.5222>:
     6c3:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     6d3:	25 75 3a 0a 00                                      %u:..

000006d8 <__c.4853>:
     6d8:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     6e8:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     6f8:	75 0a 00                                            u..

000006fb <__c.4851>:
     6fb:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     70b:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     71b:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000725 <__c.4849>:
     725:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     735:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000743 <__c.4847>:
     743:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     753:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     763:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

0000076c <__c.4774>:
     76c:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     77c:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     78c:	6e 2e 0a 00                                         n...

00000790 <__c.4706>:
     790:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     7a0:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     7b0:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     7c0:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

000007cf <__c.4702>:
     7cf:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     7df:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     7ef:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     7ff:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

0000080b <__c.4648>:
     80b:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     81b:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     82b:	2e 0a 00                                            ...

0000082e <__c.4645>:
     82e:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     83e:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     84e:	2e 0a 00                                            ...

00000851 <__c.4596>:
     851:	70 72 6f 62 4c 61 73 65 72 20 3d 20 20 25 64 3a     probLaser =  %d:
     861:	0a 00                                               ..

00000863 <__c.4592>:
     863:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     873:	0a 00                                               ..

00000875 <__c.4519>:
     875:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     885:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     895:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     8a5:	0a 00                                               ..

000008a7 <__c.4516>:
     8a7:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     8b7:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     8c7:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     8d7:	0a 00                                               ..

000008d9 <__c.4513>:
     8d9:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     8e9:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     8f9:	0a 00                                               ..

000008fb <__c.4504>:
     8fb:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     90b:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

0000091a <__c.4385>:
     91a:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     92a:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     93a:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000948 <__c.4372>:
     948:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     958:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     968:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000976 <__c.4369>:
     976:	3f 3f 3f 0a 00                                      ???..

0000097b <__c.4366>:
     97b:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000988 <__c.4363>:
     988:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     998:	21 0a 00                                            !..

0000099b <__c.4360>:
     99b:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

000009a4 <__c.4356>:
     9a4:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

000009ae <__c.4353>:
     9ae:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     9be:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

000009c7 <__c.4351>:
     9c7:	3f 3f 3f 0a 00                                      ???..

000009cc <__c.4348>:
     9cc:	53 44 48 43 0a 00                                   SDHC..

000009d2 <__c.4345>:
     9d2:	42 4c 4b 0a 00                                      BLK..

000009d7 <__c.4342>:
     9d7:	53 44 43 0a 00                                      SDC..

000009dc <__c.4339>:
     9dc:	53 44 32 0a 00                                      SD2..

000009e1 <__c.4336>:
     9e1:	53 44 0a 00                                         SD..

000009e5 <__c.4332>:
     9e5:	4d 4d 43 0a 00                                      MMC..

000009ea <__c.4329>:
     9ea:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

000009f6 <__c.4327>:
     9f6:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     a06:	61 6c 69 7a 65 64 0a 00                             alized..

00000a0e <__c.4319>:
     a0e:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     a1e:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

00000a28 <__c.4314>:
     a28:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     a38:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00000a45 <__c.4309>:
     a45:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000a54 <__c.4307>:
     a54:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     a64:	20 57 6f 72 6b 73 0a 00                              Works..

00000a6c <__c.4517>:
     a6c:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     a7c:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000a87 <__c.4515>:
     a87:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     a97:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000aa2 <__c.4509>:
     aa2:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     ab2:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     ac2:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     ad2:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000ae3 <__c.4507>:
     ae3:	0a 00                                               ..

00000ae5 <__c.4505>:
     ae5:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     af5:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000b02 <__c.4500>:
     b02:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     b12:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000b1f <__c.4498>:
     b1f:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     b2f:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     b3f:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000b4a <__c.4496>:
     b4a:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     b5a:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     b6a:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     b7a:	78 0a 00                                            x..

00000b7d <__c.4490>:
     b7d:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000b8a <__c.4488>:
     b8a:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     b9a:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000ba8 <__c.4485>:
     ba8:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     bb8:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     bc8:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     bd8:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     be8:	0a 00                                               ..

00000bea <__c.4480>:
     bea:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     bfa:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     c0a:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000c15 <__c.4478>:
     c15:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     c25:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     c35:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     c45:	78 2e 0a 00                                         x...

00000c49 <__c.4472>:
     c49:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000c56 <__c.4470>:
     c56:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     c66:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000c74 <__c.4465>:
     c74:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     c84:	0a 00                                               ..

00000c86 <__c.4463>:
     c86:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     c96:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000ca3 <__c.4586>:
     ca3:	25 53 0a 00                                         %S..

00000ca7 <str.4572>:
     ca7:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     cb7:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     cc7:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     cd7:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     ce7:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     cf7:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     d07:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     d17:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     d27:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     d37:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     d47:	45 4f 55 54 00 00                                   EOUT..

00000d4d <__c.4385>:
     d4d:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     d5d:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000d68 <__c.4383>:
     d68:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     d78:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000d83 <__c.4377>:
     d83:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     d93:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     da3:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     db3:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000dc3 <__c.4375>:
     dc3:	0a 00                                               ..

00000dc5 <__c.4373>:
     dc5:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     dd5:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000de2 <__c.4368>:
     de2:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     df2:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000dff <__c.4366>:
     dff:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     e0f:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     e1f:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000e2a <__c.4364>:
     e2a:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     e3a:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     e4a:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     e5a:	0a 00                                               ..

00000e5c <__c.4358>:
     e5c:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000e69 <__c.4356>:
     e69:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     e79:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00000e86 <__c.4353>:
     e86:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     e96:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     ea6:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     eb6:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000ec6 <__c.4348>:
     ec6:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     ed6:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     ee6:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000ef1 <__c.4346>:
     ef1:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     f01:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     f11:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
     f21:	2e 0a 00                                            ...

00000f24 <__c.4340>:
     f24:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000f31 <__c.4338>:
     f31:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     f41:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000f4f <__c.4333>:
     f4f:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

00000f60 <__c.4331>:
     f60:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     f70:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00000f7c <__c.4281>:
     f7c:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     f8c:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000f99 <__c.4276>:
     f99:	23 00                                               #.

00000f9b <__c.4246>:
     f9b:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     fab:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000fb8 <__c.4241>:
     fb8:	23 00                                               #.

00000fba <__c.4220>:
     fba:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
     fca:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00000fd9 <__c.4215>:
     fd9:	23 00                                               #.

00000fdb <__c.4184>:
     fdb:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
     feb:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00000ff8 <__c.4179>:
     ff8:	23 00                                               #.

00000ffa <__c.4148>:
     ffa:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    100a:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001017 <__c.4143>:
    1017:	23 00                                               #.

00001019 <__c.4121>:
    1019:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    1029:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00001037 <__c.4116>:
    1037:	23 00 00                                            #..

0000103a <__ctors_end>:
    103a:	11 24       	eor	r1, r1
    103c:	1f be       	out	0x3f, r1	; 63
    103e:	cf ef       	ldi	r28, 0xFF	; 255
    1040:	df e3       	ldi	r29, 0x3F	; 63
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	00 e0       	ldi	r16, 0x00	; 0
    1048:	0c bf       	out	0x3c, r16	; 60
    104a:	18 be       	out	0x38, r1	; 56
    104c:	19 be       	out	0x39, r1	; 57
    104e:	1a be       	out	0x3a, r1	; 58
    1050:	1b be       	out	0x3b, r1	; 59

00001052 <__do_copy_data>:
    1052:	14 e2       	ldi	r17, 0x24	; 36
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e2       	ldi	r27, 0x20	; 32
    1058:	e8 ed       	ldi	r30, 0xD8	; 216
    105a:	fd eb       	ldi	r31, 0xBD	; 189
    105c:	00 e0       	ldi	r16, 0x00	; 0
    105e:	0b bf       	out	0x3b, r16	; 59
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <__do_copy_data+0x14>
    1062:	07 90       	elpm	r0, Z+
    1064:	0d 92       	st	X+, r0
    1066:	aa 3e       	cpi	r26, 0xEA	; 234
    1068:	b1 07       	cpc	r27, r17
    106a:	d9 f7       	brne	.-10     	; 0x1062 <__do_copy_data+0x10>
    106c:	1b be       	out	0x3b, r1	; 59

0000106e <__do_clear_bss>:
    106e:	1c e2       	ldi	r17, 0x2C	; 44
    1070:	aa ee       	ldi	r26, 0xEA	; 234
    1072:	b4 e2       	ldi	r27, 0x24	; 36
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <.do_clear_bss_start>

00001076 <.do_clear_bss_loop>:
    1076:	1d 92       	st	X+, r1

00001078 <.do_clear_bss_start>:
    1078:	a3 32       	cpi	r26, 0x23	; 35
    107a:	b1 07       	cpc	r27, r17
    107c:	e1 f7       	brne	.-8      	; 0x1076 <.do_clear_bss_loop>
    107e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <main>
    1082:	0c 94 ea 5e 	jmp	0xbdd4	; 0xbdd4 <_exit>

00001086 <__bad_interrupt>:
    1086:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000108a <handle_message_length_62>:
//load laser trigger pattern first 62 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_62(uint8_t *msg_buffer)
{   
    108a:	ac 01       	movw	r20, r24
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    1090:	f9 01       	movw	r30, r18
    1092:	e1 57       	subi	r30, 0x71	; 113
    1094:	f9 4d       	sbci	r31, 0xD9	; 217
    1096:	da 01       	movw	r26, r20
    1098:	a2 0f       	add	r26, r18
    109a:	b3 1f       	adc	r27, r19
    109c:	8c 91       	ld	r24, X
    109e:	80 83       	st	Z, r24
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    10a4:	2e 33       	cpi	r18, 0x3E	; 62
    10a6:	31 05       	cpc	r19, r1
    10a8:	99 f7       	brne	.-26     	; 0x1090 <handle_message_length_62+0x6>
	{
		laserPattern[i] = msg_buffer[i];
	}

}
    10aa:	08 95       	ret

000010ac <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    10ac:	80 91 c1 27 	lds	r24, 0x27C1
    10b0:	90 91 c2 27 	lds	r25, 0x27C2
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	80 93 c1 27 	sts	0x27C1, r24
    10ba:	90 93 c2 27 	sts	0x27C2, r25
    if (index_x >= x_num)
    10be:	80 91 c1 27 	lds	r24, 0x27C1
    10c2:	90 91 c2 27 	lds	r25, 0x27C2
    10c6:	40 91 2b 28 	lds	r20, 0x282B
    10ca:	50 91 2c 28 	lds	r21, 0x282C
    10ce:	84 17       	cp	r24, r20
    10d0:	95 07       	cpc	r25, r21
    10d2:	20 f0       	brcs	.+8      	; 0x10dc <increment_index_x+0x30>
    {index_x = 0;}
    10d4:	10 92 c1 27 	sts	0x27C1, r1
    10d8:	10 92 c2 27 	sts	0x27C2, r1
    
    
    frame_num = index_y*x_num + index_x;
    10dc:	80 91 76 29 	lds	r24, 0x2976
    10e0:	90 91 77 29 	lds	r25, 0x2977
    10e4:	20 91 c1 27 	lds	r18, 0x27C1
    10e8:	30 91 c2 27 	lds	r19, 0x27C2
    10ec:	bc 01       	movw	r22, r24
    10ee:	64 9f       	mul	r22, r20
    10f0:	c0 01       	movw	r24, r0
    10f2:	65 9f       	mul	r22, r21
    10f4:	90 0d       	add	r25, r0
    10f6:	74 9f       	mul	r23, r20
    10f8:	90 0d       	add	r25, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	80 93 ef 24 	sts	0x24EF, r24
    1104:	90 93 f0 24 	sts	0x24F0, r25
	
    if (x_gt_y) display_flag++;
    1108:	80 91 eb 24 	lds	r24, 0x24EB
    110c:	88 23       	and	r24, r24
    110e:	29 f0       	breq	.+10     	; 0x111a <increment_index_x+0x6e>
    1110:	80 91 ea 24 	lds	r24, 0x24EA
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	80 93 ea 24 	sts	0x24EA, r24
    111a:	08 95       	ret

0000111c <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    111c:	80 91 76 29 	lds	r24, 0x2976
    1120:	90 91 77 29 	lds	r25, 0x2977
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	80 93 76 29 	sts	0x2976, r24
    112a:	90 93 77 29 	sts	0x2977, r25
    if (index_y >= y_num)
    112e:	20 91 76 29 	lds	r18, 0x2976
    1132:	30 91 77 29 	lds	r19, 0x2977
    1136:	80 91 af 25 	lds	r24, 0x25AF
    113a:	90 91 b0 25 	lds	r25, 0x25B0
    113e:	28 17       	cp	r18, r24
    1140:	39 07       	cpc	r19, r25
    1142:	20 f0       	brcs	.+8      	; 0x114c <increment_index_y+0x30>
    {index_y = 0;}
    1144:	10 92 76 29 	sts	0x2976, r1
    1148:	10 92 77 29 	sts	0x2977, r1
    
    frame_num = index_y*x_num + index_x;
    114c:	20 91 76 29 	lds	r18, 0x2976
    1150:	30 91 77 29 	lds	r19, 0x2977
    1154:	40 91 c1 27 	lds	r20, 0x27C1
    1158:	50 91 c2 27 	lds	r21, 0x27C2
    115c:	80 91 2b 28 	lds	r24, 0x282B
    1160:	90 91 2c 28 	lds	r25, 0x282C
    1164:	bc 01       	movw	r22, r24
    1166:	26 9f       	mul	r18, r22
    1168:	c0 01       	movw	r24, r0
    116a:	27 9f       	mul	r18, r23
    116c:	90 0d       	add	r25, r0
    116e:	36 9f       	mul	r19, r22
    1170:	90 0d       	add	r25, r0
    1172:	11 24       	eor	r1, r1
    1174:	84 0f       	add	r24, r20
    1176:	95 1f       	adc	r25, r21
    1178:	80 93 ef 24 	sts	0x24EF, r24
    117c:	90 93 f0 24 	sts	0x24F0, r25
	
    if (x_gt_y == 0) display_flag++;
    1180:	80 91 eb 24 	lds	r24, 0x24EB
    1184:	88 23       	and	r24, r24
    1186:	29 f4       	brne	.+10     	; 0x1192 <increment_index_y+0x76>
    1188:	80 91 ea 24 	lds	r24, 0x24EA
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	80 93 ea 24 	sts	0x24EA, r24
    1192:	08 95       	ret

00001194 <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    1194:	80 91 c1 27 	lds	r24, 0x27C1
    1198:	90 91 c2 27 	lds	r25, 0x27C2
    119c:	89 2b       	or	r24, r25
    119e:	29 f4       	brne	.+10     	; 0x11aa <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    11a0:	80 91 2b 28 	lds	r24, 0x282B
    11a4:	90 91 2c 28 	lds	r25, 0x282C
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <decrement_index_x+0x1e>
    else
    {index_x--;}
    11aa:	80 91 c1 27 	lds	r24, 0x27C1
    11ae:	90 91 c2 27 	lds	r25, 0x27C2
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	80 93 c1 27 	sts	0x27C1, r24
    11b8:	90 93 c2 27 	sts	0x27C2, r25
    
    frame_num = index_y*x_num + index_x;
    11bc:	20 91 76 29 	lds	r18, 0x2976
    11c0:	30 91 77 29 	lds	r19, 0x2977
    11c4:	40 91 c1 27 	lds	r20, 0x27C1
    11c8:	50 91 c2 27 	lds	r21, 0x27C2
    11cc:	80 91 2b 28 	lds	r24, 0x282B
    11d0:	90 91 2c 28 	lds	r25, 0x282C
    11d4:	bc 01       	movw	r22, r24
    11d6:	26 9f       	mul	r18, r22
    11d8:	c0 01       	movw	r24, r0
    11da:	27 9f       	mul	r18, r23
    11dc:	90 0d       	add	r25, r0
    11de:	36 9f       	mul	r19, r22
    11e0:	90 0d       	add	r25, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	84 0f       	add	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	80 93 ef 24 	sts	0x24EF, r24
    11ec:	90 93 f0 24 	sts	0x24F0, r25
    if (x_gt_y) display_flag++;
    11f0:	80 91 eb 24 	lds	r24, 0x24EB
    11f4:	88 23       	and	r24, r24
    11f6:	29 f0       	breq	.+10     	; 0x1202 <decrement_index_x+0x6e>
    11f8:	80 91 ea 24 	lds	r24, 0x24EA
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	80 93 ea 24 	sts	0x24EA, r24
    1202:	08 95       	ret

00001204 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1204:	80 91 76 29 	lds	r24, 0x2976
    1208:	90 91 77 29 	lds	r25, 0x2977
    120c:	89 2b       	or	r24, r25
    120e:	29 f4       	brne	.+10     	; 0x121a <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    1210:	80 91 af 25 	lds	r24, 0x25AF
    1214:	90 91 b0 25 	lds	r25, 0x25B0
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <decrement_index_y+0x1e>
    else
    {index_y--;}
    121a:	80 91 76 29 	lds	r24, 0x2976
    121e:	90 91 77 29 	lds	r25, 0x2977
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	80 93 76 29 	sts	0x2976, r24
    1228:	90 93 77 29 	sts	0x2977, r25
    
    frame_num = index_y*x_num + index_x;
    122c:	20 91 76 29 	lds	r18, 0x2976
    1230:	30 91 77 29 	lds	r19, 0x2977
    1234:	40 91 c1 27 	lds	r20, 0x27C1
    1238:	50 91 c2 27 	lds	r21, 0x27C2
    123c:	80 91 2b 28 	lds	r24, 0x282B
    1240:	90 91 2c 28 	lds	r25, 0x282C
    1244:	bc 01       	movw	r22, r24
    1246:	26 9f       	mul	r18, r22
    1248:	c0 01       	movw	r24, r0
    124a:	27 9f       	mul	r18, r23
    124c:	90 0d       	add	r25, r0
    124e:	36 9f       	mul	r19, r22
    1250:	90 0d       	add	r25, r0
    1252:	11 24       	eor	r1, r1
    1254:	84 0f       	add	r24, r20
    1256:	95 1f       	adc	r25, r21
    1258:	80 93 ef 24 	sts	0x24EF, r24
    125c:	90 93 f0 24 	sts	0x24F0, r25
    if (x_gt_y == 0) display_flag++;
    1260:	80 91 eb 24 	lds	r24, 0x24EB
    1264:	88 23       	and	r24, r24
    1266:	29 f4       	brne	.+10     	; 0x1272 <decrement_index_y+0x6e>
    1268:	80 91 ea 24 	lds	r24, 0x24EA
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 ea 24 	sts	0x24EA, r24
    1272:	08 95       	ret

00001274 <set_default_func>:
}

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
    
    switch (func_channel) {
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	31 f0       	breq	.+12     	; 0x1284 <set_default_func+0x10>
    1278:	90 91 b1 20 	lds	r25, 0x20B1
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	09 f0       	breq	.+2      	; 0x1282 <set_default_func+0xe>
    1280:	63 c0       	rjmp	.+198    	; 0x1348 <set_default_func+0xd4>
    1282:	32 c0       	rjmp	.+100    	; 0x12e8 <set_default_func+0x74>
        case 1:
            if (quiet_mode_on == 0)
    1284:	80 91 b1 20 	lds	r24, 0x20B1
    1288:	88 23       	and	r24, r24
    128a:	21 f4       	brne	.+8      	; 0x1294 <set_default_func+0x20>
                xputs(PSTR("Setting default function for X.\n"));
    128c:	81 e8       	ldi	r24, 0x81	; 129
    128e:	95 e0       	ldi	r25, 0x05	; 5
    1290:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    1294:	10 92 fd 24 	sts	0x24FD, r1
    1298:	10 92 fe 24 	sts	0x24FE, r1
            funcSize_x = FUNCTION_LENGTH;
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	80 93 a9 20 	sts	0x20A9, r24
    12a8:	90 93 aa 20 	sts	0x20AA, r25
    12ac:	a0 93 ab 20 	sts	0x20AB, r26
    12b0:	b0 93 ac 20 	sts	0x20AC, r27
    12b4:	ed e2       	ldi	r30, 0x2D	; 45
    12b6:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
				{ function_X[funcCnt] = 10; }
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	81 93       	st	Z+, r24
    12be:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    12c0:	28 e2       	ldi	r18, 0x28	; 40
    12c2:	e5 3f       	cpi	r30, 0xF5	; 245
    12c4:	f2 07       	cpc	r31, r18
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <set_default_func+0x48>
				{ function_X[funcCnt] = 10; }
            function_counter_x = 0;
    12c8:	10 92 f1 24 	sts	0x24F1, r1
    12cc:	10 92 f2 24 	sts	0x24F2, r1
			func_global_counter_x = 0;
    12d0:	10 92 f5 24 	sts	0x24F5, r1
    12d4:	10 92 f6 24 	sts	0x24F6, r1
    12d8:	10 92 f7 24 	sts	0x24F7, r1
    12dc:	10 92 f8 24 	sts	0x24F8, r1
			default_func_x = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 a1 20 	sts	0x20A1, r24
    12e6:	08 95       	ret
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    12e8:	99 23       	and	r25, r25
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <set_default_func+0x80>
                xputs(PSTR("Setting default function for Y.\n"));
    12ec:	80 e6       	ldi	r24, 0x60	; 96
    12ee:	95 e0       	ldi	r25, 0x05	; 5
    12f0:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    12f4:	10 92 ff 24 	sts	0x24FF, r1
    12f8:	10 92 00 25 	sts	0x2500, r1
            funcSize_y = FUNCTION_LENGTH;
    12fc:	84 e6       	ldi	r24, 0x64	; 100
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	80 93 ad 20 	sts	0x20AD, r24
    1308:	90 93 ae 20 	sts	0x20AE, r25
    130c:	a0 93 af 20 	sts	0x20AF, r26
    1310:	b0 93 b0 20 	sts	0x20B0, r27
    1314:	e4 eb       	ldi	r30, 0xB4	; 180
    1316:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	81 93       	st	Z+, r24
    131e:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1320:	26 e2       	ldi	r18, 0x26	; 38
    1322:	ec 37       	cpi	r30, 0x7C	; 124
    1324:	f2 07       	cpc	r31, r18
    1326:	d1 f7       	brne	.-12     	; 0x131c <set_default_func+0xa8>
            { function_Y[funcCnt] = 10; }
			function_counter_y = 0;
    1328:	10 92 f3 24 	sts	0x24F3, r1
    132c:	10 92 f4 24 	sts	0x24F4, r1
			func_global_counter_y = 0;
    1330:	10 92 f9 24 	sts	0x24F9, r1
    1334:	10 92 fa 24 	sts	0x24FA, r1
    1338:	10 92 fb 24 	sts	0x24FB, r1
    133c:	10 92 fc 24 	sts	0x24FC, r1
			default_func_y = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 a2 20 	sts	0x20A2, r24
    1346:	08 95       	ret
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            if (quiet_mode_on == 0)
    1348:	99 23       	and	r25, r25
    134a:	21 f4       	brne	.+8      	; 0x1354 <set_default_func+0xe0>
                xputs(PSTR("Wrong function channel number.\n"));
    134c:	80 e4       	ldi	r24, 0x40	; 64
    134e:	95 e0       	ldi	r25, 0x05	; 5
    1350:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    1354:	08 95       	ret

00001356 <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    1356:	ac 01       	movw	r20, r24
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	 for (i = 0; i<63; i++)
	{
	laserPattern[62 + i] = msg_buffer[i];
    135c:	f9 01       	movw	r30, r18
    135e:	e1 57       	subi	r30, 0x71	; 113
    1360:	f9 4d       	sbci	r31, 0xD9	; 217
    1362:	da 01       	movw	r26, r20
    1364:	a2 0f       	add	r26, r18
    1366:	b3 1f       	adc	r27, r19
    1368:	8c 91       	ld	r24, X
    136a:	86 af       	std	Z+62, r24	; 0x3e
    136c:	2f 5f       	subi	r18, 0xFF	; 255
    136e:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_63(uint8_t *msg_buffer)
{   
	uint8_t i;
	
	 for (i = 0; i<63; i++)
    1370:	2f 33       	cpi	r18, 0x3F	; 63
    1372:	31 05       	cpc	r19, r1
    1374:	99 f7       	brne	.-26     	; 0x135c <handle_message_length_63+0x6>
	{
	laserPattern[62 + i] = msg_buffer[i];
	}
	
	if (quiet_mode_on == 0)
    1376:	80 91 b1 20 	lds	r24, 0x20B1
    137a:	88 23       	and	r24, r24
    137c:	21 f4       	brne	.+8      	; 0x1386 <handle_message_length_63+0x30>
        xputs(PSTR("Success set the new laser pattern.\n"));
    137e:	8c e6       	ldi	r24, 0x6C	; 108
    1380:	97 e0       	ldi	r25, 0x07	; 7
    1382:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    1386:	08 95       	ret

00001388 <dump_mat>:
		}
	}
	} 

//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1388:	a4 e3       	ldi	r26, 0x34	; 52
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 1f 59 	jmp	0xb23e	; 0xb23e <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1394:	8b e0       	ldi	r24, 0x0B	; 11
    1396:	98 e2       	ldi	r25, 0x28	; 40
    1398:	66 eb       	ldi	r22, 0xB6	; 182
    139a:	70 e2       	ldi	r23, 0x20	; 32
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
    if (res == FR_OK) {
    13a2:	88 23       	and	r24, r24
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <dump_mat+0x20>
    13a6:	b5 c0       	rjmp	.+362    	; 0x1512 <dump_mat+0x18a>
        // looks good
        iteration = file4.fsize/50;
    13a8:	80 90 15 28 	lds	r8, 0x2815
    13ac:	70 91 16 28 	lds	r23, 0x2816
    13b0:	68 2d       	mov	r22, r8
    13b2:	80 91 17 28 	lds	r24, 0x2817
    13b6:	90 91 18 28 	lds	r25, 0x2818
    13ba:	22 e3       	ldi	r18, 0x32	; 50
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    13c6:	79 01       	movw	r14, r18
    13c8:	8a 01       	movw	r16, r20
    13ca:	99 24       	eor	r9, r9
    13cc:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    13ce:	22 e3       	ldi	r18, 0x32	; 50
    13d0:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	69 2e       	mov	r6, r25
    13d6:	71 2c       	mov	r7, r1
    13d8:	6c 0e       	add	r6, r28
    13da:	7d 1e       	adc	r7, r29
    13dc:	2e 01       	movw	r4, r28
    13de:	08 94       	sec
    13e0:	41 1c       	adc	r4, r1
    13e2:	51 1c       	adc	r5, r1
    13e4:	3a c0       	rjmp	.+116    	; 0x145a <dump_mat+0xd2>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    13e6:	93 9c       	mul	r9, r3
    13e8:	c0 01       	movw	r24, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	c2 97       	sbiw	r24, 0x32	; 50
    13ee:	5c 01       	movw	r10, r24
    13f0:	cc 24       	eor	r12, r12
    13f2:	b7 fc       	sbrc	r11, 7
    13f4:	c0 94       	com	r12
    13f6:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    13f8:	8b e0       	ldi	r24, 0x0B	; 11
    13fa:	98 e2       	ldi	r25, 0x28	; 40
    13fc:	b6 01       	movw	r22, r12
    13fe:	a5 01       	movw	r20, r10
    1400:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    1404:	88 23       	and	r24, r24
    1406:	01 f5       	brne	.+64     	; 0x1448 <dump_mat+0xc0>
    1408:	80 91 11 28 	lds	r24, 0x2811
    140c:	90 91 12 28 	lds	r25, 0x2812
    1410:	a0 91 13 28 	lds	r26, 0x2813
    1414:	b0 91 14 28 	lds	r27, 0x2814
    1418:	8a 15       	cp	r24, r10
    141a:	9b 05       	cpc	r25, r11
    141c:	ac 05       	cpc	r26, r12
    141e:	bd 05       	cpc	r27, r13
    1420:	99 f4       	brne	.+38     	; 0x1448 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    1422:	8b e0       	ldi	r24, 0x0B	; 11
    1424:	98 e2       	ldi	r25, 0x28	; 40
    1426:	b3 01       	movw	r22, r6
    1428:	42 e3       	ldi	r20, 0x32	; 50
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	92 01       	movw	r18, r4
    142e:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    1432:	88 23       	and	r24, r24
    1434:	89 f4       	brne	.+34     	; 0x1458 <dump_mat+0xd0>
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	c2 97       	sbiw	r24, 0x32	; 50
    143c:	69 f4       	brne	.+26     	; 0x1458 <dump_mat+0xd0>
                    send_Tx_buffer(matBuff, 50);
    143e:	c3 01       	movw	r24, r6
    1440:	62 e3       	ldi	r22, 0x32	; 50
    1442:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <send_Tx_buffer>
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <dump_mat+0xd0>
                }
            }else {
                if (quiet_mode_on == 0)
    1448:	80 91 b1 20 	lds	r24, 0x20B1
    144c:	88 23       	and	r24, r24
    144e:	21 f4       	brne	.+8      	; 0x1458 <dump_mat+0xd0>
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    1450:	84 e7       	ldi	r24, 0x74	; 116
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    1458:	93 94       	inc	r9
    145a:	89 2d       	mov	r24, r9
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e8 16       	cp	r14, r24
    1464:	f9 06       	cpc	r15, r25
    1466:	0a 07       	cpc	r16, r26
    1468:	1b 07       	cpc	r17, r27
    146a:	08 f0       	brcs	.+2      	; 0x146e <dump_mat+0xe6>
    146c:	bc cf       	rjmp	.-136    	; 0x13e6 <dump_mat+0x5e>
                if (quiet_mode_on == 0)
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    146e:	82 e3       	ldi	r24, 0x32	; 50
    1470:	98 9e       	mul	r9, r24
    1472:	c0 01       	movw	r24, r0
    1474:	11 24       	eor	r1, r1
    1476:	c2 97       	sbiw	r24, 0x32	; 50
    1478:	5c 01       	movw	r10, r24
    147a:	cc 24       	eor	r12, r12
    147c:	b7 fc       	sbrc	r11, 7
    147e:	c0 94       	com	r12
    1480:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1482:	8b e0       	ldi	r24, 0x0B	; 11
    1484:	98 e2       	ldi	r25, 0x28	; 40
    1486:	b6 01       	movw	r22, r12
    1488:	a5 01       	movw	r20, r10
    148a:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    148e:	88 23       	and	r24, r24
    1490:	99 f5       	brne	.+102    	; 0x14f8 <dump_mat+0x170>
    1492:	80 91 11 28 	lds	r24, 0x2811
    1496:	90 91 12 28 	lds	r25, 0x2812
    149a:	a0 91 13 28 	lds	r26, 0x2813
    149e:	b0 91 14 28 	lds	r27, 0x2814
    14a2:	8a 15       	cp	r24, r10
    14a4:	9b 05       	cpc	r25, r11
    14a6:	ac 05       	cpc	r26, r12
    14a8:	bd 05       	cpc	r27, r13
    14aa:	31 f5       	brne	.+76     	; 0x14f8 <dump_mat+0x170>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    14ac:	c8 01       	movw	r24, r16
    14ae:	b7 01       	movw	r22, r14
    14b0:	22 e3       	ldi	r18, 0x32	; 50
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    14bc:	d8 2c       	mov	r13, r8
    14be:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    14c0:	0d 2d       	mov	r16, r13
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	e8 2e       	mov	r14, r24
    14c8:	f1 2c       	mov	r15, r1
    14ca:	ec 0e       	add	r14, r28
    14cc:	fd 1e       	adc	r15, r29
    14ce:	8b e0       	ldi	r24, 0x0B	; 11
    14d0:	98 e2       	ldi	r25, 0x28	; 40
    14d2:	b7 01       	movw	r22, r14
    14d4:	a8 01       	movw	r20, r16
    14d6:	9e 01       	movw	r18, r28
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    14e0:	88 23       	and	r24, r24
    14e2:	91 f4       	brne	.+36     	; 0x1508 <dump_mat+0x180>
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	80 17       	cp	r24, r16
    14ea:	91 07       	cpc	r25, r17
    14ec:	69 f4       	brne	.+26     	; 0x1508 <dump_mat+0x180>
                send_Tx_buffer(matBuff, fileRemain);
    14ee:	c7 01       	movw	r24, r14
    14f0:	6d 2d       	mov	r22, r13
    14f2:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <send_Tx_buffer>
    14f6:	08 c0       	rjmp	.+16     	; 0x1508 <dump_mat+0x180>
            }
        }else {
            if (quiet_mode_on == 0)
    14f8:	80 91 b1 20 	lds	r24, 0x20B1
    14fc:	88 23       	and	r24, r24
    14fe:	21 f4       	brne	.+8      	; 0x1508 <dump_mat+0x180>
                xputs(PSTR("Error f_lseek in remained data.\n"));
    1500:	83 e5       	ldi	r24, 0x53	; 83
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        }
        
        f_close(&file4);
    1508:	8b e0       	ldi	r24, 0x0B	; 11
    150a:	98 e2       	ldi	r25, 0x28	; 40
    150c:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <dump_mat+0x19a>
    } else {
        if (quiet_mode_on == 0)
    1512:	80 91 b1 20 	lds	r24, 0x20B1
    1516:	88 23       	and	r24, r24
    1518:	21 f4       	brne	.+8      	; 0x1522 <dump_mat+0x19a>
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK)
    151a:	86 e3       	ldi	r24, 0x36	; 54
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    }
    
}
    1522:	e4 96       	adiw	r28, 0x34	; 52
    1524:	e1 e1       	ldi	r30, 0x11	; 17
    1526:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <__epilogue_restores__+0x2>

0000152a <fetch_update_funcY>:
		//Y_dac_val = (uint32_t)function_counter_y*32767/FUNCTION_LENGTH;
        analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    }
}

void fetch_update_funcY(uint8_t fReset){
    152a:	a2 e0       	ldi	r26, 0x02	; 2
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e9       	ldi	r30, 0x9B	; 155
    1530:	fa e0       	ldi	r31, 0x0A	; 10
    1532:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
	uint16_t cnt, j, offset;
	uint8_t res;
	//uint8_t funcYBuff[2*FUNCTION_LENGTH];
	int16_t tempVal;

	if ((fReset == 1) || (func_global_counter_y >= funcSize_y - 2)){
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	c1 f0       	breq	.+48     	; 0x156a <fetch_update_funcY+0x40>
    153a:	20 91 f9 24 	lds	r18, 0x24F9
    153e:	30 91 fa 24 	lds	r19, 0x24FA
    1542:	40 91 fb 24 	lds	r20, 0x24FB
    1546:	50 91 fc 24 	lds	r21, 0x24FC
    154a:	80 91 ad 20 	lds	r24, 0x20AD
    154e:	90 91 ae 20 	lds	r25, 0x20AE
    1552:	a0 91 af 20 	lds	r26, 0x20AF
    1556:	b0 91 b0 20 	lds	r27, 0x20B0
    155a:	02 97       	sbiw	r24, 0x02	; 2
    155c:	a1 09       	sbc	r26, r1
    155e:	b1 09       	sbc	r27, r1
    1560:	28 17       	cp	r18, r24
    1562:	39 07       	cpc	r19, r25
    1564:	4a 07       	cpc	r20, r26
    1566:	5b 07       	cpc	r21, r27
    1568:	78 f0       	brcs	.+30     	; 0x1588 <fetch_update_funcY+0x5e>
        
		function_counter_y = 0;
    156a:	10 92 f3 24 	sts	0x24F3, r1
    156e:	10 92 f4 24 	sts	0x24F4, r1
		func_global_counter_y = 0;
    1572:	10 92 f9 24 	sts	0x24F9, r1
    1576:	10 92 fa 24 	sts	0x24FA, r1
    157a:	10 92 fb 24 	sts	0x24FB, r1
    157e:	10 92 fc 24 	sts	0x24FC, r1
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	52 e0       	ldi	r21, 0x02	; 2
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <fetch_update_funcY+0x7c>
		offset = 512;        

	}
	else{
	    //read the next loadBuffer bytes
        offset = 512 + func_global_counter_y;
    1588:	80 91 f9 24 	lds	r24, 0x24F9
    158c:	90 91 fa 24 	lds	r25, 0x24FA
    1590:	a0 91 fb 24 	lds	r26, 0x24FB
    1594:	b0 91 fc 24 	lds	r27, 0x24FC
    1598:	ac 01       	movw	r20, r24
    159a:	40 50       	subi	r20, 0x00	; 0
    159c:	5e 4f       	sbci	r21, 0xFE	; 254
		function_counter_y = 0;
    159e:	10 92 f3 24 	sts	0x24F3, r1
    15a2:	10 92 f4 24 	sts	0x24F4, r1

	}
	
	res = f_lseek(&file3, offset);
    15a6:	7a 01       	movw	r14, r20
    15a8:	00 e0       	ldi	r16, 0x00	; 0
    15aa:	10 e0       	ldi	r17, 0x00	; 0
    15ac:	8e e0       	ldi	r24, 0x0E	; 14
    15ae:	97 e2       	ldi	r25, 0x27	; 39
    15b0:	b8 01       	movw	r22, r16
    15b2:	a7 01       	movw	r20, r14
    15b4:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
    15b8:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file3.fptr == offset)) {
    15ba:	88 23       	and	r24, r24
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <fetch_update_funcY+0x96>
    15be:	73 c0       	rjmp	.+230    	; 0x16a6 <fetch_update_funcY+0x17c>
    15c0:	80 91 14 27 	lds	r24, 0x2714
    15c4:	90 91 15 27 	lds	r25, 0x2715
    15c8:	a0 91 16 27 	lds	r26, 0x2716
    15cc:	b0 91 17 27 	lds	r27, 0x2717
    15d0:	8e 15       	cp	r24, r14
    15d2:	9f 05       	cpc	r25, r15
    15d4:	a0 07       	cpc	r26, r16
    15d6:	b1 07       	cpc	r27, r17
    15d8:	09 f0       	breq	.+2      	; 0x15dc <fetch_update_funcY+0xb2>
    15da:	65 c0       	rjmp	.+202    	; 0x16a6 <fetch_update_funcY+0x17c>
		
		if (funcSize_y - func_global_counter_y >= 2*FUNCTION_LENGTH) {
    15dc:	20 91 ad 20 	lds	r18, 0x20AD
    15e0:	30 91 ae 20 	lds	r19, 0x20AE
    15e4:	40 91 af 20 	lds	r20, 0x20AF
    15e8:	50 91 b0 20 	lds	r21, 0x20B0
    15ec:	80 91 f9 24 	lds	r24, 0x24F9
    15f0:	90 91 fa 24 	lds	r25, 0x24FA
    15f4:	a0 91 fb 24 	lds	r26, 0x24FB
    15f8:	b0 91 fc 24 	lds	r27, 0x24FC
    15fc:	79 01       	movw	r14, r18
    15fe:	8a 01       	movw	r16, r20
    1600:	e8 1a       	sub	r14, r24
    1602:	f9 0a       	sbc	r15, r25
    1604:	0a 0b       	sbc	r16, r26
    1606:	1b 0b       	sbc	r17, r27
    1608:	d8 01       	movw	r26, r16
    160a:	c7 01       	movw	r24, r14
    160c:	88 3c       	cpi	r24, 0xC8	; 200
    160e:	91 05       	cpc	r25, r1
    1610:	a1 05       	cpc	r26, r1
    1612:	b1 05       	cpc	r27, r1
    1614:	18 f0       	brcs	.+6      	; 0x161c <fetch_update_funcY+0xf2>
			loadYBuffer = 2*FUNCTION_LENGTH;
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <fetch_update_funcY+0x10a>
		}
		else {
			loadYBuffer = funcSize_y - func_global_counter_y;
    161c:	80 91 f9 24 	lds	r24, 0x24F9
    1620:	90 91 fa 24 	lds	r25, 0x24FA
    1624:	a0 91 fb 24 	lds	r26, 0x24FB
    1628:	b0 91 fc 24 	lds	r27, 0x24FC
    162c:	89 01       	movw	r16, r18
    162e:	08 1b       	sub	r16, r24
    1630:	19 0b       	sbc	r17, r25
    1632:	c8 01       	movw	r24, r16
    1634:	80 93 b4 20 	sts	0x20B4, r24
    1638:	90 93 b5 20 	sts	0x20B5, r25
		}
		
		res = f_read(&file3, function_Y, loadYBuffer, &cnt);
    163c:	40 91 b4 20 	lds	r20, 0x20B4
    1640:	50 91 b5 20 	lds	r21, 0x20B5
    1644:	8e e0       	ldi	r24, 0x0E	; 14
    1646:	97 e2       	ldi	r25, 0x27	; 39
    1648:	64 eb       	ldi	r22, 0xB4	; 180
    164a:	75 e2       	ldi	r23, 0x25	; 37
    164c:	9e 01       	movw	r18, r28
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
    1656:	48 2f       	mov	r20, r24
		if (!((res == FR_OK) && (cnt == loadYBuffer))) {
    1658:	88 23       	and	r24, r24
    165a:	49 f4       	brne	.+18     	; 0x166e <fetch_update_funcY+0x144>
    165c:	20 91 b4 20 	lds	r18, 0x20B4
    1660:	30 91 b5 20 	lds	r19, 0x20B5
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	82 17       	cp	r24, r18
    166a:	93 07       	cpc	r25, r19
    166c:	c9 f1       	breq	.+114    	; 0x16e0 <fetch_update_funcY+0x1b6>
			if (quiet_mode_on == 0){
    166e:	80 91 b1 20 	lds	r24, 0x20B1
    1672:	88 23       	and	r24, r24
    1674:	a9 f5       	brne	.+106    	; 0x16e0 <fetch_update_funcY+0x1b6>
				xprintf(PSTR("res =  %u\n"), res);
    1676:	00 d0       	rcall	.+0      	; 0x1678 <fetch_update_funcY+0x14e>
    1678:	0f 92       	push	r0
    167a:	ed b7       	in	r30, 0x3d	; 61
    167c:	fe b7       	in	r31, 0x3e	; 62
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	89 ef       	ldi	r24, 0xF9	; 249
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	ad b7       	in	r26, 0x3d	; 61
    1686:	be b7       	in	r27, 0x3e	; 62
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	8d 93       	st	X+, r24
    168c:	9c 93       	st	X, r25
    168e:	12 97       	sbiw	r26, 0x02	; 2
    1690:	42 83       	std	Z+2, r20	; 0x02
    1692:	13 82       	std	Z+3, r1	; 0x03
    1694:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
				xputs(PSTR("Error in f_read in update_funcCnt_y\n"));
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	84 ed       	ldi	r24, 0xD4	; 212
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	1b c0       	rjmp	.+54     	; 0x16dc <fetch_update_funcY+0x1b2>
			}
		}

	} else {
		if (quiet_mode_on == 0){
    16a6:	80 91 b1 20 	lds	r24, 0x20B1
    16aa:	88 23       	and	r24, r24
    16ac:	c9 f4       	brne	.+50     	; 0x16e0 <fetch_update_funcY+0x1b6>
			xprintf(PSTR("res =  %u\n"), res);
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <fetch_update_funcY+0x186>
    16b0:	0f 92       	push	r0
    16b2:	ed b7       	in	r30, 0x3d	; 61
    16b4:	fe b7       	in	r31, 0x3e	; 62
    16b6:	31 96       	adiw	r30, 0x01	; 1
    16b8:	89 ec       	ldi	r24, 0xC9	; 201
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	ad b7       	in	r26, 0x3d	; 61
    16be:	be b7       	in	r27, 0x3e	; 62
    16c0:	11 96       	adiw	r26, 0x01	; 1
    16c2:	8d 93       	st	X+, r24
    16c4:	9c 93       	st	X, r25
    16c6:	12 97       	sbiw	r26, 0x02	; 2
    16c8:	22 83       	std	Z+2, r18	; 0x02
    16ca:	13 82       	std	Z+3, r1	; 0x03
    16cc:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	82 e9       	ldi	r24, 0x92	; 146
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
		}
	}
	} 
    16e0:	22 96       	adiw	r28, 0x02	; 2
    16e2:	e6 e0       	ldi	r30, 0x06	; 6
    16e4:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

000016e8 <fetch_update_funcX>:

        analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    }
}

void fetch_update_funcX(uint8_t fReset) {
    16e8:	a2 e0       	ldi	r26, 0x02	; 2
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e7       	ldi	r30, 0x7A	; 122
    16ee:	fb e0       	ldi	r31, 0x0B	; 11
    16f0:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	int16_t tempVal;
	//fReset = 1 mean we need to load the first FUNCTIONLLENGTH of function data into buffer
	//because users always want the functions start from the beginning every time send start command
	
	if ((fReset == 1) || (func_global_counter_x >= funcSize_x - 2)){
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	c1 f0       	breq	.+48     	; 0x1728 <fetch_update_funcX+0x40>
    16f8:	20 91 f5 24 	lds	r18, 0x24F5
    16fc:	30 91 f6 24 	lds	r19, 0x24F6
    1700:	40 91 f7 24 	lds	r20, 0x24F7
    1704:	50 91 f8 24 	lds	r21, 0x24F8
    1708:	80 91 a9 20 	lds	r24, 0x20A9
    170c:	90 91 aa 20 	lds	r25, 0x20AA
    1710:	a0 91 ab 20 	lds	r26, 0x20AB
    1714:	b0 91 ac 20 	lds	r27, 0x20AC
    1718:	02 97       	sbiw	r24, 0x02	; 2
    171a:	a1 09       	sbc	r26, r1
    171c:	b1 09       	sbc	r27, r1
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
    1722:	4a 07       	cpc	r20, r26
    1724:	5b 07       	cpc	r21, r27
    1726:	78 f0       	brcs	.+30     	; 0x1746 <fetch_update_funcX+0x5e>
        
		function_counter_x = 0;
    1728:	10 92 f1 24 	sts	0x24F1, r1
    172c:	10 92 f2 24 	sts	0x24F2, r1
		func_global_counter_x = 0;
    1730:	10 92 f5 24 	sts	0x24F5, r1
    1734:	10 92 f6 24 	sts	0x24F6, r1
    1738:	10 92 f7 24 	sts	0x24F7, r1
    173c:	10 92 f8 24 	sts	0x24F8, r1
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	52 e0       	ldi	r21, 0x02	; 2
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <fetch_update_funcX+0x7c>
		offset = 512;        

	}
	else{
	    //read the next loadBuffer bytes
        offset = 512 + func_global_counter_x;
    1746:	80 91 f5 24 	lds	r24, 0x24F5
    174a:	90 91 f6 24 	lds	r25, 0x24F6
    174e:	a0 91 f7 24 	lds	r26, 0x24F7
    1752:	b0 91 f8 24 	lds	r27, 0x24F8
    1756:	ac 01       	movw	r20, r24
    1758:	40 50       	subi	r20, 0x00	; 0
    175a:	5e 4f       	sbci	r21, 0xFE	; 254
		function_counter_x = 0;
    175c:	10 92 f1 24 	sts	0x24F1, r1
    1760:	10 92 f2 24 	sts	0x24F2, r1
	}
            
	res = f_lseek(&file2, offset);
    1764:	7a 01       	movw	r14, r20
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	8f e7       	ldi	r24, 0x7F	; 127
    176c:	95 e2       	ldi	r25, 0x25	; 37
    176e:	b8 01       	movw	r22, r16
    1770:	a7 01       	movw	r20, r14
    1772:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
    1776:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file2.fptr == offset)) {
    1778:	88 23       	and	r24, r24
    177a:	09 f0       	breq	.+2      	; 0x177e <fetch_update_funcX+0x96>
    177c:	73 c0       	rjmp	.+230    	; 0x1864 <fetch_update_funcX+0x17c>
    177e:	80 91 85 25 	lds	r24, 0x2585
    1782:	90 91 86 25 	lds	r25, 0x2586
    1786:	a0 91 87 25 	lds	r26, 0x2587
    178a:	b0 91 88 25 	lds	r27, 0x2588
    178e:	8e 15       	cp	r24, r14
    1790:	9f 05       	cpc	r25, r15
    1792:	a0 07       	cpc	r26, r16
    1794:	b1 07       	cpc	r27, r17
    1796:	09 f0       	breq	.+2      	; 0x179a <fetch_update_funcX+0xb2>
    1798:	65 c0       	rjmp	.+202    	; 0x1864 <fetch_update_funcX+0x17c>
		
		if (funcSize_x - func_global_counter_x >= 2*FUNCTION_LENGTH) {
    179a:	20 91 a9 20 	lds	r18, 0x20A9
    179e:	30 91 aa 20 	lds	r19, 0x20AA
    17a2:	40 91 ab 20 	lds	r20, 0x20AB
    17a6:	50 91 ac 20 	lds	r21, 0x20AC
    17aa:	80 91 f5 24 	lds	r24, 0x24F5
    17ae:	90 91 f6 24 	lds	r25, 0x24F6
    17b2:	a0 91 f7 24 	lds	r26, 0x24F7
    17b6:	b0 91 f8 24 	lds	r27, 0x24F8
    17ba:	79 01       	movw	r14, r18
    17bc:	8a 01       	movw	r16, r20
    17be:	e8 1a       	sub	r14, r24
    17c0:	f9 0a       	sbc	r15, r25
    17c2:	0a 0b       	sbc	r16, r26
    17c4:	1b 0b       	sbc	r17, r27
    17c6:	d8 01       	movw	r26, r16
    17c8:	c7 01       	movw	r24, r14
    17ca:	88 3c       	cpi	r24, 0xC8	; 200
    17cc:	91 05       	cpc	r25, r1
    17ce:	a1 05       	cpc	r26, r1
    17d0:	b1 05       	cpc	r27, r1
    17d2:	18 f0       	brcs	.+6      	; 0x17da <fetch_update_funcX+0xf2>
			loadXBuffer = 2*FUNCTION_LENGTH;
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0c c0       	rjmp	.+24     	; 0x17f2 <fetch_update_funcX+0x10a>
		}
		else {
			loadXBuffer = funcSize_x - func_global_counter_x;
    17da:	80 91 f5 24 	lds	r24, 0x24F5
    17de:	90 91 f6 24 	lds	r25, 0x24F6
    17e2:	a0 91 f7 24 	lds	r26, 0x24F7
    17e6:	b0 91 f8 24 	lds	r27, 0x24F8
    17ea:	89 01       	movw	r16, r18
    17ec:	08 1b       	sub	r16, r24
    17ee:	19 0b       	sbc	r17, r25
    17f0:	c8 01       	movw	r24, r16
    17f2:	80 93 b2 20 	sts	0x20B2, r24
    17f6:	90 93 b3 20 	sts	0x20B3, r25
		}
		
		
		//res = f_read(&file2, funcXBuff, loadXBuffer, &cnt);
		res = f_read(&file2, function_X, loadXBuffer, &cnt);
    17fa:	40 91 b2 20 	lds	r20, 0x20B2
    17fe:	50 91 b3 20 	lds	r21, 0x20B3
    1802:	8f e7       	ldi	r24, 0x7F	; 127
    1804:	95 e2       	ldi	r25, 0x25	; 37
    1806:	6d e2       	ldi	r22, 0x2D	; 45
    1808:	78 e2       	ldi	r23, 0x28	; 40
    180a:	9e 01       	movw	r18, r28
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
    1814:	48 2f       	mov	r20, r24
		if (!((res == FR_OK) && (cnt == loadXBuffer))) {
    1816:	88 23       	and	r24, r24
    1818:	49 f4       	brne	.+18     	; 0x182c <fetch_update_funcX+0x144>
    181a:	20 91 b2 20 	lds	r18, 0x20B2
    181e:	30 91 b3 20 	lds	r19, 0x20B3
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	82 17       	cp	r24, r18
    1828:	93 07       	cpc	r25, r19
    182a:	c9 f1       	breq	.+114    	; 0x189e <fetch_update_funcX+0x1b6>
			
			if (quiet_mode_on == 0){
    182c:	80 91 b1 20 	lds	r24, 0x20B1
    1830:	88 23       	and	r24, r24
    1832:	a9 f5       	brne	.+106    	; 0x189e <fetch_update_funcX+0x1b6>
				xprintf(PSTR("res =  %u\n"), res);
    1834:	00 d0       	rcall	.+0      	; 0x1836 <fetch_update_funcX+0x14e>
    1836:	0f 92       	push	r0
    1838:	ed b7       	in	r30, 0x3d	; 61
    183a:	fe b7       	in	r31, 0x3e	; 62
    183c:	31 96       	adiw	r30, 0x01	; 1
    183e:	8d e5       	ldi	r24, 0x5D	; 93
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	ad b7       	in	r26, 0x3d	; 61
    1844:	be b7       	in	r27, 0x3e	; 62
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	8d 93       	st	X+, r24
    184a:	9c 93       	st	X, r25
    184c:	12 97       	sbiw	r26, 0x02	; 2
    184e:	42 83       	std	Z+2, r20	; 0x02
    1850:	13 82       	std	Z+3, r1	; 0x03
    1852:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
				xputs(PSTR("Error in f_read in in update_funcCnt_x\n"));
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	85 e3       	ldi	r24, 0x35	; 53
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	1b c0       	rjmp	.+54     	; 0x189a <fetch_update_funcX+0x1b2>
			}
		}
		
	} else {
		if (quiet_mode_on == 0){
    1864:	80 91 b1 20 	lds	r24, 0x20B1
    1868:	88 23       	and	r24, r24
    186a:	c9 f4       	brne	.+50     	; 0x189e <fetch_update_funcX+0x1b6>
			xprintf(PSTR("res =  %u\n"), res);
    186c:	00 d0       	rcall	.+0      	; 0x186e <fetch_update_funcX+0x186>
    186e:	0f 92       	push	r0
    1870:	ed b7       	in	r30, 0x3d	; 61
    1872:	fe b7       	in	r31, 0x3e	; 62
    1874:	31 96       	adiw	r30, 0x01	; 1
    1876:	8a e2       	ldi	r24, 0x2A	; 42
    1878:	93 e0       	ldi	r25, 0x03	; 3
    187a:	ad b7       	in	r26, 0x3d	; 61
    187c:	be b7       	in	r27, 0x3e	; 62
    187e:	11 96       	adiw	r26, 0x01	; 1
    1880:	8d 93       	st	X+, r24
    1882:	9c 93       	st	X, r25
    1884:	12 97       	sbiw	r26, 0x02	; 2
    1886:	22 83       	std	Z+2, r18	; 0x02
    1888:	13 82       	std	Z+3, r1	; 0x03
    188a:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_x\n"));
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	84 e0       	ldi	r24, 0x04	; 4
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
		}
	}
}
    189e:	22 96       	adiw	r28, 0x02	; 2
    18a0:	e6 e0       	ldi	r30, 0x06	; 6
    18a2:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

000018a6 <update_funcCnt_y>:
    uint16_t cnt, j;
    uint8_t res;
    int16_t tempVal;
    uint8_t funcYBuff[2*FUNCTION_LENGTH];
    
    if (func_ID_Y != 0){
    18a6:	80 91 ff 24 	lds	r24, 0x24FF
    18aa:	90 91 00 25 	lds	r25, 0x2500
    18ae:	89 2b       	or	r24, r25
    18b0:	e9 f0       	breq	.+58     	; 0x18ec <update_funcCnt_y+0x46>
        function_counter_y ++;
    18b2:	80 91 f3 24 	lds	r24, 0x24F3
    18b6:	90 91 f4 24 	lds	r25, 0x24F4
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	80 93 f3 24 	sts	0x24F3, r24
    18c0:	90 93 f4 24 	sts	0x24F4, r25
        func_global_counter_y = func_global_counter_y + 2;     
    18c4:	80 91 f9 24 	lds	r24, 0x24F9
    18c8:	90 91 fa 24 	lds	r25, 0x24FA
    18cc:	a0 91 fb 24 	lds	r26, 0x24FB
    18d0:	b0 91 fc 24 	lds	r27, 0x24FC
    18d4:	02 96       	adiw	r24, 0x02	; 2
    18d6:	a1 1d       	adc	r26, r1
    18d8:	b1 1d       	adc	r27, r1
    18da:	80 93 f9 24 	sts	0x24F9, r24
    18de:	90 93 fa 24 	sts	0x24FA, r25
    18e2:	a0 93 fb 24 	sts	0x24FB, r26
    18e6:	b0 93 fc 24 	sts	0x24FC, r27
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <update_funcCnt_y+0x60>
    }
    else{
        function_counter_y = (function_counter_y + 1)%FUNCTION_LENGTH;
    18ec:	80 91 f3 24 	lds	r24, 0x24F3
    18f0:	90 91 f4 24 	lds	r25, 0x24F4
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	64 e6       	ldi	r22, 0x64	; 100
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    18fe:	80 93 f3 24 	sts	0x24F3, r24
    1902:	90 93 f4 24 	sts	0x24F4, r25
    }
    
	//update analog output
    if (y_mode == 5){
    1906:	80 91 09 28 	lds	r24, 0x2809
    190a:	85 30       	cpi	r24, 0x05	; 5
    190c:	a9 f4       	brne	.+42     	; 0x1938 <update_funcCnt_y+0x92>
		//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
        Y_dac_val = function_Y[function_counter_y]*33;  
    190e:	e0 91 f3 24 	lds	r30, 0x24F3
    1912:	f0 91 f4 24 	lds	r31, 0x24F4
		//Y_dac_val = (uint32_t)function_counter_y*32767/FUNCTION_LENGTH;
        analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ec 54       	subi	r30, 0x4C	; 76
    191c:	fa 4d       	sbci	r31, 0xDA	; 218
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	bc 01       	movw	r22, r24
    1924:	35 e0       	ldi	r19, 0x05	; 5
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	3a 95       	dec	r19
    192c:	e1 f7       	brne	.-8      	; 0x1926 <update_funcCnt_y+0x80>
    192e:	68 0f       	add	r22, r24
    1930:	79 1f       	adc	r23, r25
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    1938:	08 95       	ret

0000193a <update_funcCnt_x>:
    uint16_t cnt, j;
    uint8_t res;
    int16_t tempVal;

    
    if (func_ID_X != 0){
    193a:	80 91 fd 24 	lds	r24, 0x24FD
    193e:	90 91 fe 24 	lds	r25, 0x24FE
    1942:	89 2b       	or	r24, r25
    1944:	e9 f0       	breq	.+58     	; 0x1980 <update_funcCnt_x+0x46>
        
        function_counter_x++;  //min:0, max:FUNCTION_LENGTH
    1946:	80 91 f1 24 	lds	r24, 0x24F1
    194a:	90 91 f2 24 	lds	r25, 0x24F2
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	80 93 f1 24 	sts	0x24F1, r24
    1954:	90 93 f2 24 	sts	0x24F2, r25
        func_global_counter_x = func_global_counter_x + 2; //min:0, max:funcSize_x Note:size of each function datum is 2 bytes.
    1958:	80 91 f5 24 	lds	r24, 0x24F5
    195c:	90 91 f6 24 	lds	r25, 0x24F6
    1960:	a0 91 f7 24 	lds	r26, 0x24F7
    1964:	b0 91 f8 24 	lds	r27, 0x24F8
    1968:	02 96       	adiw	r24, 0x02	; 2
    196a:	a1 1d       	adc	r26, r1
    196c:	b1 1d       	adc	r27, r1
    196e:	80 93 f5 24 	sts	0x24F5, r24
    1972:	90 93 f6 24 	sts	0x24F6, r25
    1976:	a0 93 f7 24 	sts	0x24F7, r26
    197a:	b0 93 f8 24 	sts	0x24F8, r27
    197e:	0d c0       	rjmp	.+26     	; 0x199a <update_funcCnt_x+0x60>
        
    }
    else{
        function_counter_x = (function_counter_x + 1)%FUNCTION_LENGTH;
    1980:	80 91 f1 24 	lds	r24, 0x24F1
    1984:	90 91 f2 24 	lds	r25, 0x24F2
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	64 e6       	ldi	r22, 0x64	; 100
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    1992:	80 93 f1 24 	sts	0x24F1, r24
    1996:	90 93 f2 24 	sts	0x24F2, r25
    }
    
    if (x_mode == 5)   // in function DBG mode - show the function gen
    199a:	80 91 bf 27 	lds	r24, 0x27BF
    199e:	85 30       	cpi	r24, 0x05	; 5
    19a0:	a9 f4       	brne	.+42     	; 0x19cc <update_funcCnt_x+0x92>
    {
		//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
        X_dac_val = function_X[function_counter_x]*33;
    19a2:	e0 91 f1 24 	lds	r30, 0x24F1
    19a6:	f0 91 f2 24 	lds	r31, 0x24F2

        analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	e3 5d       	subi	r30, 0xD3	; 211
    19b0:	f7 4d       	sbci	r31, 0xD7	; 215
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	bc 01       	movw	r22, r24
    19b8:	55 e0       	ldi	r21, 0x05	; 5
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	5a 95       	dec	r21
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <update_funcCnt_x+0x80>
    19c2:	68 0f       	add	r22, r24
    19c4:	79 1f       	adc	r23, r25
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    19cc:	08 95       	ret

000019ce <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    19ce:	ae e0       	ldi	r26, 0x0E	; 14
    19d0:	b2 e0       	ldi	r27, 0x02	; 2
    19d2:	ed ee       	ldi	r30, 0xED	; 237
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	0c 94 2c 59 	jmp	0xb258	; 0xb258 <__prologue_saves__+0x1c>
    19da:	08 2f       	mov	r16, r24
    19dc:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    19de:	6a 30       	cpi	r22, 0x0A	; 10
    19e0:	80 f4       	brcc	.+32     	; 0x1a02 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <set_vel_func+0x16>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <set_vel_func+0x18>
    19e6:	ed b7       	in	r30, 0x3d	; 61
    19e8:	fe b7       	in	r31, 0x3e	; 62
    19ea:	31 96       	adiw	r30, 0x01	; 1
    19ec:	ce 01       	movw	r24, r28
    19ee:	03 96       	adiw	r24, 0x03	; 3
    19f0:	ad b7       	in	r26, 0x3d	; 61
    19f2:	be b7       	in	r27, 0x3e	; 62
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	8d 93       	st	X+, r24
    19f8:	9c 93       	st	X, r25
    19fa:	12 97       	sbiw	r26, 0x02	; 2
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e2       	ldi	r25, 0x20	; 32
    1a00:	1f c0       	rjmp	.+62     	; 0x1a40 <set_vel_func+0x72>
    1a02:	ce 01       	movw	r24, r28
    1a04:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1a06:	64 36       	cpi	r22, 0x64	; 100
    1a08:	70 f4       	brcc	.+28     	; 0x1a26 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <set_vel_func+0x3e>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <set_vel_func+0x40>
    1a0e:	ed b7       	in	r30, 0x3d	; 61
    1a10:	fe b7       	in	r31, 0x3e	; 62
    1a12:	31 96       	adiw	r30, 0x01	; 1
    1a14:	ad b7       	in	r26, 0x3d	; 61
    1a16:	be b7       	in	r27, 0x3e	; 62
    1a18:	11 96       	adiw	r26, 0x01	; 1
    1a1a:	8d 93       	st	X+, r24
    1a1c:	9c 93       	st	X, r25
    1a1e:	12 97       	sbiw	r26, 0x02	; 2
    1a20:	8e e0       	ldi	r24, 0x0E	; 14
    1a22:	90 e2       	ldi	r25, 0x20	; 32
    1a24:	0d c0       	rjmp	.+26     	; 0x1a40 <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <set_vel_func+0x5a>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <set_vel_func+0x5c>
    1a2a:	ed b7       	in	r30, 0x3d	; 61
    1a2c:	fe b7       	in	r31, 0x3e	; 62
    1a2e:	31 96       	adiw	r30, 0x01	; 1
    1a30:	ad b7       	in	r26, 0x3d	; 61
    1a32:	be b7       	in	r27, 0x3e	; 62
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	8d 93       	st	X+, r24
    1a38:	9c 93       	st	X, r25
    1a3a:	12 97       	sbiw	r26, 0x02	; 2
    1a3c:	8b e1       	ldi	r24, 0x1B	; 27
    1a3e:	90 e2       	ldi	r25, 0x20	; 32
    1a40:	82 83       	std	Z+2, r24	; 0x02
    1a42:	93 83       	std	Z+3, r25	; 0x03
    1a44:	14 83       	std	Z+4, r17	; 0x04
    1a46:	15 82       	std	Z+5, r1	; 0x05
    1a48:	0e 94 e9 5b 	call	0xb7d2	; 0xb7d2 <sprintf>
    1a4c:	8d b7       	in	r24, 0x3d	; 61
    1a4e:	9e b7       	in	r25, 0x3e	; 62
    1a50:	06 96       	adiw	r24, 0x06	; 6
    1a52:	8d bf       	out	0x3d, r24	; 61
    1a54:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1a56:	01 30       	cpi	r16, 0x01	; 1
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <set_vel_func+0x94>
    1a5a:	02 30       	cpi	r16, 0x02	; 2
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <set_vel_func+0x92>
    1a5e:	cc c0       	rjmp	.+408    	; 0x1bf8 <set_vel_func+0x22a>
    1a60:	65 c0       	rjmp	.+202    	; 0x1b2c <set_vel_func+0x15e>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    1a62:	8f e7       	ldi	r24, 0x7F	; 127
    1a64:	95 e2       	ldi	r25, 0x25	; 37
    1a66:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1a6a:	8f e7       	ldi	r24, 0x7F	; 127
    1a6c:	95 e2       	ldi	r25, 0x25	; 37
    1a6e:	be 01       	movw	r22, r28
    1a70:	6d 5f       	subi	r22, 0xFD	; 253
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
            
            if (res == FR_OK) {
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <set_vel_func+0xb2>
    1a7e:	48 c0       	rjmp	.+144    	; 0x1b10 <set_vel_func+0x142>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    1a80:	8f e7       	ldi	r24, 0x7F	; 127
    1a82:	95 e2       	ldi	r25, 0x25	; 37
    1a84:	be 01       	movw	r22, r28
    1a86:	61 5f       	subi	r22, 0xF1	; 241
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	52 e0       	ldi	r21, 0x02	; 2
    1a8e:	9e 01       	movw	r18, r28
    1a90:	2f 5f       	subi	r18, 0xFF	; 255
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1a98:	88 23       	and	r24, r24
    1a9a:	99 f5       	brne	.+102    	; 0x1b02 <set_vel_func+0x134>
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	80 50       	subi	r24, 0x00	; 0
    1aa2:	92 40       	sbci	r25, 0x02	; 2
    1aa4:	71 f5       	brne	.+92     	; 0x1b02 <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    1aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa8:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    1aac:	88 89       	ldd	r24, Y+16	; 0x10
    1aae:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    1ab2:	89 89       	ldd	r24, Y+17	; 0x11
    1ab4:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1ab8:	8a 89       	ldd	r24, Y+18	; 0x12
    1aba:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1abe:	10 93 fd 24 	sts	0x24FD, r17
    1ac2:	10 92 fe 24 	sts	0x24FE, r1
                    
                    Stop = 1;
    1ac6:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1aca:	10 92 ea 24 	sts	0x24EA, r1
                    if (quiet_mode_on == 0)
    1ace:	80 91 b1 20 	lds	r24, 0x20B1
    1ad2:	88 23       	and	r24, r24
    1ad4:	29 f5       	brne	.+74     	; 0x1b20 <set_vel_func+0x152>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <set_vel_func+0x10a>
    1ad8:	0f 92       	push	r0
    1ada:	ed b7       	in	r30, 0x3d	; 61
    1adc:	fe b7       	in	r31, 0x3e	; 62
    1ade:	31 96       	adiw	r30, 0x01	; 1
    1ae0:	83 e3       	ldi	r24, 0x33	; 51
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	ad b7       	in	r26, 0x3d	; 61
    1ae6:	be b7       	in	r27, 0x3e	; 62
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8d 93       	st	X+, r24
    1aec:	9c 93       	st	X, r25
    1aee:	12 97       	sbiw	r26, 0x02	; 2
    1af0:	12 83       	std	Z+2, r17	; 0x02
    1af2:	13 82       	std	Z+3, r1	; 0x03
    1af4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <set_vel_func+0x152>
                    
                } else {
                    if (quiet_mode_on == 0)
    1b02:	80 91 b1 20 	lds	r24, 0x20B1
    1b06:	88 23       	and	r24, r24
    1b08:	59 f4       	brne	.+22     	; 0x1b20 <set_vel_func+0x152>
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1b0a:	82 e1       	ldi	r24, 0x12	; 18
    1b0c:	94 e0       	ldi	r25, 0x04	; 4
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <set_vel_func+0x14e>
                }
            } else {
                if (quiet_mode_on == 0)
    1b10:	80 91 b1 20 	lds	r24, 0x20B1
    1b14:	88 23       	and	r24, r24
    1b16:	21 f4       	brne	.+8      	; 0x1b20 <set_vel_func+0x152>
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1b18:	81 ef       	ldi	r24, 0xF1	; 241
    1b1a:	93 e0       	ldi	r25, 0x03	; 3
    1b1c:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            }
			
			default_func_x = 0;
    1b20:	10 92 a1 20 	sts	0x20A1, r1
			
			//update the function buffer
			fetch_update_funcX(1);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fetch_update_funcX>
    1b2a:	6e c0       	rjmp	.+220    	; 0x1c08 <set_vel_func+0x23a>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    1b2c:	8e e0       	ldi	r24, 0x0E	; 14
    1b2e:	97 e2       	ldi	r25, 0x27	; 39
    1b30:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1b34:	8e e0       	ldi	r24, 0x0E	; 14
    1b36:	97 e2       	ldi	r25, 0x27	; 39
    1b38:	be 01       	movw	r22, r28
    1b3a:	6d 5f       	subi	r22, 0xFD	; 253
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
            
            if (res == FR_OK) {
    1b44:	88 23       	and	r24, r24
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <set_vel_func+0x17c>
    1b48:	49 c0       	rjmp	.+146    	; 0x1bdc <set_vel_func+0x20e>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    1b4a:	8e e0       	ldi	r24, 0x0E	; 14
    1b4c:	97 e2       	ldi	r25, 0x27	; 39
    1b4e:	be 01       	movw	r22, r28
    1b50:	61 5f       	subi	r22, 0xF1	; 241
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	52 e0       	ldi	r21, 0x02	; 2
    1b58:	9e 01       	movw	r18, r28
    1b5a:	2f 5f       	subi	r18, 0xFF	; 255
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1b62:	88 23       	and	r24, r24
    1b64:	a1 f5       	brne	.+104    	; 0x1bce <set_vel_func+0x200>
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	80 50       	subi	r24, 0x00	; 0
    1b6c:	92 40       	sbci	r25, 0x02	; 2
    1b6e:	79 f5       	brne	.+94     	; 0x1bce <set_vel_func+0x200>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    1b76:	88 89       	ldd	r24, Y+16	; 0x10
    1b78:	80 93 ae 20 	sts	0x20AE, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    1b82:	8a 89       	ldd	r24, Y+18	; 0x12
    1b84:	80 93 b0 20 	sts	0x20B0, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1b88:	10 93 ff 24 	sts	0x24FF, r17
    1b8c:	10 92 00 25 	sts	0x2500, r1
                    
                    Stop = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1b96:	10 92 ea 24 	sts	0x24EA, r1
                    if (quiet_mode_on == 0)
    1b9a:	80 91 b1 20 	lds	r24, 0x20B1
    1b9e:	88 23       	and	r24, r24
    1ba0:	29 f5       	brne	.+74     	; 0x1bec <set_vel_func+0x21e>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <set_vel_func+0x1d6>
    1ba4:	0f 92       	push	r0
    1ba6:	ed b7       	in	r30, 0x3d	; 61
    1ba8:	fe b7       	in	r31, 0x3e	; 62
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	8d ec       	ldi	r24, 0xCD	; 205
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	ad b7       	in	r26, 0x3d	; 61
    1bb2:	be b7       	in	r27, 0x3e	; 62
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	8d 93       	st	X+, r24
    1bb8:	9c 93       	st	X, r25
    1bba:	12 97       	sbiw	r26, 0x02	; 2
    1bbc:	12 83       	std	Z+2, r17	; 0x02
    1bbe:	13 82       	std	Z+3, r1	; 0x03
    1bc0:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <set_vel_func+0x21e>
                    
                } else {
                    if (quiet_mode_on == 0)
    1bce:	80 91 b1 20 	lds	r24, 0x20B1
    1bd2:	88 23       	and	r24, r24
    1bd4:	59 f4       	brne	.+22     	; 0x1bec <set_vel_func+0x21e>
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    1bd6:	8c ea       	ldi	r24, 0xAC	; 172
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <set_vel_func+0x21a>
                }
            } else {
                if (quiet_mode_on == 0)
    1bdc:	80 91 b1 20 	lds	r24, 0x20B1
    1be0:	88 23       	and	r24, r24
    1be2:	21 f4       	brne	.+8      	; 0x1bec <set_vel_func+0x21e>
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    1be4:	8b e8       	ldi	r24, 0x8B	; 139
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            }
			
			default_func_y = 0;
    1bec:	10 92 a2 20 	sts	0x20A2, r1
			
			//update function buffer
            fetch_update_funcY(1);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 95 0a 	call	0x152a	; 0x152a <fetch_update_funcY>
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <set_vel_func+0x23a>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    1bf8:	80 91 b1 20 	lds	r24, 0x20B1
    1bfc:	88 23       	and	r24, r24
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <set_vel_func+0x23a>
                xputs(PSTR("Error input for function channel.\n"));
    1c00:	88 e6       	ldi	r24, 0x68	; 104
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            break;
    }
}
    1c08:	c2 5f       	subi	r28, 0xF2	; 242
    1c0a:	dd 4f       	sbci	r29, 0xFD	; 253
    1c0c:	e4 e0       	ldi	r30, 0x04	; 4
    1c0e:	0c 94 48 59 	jmp	0xb290	; 0xb290 <__epilogue_restores__+0x1c>

00001c12 <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    1c12:	ae e0       	ldi	r26, 0x0E	; 14
    1c14:	b2 e0       	ldi	r27, 0x02	; 2
    1c16:	ef e0       	ldi	r30, 0x0F	; 15
    1c18:	fe e0       	ldi	r31, 0x0E	; 14
    1c1a:	0c 94 2c 59 	jmp	0xb258	; 0xb258 <__prologue_saves__+0x1c>
    1c1e:	08 2f       	mov	r16, r24
    1c20:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    1c22:	6a 30       	cpi	r22, 0x0A	; 10
    1c24:	80 f4       	brcc	.+32     	; 0x1c46 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <set_pos_func+0x16>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <set_pos_func+0x18>
    1c2a:	ed b7       	in	r30, 0x3d	; 61
    1c2c:	fe b7       	in	r31, 0x3e	; 62
    1c2e:	31 96       	adiw	r30, 0x01	; 1
    1c30:	ce 01       	movw	r24, r28
    1c32:	03 96       	adiw	r24, 0x03	; 3
    1c34:	ad b7       	in	r26, 0x3d	; 61
    1c36:	be b7       	in	r27, 0x3e	; 62
    1c38:	11 96       	adiw	r26, 0x01	; 1
    1c3a:	8d 93       	st	X+, r24
    1c3c:	9c 93       	st	X, r25
    1c3e:	12 97       	sbiw	r26, 0x02	; 2
    1c40:	87 e2       	ldi	r24, 0x27	; 39
    1c42:	90 e2       	ldi	r25, 0x20	; 32
    1c44:	1f c0       	rjmp	.+62     	; 0x1c84 <set_pos_func+0x72>
    1c46:	ce 01       	movw	r24, r28
    1c48:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1c4a:	64 36       	cpi	r22, 0x64	; 100
    1c4c:	70 f4       	brcc	.+28     	; 0x1c6a <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <set_pos_func+0x3e>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <set_pos_func+0x40>
    1c52:	ed b7       	in	r30, 0x3d	; 61
    1c54:	fe b7       	in	r31, 0x3e	; 62
    1c56:	31 96       	adiw	r30, 0x01	; 1
    1c58:	ad b7       	in	r26, 0x3d	; 61
    1c5a:	be b7       	in	r27, 0x3e	; 62
    1c5c:	11 96       	adiw	r26, 0x01	; 1
    1c5e:	8d 93       	st	X+, r24
    1c60:	9c 93       	st	X, r25
    1c62:	12 97       	sbiw	r26, 0x02	; 2
    1c64:	85 e3       	ldi	r24, 0x35	; 53
    1c66:	90 e2       	ldi	r25, 0x20	; 32
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <set_pos_func+0x5a>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <set_pos_func+0x5c>
    1c6e:	ed b7       	in	r30, 0x3d	; 61
    1c70:	fe b7       	in	r31, 0x3e	; 62
    1c72:	31 96       	adiw	r30, 0x01	; 1
    1c74:	ad b7       	in	r26, 0x3d	; 61
    1c76:	be b7       	in	r27, 0x3e	; 62
    1c78:	11 96       	adiw	r26, 0x01	; 1
    1c7a:	8d 93       	st	X+, r24
    1c7c:	9c 93       	st	X, r25
    1c7e:	12 97       	sbiw	r26, 0x02	; 2
    1c80:	82 e4       	ldi	r24, 0x42	; 66
    1c82:	90 e2       	ldi	r25, 0x20	; 32
    1c84:	82 83       	std	Z+2, r24	; 0x02
    1c86:	93 83       	std	Z+3, r25	; 0x03
    1c88:	14 83       	std	Z+4, r17	; 0x04
    1c8a:	15 82       	std	Z+5, r1	; 0x05
    1c8c:	0e 94 e9 5b 	call	0xb7d2	; 0xb7d2 <sprintf>
    1c90:	8d b7       	in	r24, 0x3d	; 61
    1c92:	9e b7       	in	r25, 0x3e	; 62
    1c94:	06 96       	adiw	r24, 0x06	; 6
    1c96:	8d bf       	out	0x3d, r24	; 61
    1c98:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1c9a:	01 30       	cpi	r16, 0x01	; 1
    1c9c:	21 f0       	breq	.+8      	; 0x1ca6 <set_pos_func+0x94>
    1c9e:	02 30       	cpi	r16, 0x02	; 2
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <set_pos_func+0x92>
    1ca2:	cc c0       	rjmp	.+408    	; 0x1e3c <set_pos_func+0x22a>
    1ca4:	65 c0       	rjmp	.+202    	; 0x1d70 <set_pos_func+0x15e>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    1ca6:	8f e7       	ldi	r24, 0x7F	; 127
    1ca8:	95 e2       	ldi	r25, 0x25	; 37
    1caa:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1cae:	8f e7       	ldi	r24, 0x7F	; 127
    1cb0:	95 e2       	ldi	r25, 0x25	; 37
    1cb2:	be 01       	movw	r22, r28
    1cb4:	6d 5f       	subi	r22, 0xFD	; 253
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
            if (res == FR_OK) {
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <set_pos_func+0xb2>
    1cc2:	48 c0       	rjmp	.+144    	; 0x1d54 <set_pos_func+0x142>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    1cc4:	8f e7       	ldi	r24, 0x7F	; 127
    1cc6:	95 e2       	ldi	r25, 0x25	; 37
    1cc8:	be 01       	movw	r22, r28
    1cca:	61 5f       	subi	r22, 0xF1	; 241
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	52 e0       	ldi	r21, 0x02	; 2
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2f 5f       	subi	r18, 0xFF	; 255
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1cdc:	88 23       	and	r24, r24
    1cde:	99 f5       	brne	.+102    	; 0x1d46 <set_pos_func+0x134>
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	80 50       	subi	r24, 0x00	; 0
    1ce6:	92 40       	sbci	r25, 0x02	; 2
    1ce8:	71 f5       	brne	.+92     	; 0x1d46 <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    1cea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cec:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    1cf0:	88 89       	ldd	r24, Y+16	; 0x10
    1cf2:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    1cf6:	89 89       	ldd	r24, Y+17	; 0x11
    1cf8:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    1cfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cfe:	80 93 ac 20 	sts	0x20AC, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    1d02:	10 93 fd 24 	sts	0x24FD, r17
    1d06:	10 92 fe 24 	sts	0x24FE, r1
                    
                    Stop = 1;
    1d0a:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1d0e:	10 92 ea 24 	sts	0x24EA, r1
                    if (quiet_mode_on == 0)
    1d12:	80 91 b1 20 	lds	r24, 0x20B1
    1d16:	88 23       	and	r24, r24
    1d18:	29 f5       	brne	.+74     	; 0x1d64 <set_pos_func+0x152>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <set_pos_func+0x10a>
    1d1c:	0f 92       	push	r0
    1d1e:	ed b7       	in	r30, 0x3d	; 61
    1d20:	fe b7       	in	r31, 0x3e	; 62
    1d22:	31 96       	adiw	r30, 0x01	; 1
    1d24:	8c e1       	ldi	r24, 0x1C	; 28
    1d26:	95 e0       	ldi	r25, 0x05	; 5
    1d28:	ad b7       	in	r26, 0x3d	; 61
    1d2a:	be b7       	in	r27, 0x3e	; 62
    1d2c:	11 96       	adiw	r26, 0x01	; 1
    1d2e:	8d 93       	st	X+, r24
    1d30:	9c 93       	st	X, r25
    1d32:	12 97       	sbiw	r26, 0x02	; 2
    1d34:	12 83       	std	Z+2, r17	; 0x02
    1d36:	13 82       	std	Z+3, r1	; 0x03
    1d38:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <set_pos_func+0x152>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    1d46:	80 91 b1 20 	lds	r24, 0x20B1
    1d4a:	88 23       	and	r24, r24
    1d4c:	59 f4       	brne	.+22     	; 0x1d64 <set_pos_func+0x152>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	94 e0       	ldi	r25, 0x04	; 4
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <set_pos_func+0x14e>
                }
            } else {
                if (quiet_mode_on == 0)
    1d54:	80 91 b1 20 	lds	r24, 0x20B1
    1d58:	88 23       	and	r24, r24
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <set_pos_func+0x152>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    1d5c:	8e ed       	ldi	r24, 0xDE	; 222
    1d5e:	94 e0       	ldi	r25, 0x04	; 4
    1d60:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            }
			
			default_func_x = 0;
    1d64:	10 92 a1 20 	sts	0x20A1, r1
			
			//update the function buffer
			fetch_update_funcX(1);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fetch_update_funcX>
    1d6e:	6e c0       	rjmp	.+220    	; 0x1e4c <set_pos_func+0x23a>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    1d70:	8e e0       	ldi	r24, 0x0E	; 14
    1d72:	97 e2       	ldi	r25, 0x27	; 39
    1d74:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1d78:	8e e0       	ldi	r24, 0x0E	; 14
    1d7a:	97 e2       	ldi	r25, 0x27	; 39
    1d7c:	be 01       	movw	r22, r28
    1d7e:	6d 5f       	subi	r22, 0xFD	; 253
    1d80:	7f 4f       	sbci	r23, 0xFF	; 255
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
            if (res == FR_OK) {
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <set_pos_func+0x17c>
    1d8c:	49 c0       	rjmp	.+146    	; 0x1e20 <set_pos_func+0x20e>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    1d8e:	8e e0       	ldi	r24, 0x0E	; 14
    1d90:	97 e2       	ldi	r25, 0x27	; 39
    1d92:	be 01       	movw	r22, r28
    1d94:	61 5f       	subi	r22, 0xF1	; 241
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	52 e0       	ldi	r21, 0x02	; 2
    1d9c:	9e 01       	movw	r18, r28
    1d9e:	2f 5f       	subi	r18, 0xFF	; 255
    1da0:	3f 4f       	sbci	r19, 0xFF	; 255
    1da2:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    1da6:	88 23       	and	r24, r24
    1da8:	a1 f5       	brne	.+104    	; 0x1e12 <set_pos_func+0x200>
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	80 50       	subi	r24, 0x00	; 0
    1db0:	92 40       	sbci	r25, 0x02	; 2
    1db2:	79 f5       	brne	.+94     	; 0x1e12 <set_pos_func+0x200>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    1db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db6:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    1dba:	88 89       	ldd	r24, Y+16	; 0x10
    1dbc:	80 93 ae 20 	sts	0x20AE, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    1dc0:	89 89       	ldd	r24, Y+17	; 0x11
    1dc2:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    1dc6:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc8:	80 93 b0 20 	sts	0x20B0, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1dcc:	10 93 ff 24 	sts	0x24FF, r17
    1dd0:	10 92 00 25 	sts	0x2500, r1
                    
                    Stop = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1dda:	10 92 ea 24 	sts	0x24EA, r1
                    if (quiet_mode_on == 0)
    1dde:	80 91 b1 20 	lds	r24, 0x20B1
    1de2:	88 23       	and	r24, r24
    1de4:	29 f5       	brne	.+74     	; 0x1e30 <set_pos_func+0x21e>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <set_pos_func+0x1d6>
    1de8:	0f 92       	push	r0
    1dea:	ed b7       	in	r30, 0x3d	; 61
    1dec:	fe b7       	in	r31, 0x3e	; 62
    1dee:	31 96       	adiw	r30, 0x01	; 1
    1df0:	8a eb       	ldi	r24, 0xBA	; 186
    1df2:	94 e0       	ldi	r25, 0x04	; 4
    1df4:	ad b7       	in	r26, 0x3d	; 61
    1df6:	be b7       	in	r27, 0x3e	; 62
    1df8:	11 96       	adiw	r26, 0x01	; 1
    1dfa:	8d 93       	st	X+, r24
    1dfc:	9c 93       	st	X, r25
    1dfe:	12 97       	sbiw	r26, 0x02	; 2
    1e00:	12 83       	std	Z+2, r17	; 0x02
    1e02:	13 82       	std	Z+3, r1	; 0x03
    1e04:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <set_pos_func+0x21e>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    1e12:	80 91 b1 20 	lds	r24, 0x20B1
    1e16:	88 23       	and	r24, r24
    1e18:	59 f4       	brne	.+22     	; 0x1e30 <set_pos_func+0x21e>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    1e1a:	8c e9       	ldi	r24, 0x9C	; 156
    1e1c:	94 e0       	ldi	r25, 0x04	; 4
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <set_pos_func+0x21a>
                }
            } else {
                if (quiet_mode_on == 0)
    1e20:	80 91 b1 20 	lds	r24, 0x20B1
    1e24:	88 23       	and	r24, r24
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <set_pos_func+0x21e>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    1e28:	8b e7       	ldi	r24, 0x7B	; 123
    1e2a:	94 e0       	ldi	r25, 0x04	; 4
    1e2c:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            }
			
			default_func_y = 0;
    1e30:	10 92 a2 20 	sts	0x20A2, r1
			
			//update the function buffer
			fetch_update_funcY(1);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	0e 94 95 0a 	call	0x152a	; 0x152a <fetch_update_funcY>
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <set_pos_func+0x23a>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    1e3c:	80 91 b1 20 	lds	r24, 0x20B1
    1e40:	88 23       	and	r24, r24
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <set_pos_func+0x23a>
                xputs(PSTR("Error input for function channel.\n"));
    1e44:	88 e5       	ldi	r24, 0x58	; 88
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            break;
    }
}
    1e4c:	c2 5f       	subi	r28, 0xF2	; 242
    1e4e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e50:	e4 e0       	ldi	r30, 0x04	; 4
    1e52:	0c 94 48 59 	jmp	0xb290	; 0xb290 <__epilogue_restores__+0x1c>

00001e56 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	16 2f       	mov	r17, r22
    1e5e:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    1e60:	88 23       	and	r24, r24
    1e62:	49 f5       	brne	.+82     	; 0x1eb6 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    1e64:	80 91 8b 26 	lds	r24, 0x268B
    1e68:	88 23       	and	r24, r24
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    1e6c:	8e e7       	ldi	r24, 0x7E	; 126
    1e6e:	96 e2       	ldi	r25, 0x26	; 38
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	ae 01       	movw	r20, r28
    1e74:	21 2f       	mov	r18, r17
    1e76:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    1e7a:	80 91 a5 29 	lds	r24, 0x29A5
    1e7e:	88 23       	and	r24, r24
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    1e82:	88 e9       	ldi	r24, 0x98	; 152
    1e84:	99 e2       	ldi	r25, 0x29	; 41
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	ae 01       	movw	r20, r28
    1e8a:	21 2f       	mov	r18, r17
    1e8c:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    1e90:	80 91 3b 27 	lds	r24, 0x273B
    1e94:	88 23       	and	r24, r24
    1e96:	e1 f7       	brne	.-8      	; 0x1e90 <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    1e98:	8e e2       	ldi	r24, 0x2E	; 46
    1e9a:	97 e2       	ldi	r25, 0x27	; 39
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	ae 01       	movw	r20, r28
    1ea0:	21 2f       	mov	r18, r17
    1ea2:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    1ea6:	80 91 ad 25 	lds	r24, 0x25AD
    1eaa:	88 23       	and	r24, r24
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    1eae:	80 ea       	ldi	r24, 0xA0	; 160
    1eb0:	95 e2       	ldi	r25, 0x25	; 37
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	22 c0       	rjmp	.+68     	; 0x1efa <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    1eb6:	e8 2f       	mov	r30, r24
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	df 01       	movw	r26, r30
    1ebc:	a2 5c       	subi	r26, 0xC2	; 194
    1ebe:	b8 4d       	sbci	r27, 0xD8	; 216
    1ec0:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    1ec2:	eb 50       	subi	r30, 0x0B	; 11
    1ec4:	f7 4d       	sbci	r31, 0xD7	; 215
    1ec6:	60 81       	ld	r22, Z
        if (ch != 0){
    1ec8:	aa 23       	and	r26, r26
    1eca:	d9 f0       	breq	.+54     	; 0x1f02 <i2cMasterSend+0xac>
            
            switch (ch) {
    1ecc:	a3 30       	cpi	r26, 0x03	; 3
    1ece:	51 f0       	breq	.+20     	; 0x1ee4 <i2cMasterSend+0x8e>
    1ed0:	a4 30       	cpi	r26, 0x04	; 4
    1ed2:	59 f0       	breq	.+22     	; 0x1eea <i2cMasterSend+0x94>
    1ed4:	a2 30       	cpi	r26, 0x02	; 2
    1ed6:	19 f4       	brne	.+6      	; 0x1ede <i2cMasterSend+0x88>
    1ed8:	a8 e9       	ldi	r26, 0x98	; 152
    1eda:	b9 e2       	ldi	r27, 0x29	; 41
    1edc:	08 c0       	rjmp	.+16     	; 0x1eee <i2cMasterSend+0x98>
    1ede:	ae e7       	ldi	r26, 0x7E	; 126
    1ee0:	b6 e2       	ldi	r27, 0x26	; 38
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <i2cMasterSend+0x98>
    1ee4:	ae e2       	ldi	r26, 0x2E	; 46
    1ee6:	b7 e2       	ldi	r27, 0x27	; 39
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    1eea:	a0 ea       	ldi	r26, 0xA0	; 160
    1eec:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    1eee:	1d 96       	adiw	r26, 0x0d	; 13
    1ef0:	8c 91       	ld	r24, X
    1ef2:	1d 97       	sbiw	r26, 0x0d	; 13
    1ef4:	88 23       	and	r24, r24
    1ef6:	d9 f7       	brne	.-10     	; 0x1eee <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    1ef8:	cd 01       	movw	r24, r26
    1efa:	ae 01       	movw	r20, r28
    1efc:	21 2f       	mov	r18, r17
    1efe:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
        }
    }
}
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	08 95       	ret

00001f0a <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    1f0a:	fc 01       	movw	r30, r24
    int16_t setVal;
	//'set_ao'
    switch(msg_buffer[0]) {
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 31       	cpi	r24, 0x10	; 16
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <handle_message_length_4+0xe>
    1f12:	81 31       	cpi	r24, 0x11	; 17
    1f14:	a9 f4       	brne	.+42     	; 0x1f40 <handle_message_length_4+0x36>
    1f16:	07 c0       	rjmp	.+14     	; 0x1f26 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    1f18:	81 81       	ldd	r24, Z+1	; 0x01
    1f1a:	73 81       	ldd	r23, Z+3	; 0x03
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	92 81       	ldd	r25, Z+2	; 0x02
    1f20:	69 0f       	add	r22, r25
    1f22:	71 1d       	adc	r23, r1
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <handle_message_length_4+0x2e>
            break;
		case 0x11:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4 
			setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    1f26:	73 81       	ldd	r23, Z+3	; 0x03
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	68 0f       	add	r22, r24
    1f2e:	71 1d       	adc	r23, r1
			setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    1f30:	81 81       	ldd	r24, Z+1	; 0x01
    1f32:	70 95       	com	r23
    1f34:	61 95       	neg	r22
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    1f3e:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	68 e0       	ldi	r22, 0x08	; 8
    1f44:	4e ed       	ldi	r20, 0xDE	; 222
    1f46:	50 e2       	ldi	r21, 0x20	; 32
    1f48:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    1f4c:	08 95       	ret

00001f4e <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    1f4e:	a2 e0       	ldi	r26, 0x02	; 2
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ed ea       	ldi	r30, 0xAD	; 173
    1f54:	ff e0       	ldi	r31, 0x0F	; 15
    1f56:	0c 94 2b 59 	jmp	0xb256	; 0xb256 <__prologue_saves__+0x1a>
    1f5a:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 32       	cpi	r24, 0x20	; 32
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <handle_message_length_3+0x18>
    1f64:	a5 c0       	rjmp	.+330    	; 0x20b0 <handle_message_length_3+0x162>
    1f66:	81 32       	cpi	r24, 0x21	; 33
    1f68:	38 f4       	brcc	.+14     	; 0x1f78 <handle_message_length_3+0x2a>
    1f6a:	80 31       	cpi	r24, 0x10	; 16
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <handle_message_length_3+0x22>
    1f6e:	8f c0       	rjmp	.+286    	; 0x208e <handle_message_length_3+0x140>
    1f70:	85 31       	cpi	r24, 0x15	; 21
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <handle_message_length_3+0x28>
    1f74:	f0 c0       	rjmp	.+480    	; 0x2156 <handle_message_length_3+0x208>
    1f76:	93 c0       	rjmp	.+294    	; 0x209e <handle_message_length_3+0x150>
    1f78:	80 33       	cpi	r24, 0x30	; 48
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <handle_message_length_3+0x30>
    1f7c:	c3 c0       	rjmp	.+390    	; 0x2104 <handle_message_length_3+0x1b6>
    1f7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <handle_message_length_3+0x3c>
    1f82:	85 32       	cpi	r24, 0x25	; 37
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <handle_message_length_3+0x3a>
    1f86:	e7 c0       	rjmp	.+462    	; 0x2156 <handle_message_length_3+0x208>
    1f88:	a0 c0       	rjmp	.+320    	; 0x20ca <handle_message_length_3+0x17c>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    1f8e:	80 91 8b 26 	lds	r24, 0x268B
    1f92:	88 23       	and	r24, r24
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <handle_message_length_3+0x40>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    1f96:	8e e7       	ldi	r24, 0x7E	; 126
    1f98:	96 e2       	ldi	r25, 0x26	; 38
    1f9a:	6f 2d       	mov	r22, r15
    1f9c:	4e ef       	ldi	r20, 0xFE	; 254
    1f9e:	50 e2       	ldi	r21, 0x20	; 32
    1fa0:	22 e0       	ldi	r18, 0x02	; 2
    1fa2:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    1fa6:	80 91 a5 29 	lds	r24, 0x29A5
    1faa:	88 23       	and	r24, r24
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <handle_message_length_3+0x58>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    1fae:	88 e9       	ldi	r24, 0x98	; 152
    1fb0:	99 e2       	ldi	r25, 0x29	; 41
    1fb2:	6f 2d       	mov	r22, r15
    1fb4:	4e ef       	ldi	r20, 0xFE	; 254
    1fb6:	50 e2       	ldi	r21, 0x20	; 32
    1fb8:	22 e0       	ldi	r18, 0x02	; 2
    1fba:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    1fbe:	80 91 3b 27 	lds	r24, 0x273B
    1fc2:	88 23       	and	r24, r24
    1fc4:	e1 f7       	brne	.-8      	; 0x1fbe <handle_message_length_3+0x70>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    1fc6:	8e e2       	ldi	r24, 0x2E	; 46
    1fc8:	97 e2       	ldi	r25, 0x27	; 39
    1fca:	6f 2d       	mov	r22, r15
    1fcc:	4e ef       	ldi	r20, 0xFE	; 254
    1fce:	50 e2       	ldi	r21, 0x20	; 32
    1fd0:	22 e0       	ldi	r18, 0x02	; 2
    1fd2:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    1fd6:	80 91 ad 25 	lds	r24, 0x25AD
    1fda:	88 23       	and	r24, r24
    1fdc:	e1 f7       	brne	.-8      	; 0x1fd6 <handle_message_length_3+0x88>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    1fde:	80 ea       	ldi	r24, 0xA0	; 160
    1fe0:	95 e2       	ldi	r25, 0x25	; 37
    1fe2:	6f 2d       	mov	r22, r15
    1fe4:	4e ef       	ldi	r20, 0xFE	; 254
    1fe6:	50 e2       	ldi	r21, 0x20	; 32
    1fe8:	22 e0       	ldi	r18, 0x02	; 2
    1fea:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
    1fee:	80 ef       	ldi	r24, 0xF0	; 240
    1ff0:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff2:	20 e2       	ldi	r18, 0x20	; 32
    1ff4:	33 e0       	ldi	r19, 0x03	; 3
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	31 97       	sbiw	r30, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <handle_message_length_3+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	d9 f7       	brne	.-10     	; 0x1ff6 <handle_message_length_3+0xa8>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	f8 01       	movw	r30, r16
    2006:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2008:	80 91 8b 26 	lds	r24, 0x268B
    200c:	88 23       	and	r24, r24
    200e:	e1 f7       	brne	.-8      	; 0x2008 <handle_message_length_3+0xba>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2010:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    2012:	8e e7       	ldi	r24, 0x7E	; 126
    2014:	96 e2       	ldi	r25, 0x26	; 38
    2016:	6f 2d       	mov	r22, r15
    2018:	ae 01       	movw	r20, r28
    201a:	4f 5f       	subi	r20, 0xFF	; 255
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	22 e0       	ldi	r18, 0x02	; 2
    2020:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    2024:	80 91 a5 29 	lds	r24, 0x29A5
    2028:	88 23       	and	r24, r24
    202a:	e1 f7       	brne	.-8      	; 0x2024 <handle_message_length_3+0xd6>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    202c:	88 e9       	ldi	r24, 0x98	; 152
    202e:	99 e2       	ldi	r25, 0x29	; 41
    2030:	6f 2d       	mov	r22, r15
    2032:	ae 01       	movw	r20, r28
    2034:	4f 5f       	subi	r20, 0xFF	; 255
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	22 e0       	ldi	r18, 0x02	; 2
    203a:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    203e:	80 91 3b 27 	lds	r24, 0x273B
    2042:	88 23       	and	r24, r24
    2044:	e1 f7       	brne	.-8      	; 0x203e <handle_message_length_3+0xf0>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    2046:	8e e2       	ldi	r24, 0x2E	; 46
    2048:	97 e2       	ldi	r25, 0x27	; 39
    204a:	6f 2d       	mov	r22, r15
    204c:	ae 01       	movw	r20, r28
    204e:	4f 5f       	subi	r20, 0xFF	; 255
    2050:	5f 4f       	sbci	r21, 0xFF	; 255
    2052:	22 e0       	ldi	r18, 0x02	; 2
    2054:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    2058:	80 91 ad 25 	lds	r24, 0x25AD
    205c:	88 23       	and	r24, r24
    205e:	e1 f7       	brne	.-8      	; 0x2058 <handle_message_length_3+0x10a>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    2060:	80 ea       	ldi	r24, 0xA0	; 160
    2062:	95 e2       	ldi	r25, 0x25	; 37
    2064:	6f 2d       	mov	r22, r15
    2066:	ae 01       	movw	r20, r28
    2068:	4f 5f       	subi	r20, 0xFF	; 255
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	22 e0       	ldi	r18, 0x02	; 2
    206e:	0e 94 22 31 	call	0x6244	; 0x6244 <TWI_MasterWrite>
    2072:	84 ef       	ldi	r24, 0xF4	; 244
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	20 e2       	ldi	r18, 0x20	; 32
    2078:	33 e0       	ldi	r19, 0x03	; 3
    207a:	f9 01       	movw	r30, r18
    207c:	31 97       	sbiw	r30, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <handle_message_length_3+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	d9 f7       	brne	.-10     	; 0x207a <handle_message_length_3+0x12c>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	4e ef       	ldi	r20, 0xFE	; 254
    208a:	50 e2       	ldi	r21, 0x20	; 32
    208c:	68 c0       	rjmp	.+208    	; 0x215e <handle_message_length_3+0x210>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    208e:	f8 01       	movw	r30, r16
    2090:	81 81       	ldd	r24, Z+1	; 0x01
    2092:	80 93 bf 27 	sts	0x27BF, r24
            y_mode = msg_buffer[2];
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	80 93 09 28 	sts	0x2809, r24
    209c:	62 c0       	rjmp	.+196    	; 0x2162 <handle_message_length_3+0x214>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    209e:	f8 01       	movw	r30, r16
    20a0:	62 81       	ldd	r22, Z+2	; 0x02
    20a2:	66 23       	and	r22, r22
    20a4:	49 f0       	breq	.+18     	; 0x20b8 <handle_message_length_3+0x16a>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    20a6:	f8 01       	movw	r30, r16
    20a8:	81 81       	ldd	r24, Z+1	; 0x01
    20aa:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <set_pos_func>
    20ae:	59 c0       	rjmp	.+178    	; 0x2162 <handle_message_length_3+0x214>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    20b0:	f8 01       	movw	r30, r16
    20b2:	62 81       	ldd	r22, Z+2	; 0x02
    20b4:	66 23       	and	r22, r22
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <handle_message_length_3+0x172>
                set_default_func(msg_buffer[1]);}
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	0e 94 3a 09 	call	0x1274	; 0x1274 <set_default_func>
    20be:	51 c0       	rjmp	.+162    	; 0x2162 <handle_message_length_3+0x214>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    20c0:	f8 01       	movw	r30, r16
    20c2:	81 81       	ldd	r24, Z+1	; 0x01
    20c4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <set_vel_func>
    20c8:	4c c0       	rjmp	.+152    	; 0x2162 <handle_message_length_3+0x214>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    20ca:	f8 01       	movw	r30, r16
    20cc:	92 81       	ldd	r25, Z+2	; 0x02
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	21 81       	ldd	r18, Z+1	; 0x01
    20d2:	8c 01       	movw	r16, r24
    20d4:	02 0f       	add	r16, r18
    20d6:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    20d8:	98 01       	movw	r18, r16
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	62 e1       	ldi	r22, 0x12	; 18
    20e0:	7a e7       	ldi	r23, 0x7A	; 122
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    20ea:	20 93 a3 20 	sts	0x20A3, r18
    20ee:	30 93 a4 20 	sts	0x20A4, r19
            if (quiet_mode_on == 0)
    20f2:	80 91 b1 20 	lds	r24, 0x20B1
    20f6:	88 23       	and	r24, r24
    20f8:	a1 f5       	brne	.+104    	; 0x2162 <handle_message_length_3+0x214>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <handle_message_length_3+0x1ae>
    20fc:	0f 92       	push	r0
    20fe:	8e e2       	ldi	r24, 0x2E	; 46
    2100:	98 e0       	ldi	r25, 0x08	; 8
    2102:	1c c0       	rjmp	.+56     	; 0x213c <handle_message_length_3+0x1ee>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2104:	f8 01       	movw	r30, r16
    2106:	92 81       	ldd	r25, Z+2	; 0x02
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	21 81       	ldd	r18, Z+1	; 0x01
    210c:	8c 01       	movw	r16, r24
    210e:	02 0f       	add	r16, r18
    2110:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    2112:	98 01       	movw	r18, r16
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	62 e1       	ldi	r22, 0x12	; 18
    211a:	7a e7       	ldi	r23, 0x7A	; 122
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    2124:	20 93 a5 20 	sts	0x20A5, r18
    2128:	30 93 a6 20 	sts	0x20A6, r19
            if (quiet_mode_on == 0)
    212c:	80 91 b1 20 	lds	r24, 0x20B1
    2130:	88 23       	and	r24, r24
    2132:	b9 f4       	brne	.+46     	; 0x2162 <handle_message_length_3+0x214>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    2134:	00 d0       	rcall	.+0      	; 0x2136 <handle_message_length_3+0x1e8>
    2136:	0f 92       	push	r0
    2138:	8b e0       	ldi	r24, 0x0B	; 11
    213a:	98 e0       	ldi	r25, 0x08	; 8
    213c:	ed b7       	in	r30, 0x3d	; 61
    213e:	fe b7       	in	r31, 0x3e	; 62
    2140:	81 83       	std	Z+1, r24	; 0x01
    2142:	92 83       	std	Z+2, r25	; 0x02
    2144:	03 83       	std	Z+3, r16	; 0x03
    2146:	14 83       	std	Z+4, r17	; 0x04
    2148:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <handle_message_length_3+0x214>
            break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	68 e0       	ldi	r22, 0x08	; 8
    215a:	46 ed       	ldi	r20, 0xD6	; 214
    215c:	50 e2       	ldi	r21, 0x20	; 32
    215e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    }
}
    2162:	22 96       	adiw	r28, 0x02	; 2
    2164:	e5 e0       	ldi	r30, 0x05	; 5
    2166:	0c 94 47 59 	jmp	0xb28e	; 0xb28e <__epilogue_restores__+0x1a>

0000216a <set_hwConfig>:
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    216a:	a2 e8       	ldi	r26, 0x82	; 130
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb eb       	ldi	r30, 0xBB	; 187
    2170:	f0 e1       	ldi	r31, 0x10	; 16
    2172:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    2176:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    2178:	8a 30       	cpi	r24, 0x0A	; 10
    217a:	80 f4       	brcc	.+32     	; 0x219c <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    217c:	00 d0       	rcall	.+0      	; 0x217e <set_hwConfig+0x14>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <set_hwConfig+0x16>
    2180:	ed b7       	in	r30, 0x3d	; 61
    2182:	fe b7       	in	r31, 0x3e	; 62
    2184:	31 96       	adiw	r30, 0x01	; 1
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	95 e2       	ldi	r25, 0x25	; 37
    218a:	ad b7       	in	r26, 0x3d	; 61
    218c:	be b7       	in	r27, 0x3e	; 62
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	8d 93       	st	X+, r24
    2192:	9c 93       	st	X, r25
    2194:	12 97       	sbiw	r26, 0x02	; 2
    2196:	8e e4       	ldi	r24, 0x4E	; 78
    2198:	90 e2       	ldi	r25, 0x20	; 32
    219a:	1f c0       	rjmp	.+62     	; 0x21da <set_hwConfig+0x70>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	95 e2       	ldi	r25, 0x25	; 37
    else if (config_num < 100)
    21a0:	24 36       	cpi	r18, 0x64	; 100
    21a2:	70 f4       	brcc	.+28     	; 0x21c0 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <set_hwConfig+0x3c>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <set_hwConfig+0x3e>
    21a8:	ed b7       	in	r30, 0x3d	; 61
    21aa:	fe b7       	in	r31, 0x3e	; 62
    21ac:	31 96       	adiw	r30, 0x01	; 1
    21ae:	ad b7       	in	r26, 0x3d	; 61
    21b0:	be b7       	in	r27, 0x3e	; 62
    21b2:	11 96       	adiw	r26, 0x01	; 1
    21b4:	8d 93       	st	X+, r24
    21b6:	9c 93       	st	X, r25
    21b8:	12 97       	sbiw	r26, 0x02	; 2
    21ba:	8c e5       	ldi	r24, 0x5C	; 92
    21bc:	90 e2       	ldi	r25, 0x20	; 32
    21be:	0d c0       	rjmp	.+26     	; 0x21da <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <set_hwConfig+0x58>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <set_hwConfig+0x5a>
    21c4:	ed b7       	in	r30, 0x3d	; 61
    21c6:	fe b7       	in	r31, 0x3e	; 62
    21c8:	31 96       	adiw	r30, 0x01	; 1
    21ca:	ad b7       	in	r26, 0x3d	; 61
    21cc:	be b7       	in	r27, 0x3e	; 62
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8d 93       	st	X+, r24
    21d2:	9c 93       	st	X, r25
    21d4:	12 97       	sbiw	r26, 0x02	; 2
    21d6:	89 e6       	ldi	r24, 0x69	; 105
    21d8:	90 e2       	ldi	r25, 0x20	; 32
    21da:	82 83       	std	Z+2, r24	; 0x02
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	24 83       	std	Z+4, r18	; 0x04
    21e0:	15 82       	std	Z+5, r1	; 0x05
    21e2:	0e 94 e9 5b 	call	0xb7d2	; 0xb7d2 <sprintf>
    21e6:	ed b7       	in	r30, 0x3d	; 61
    21e8:	fe b7       	in	r31, 0x3e	; 62
    21ea:	36 96       	adiw	r30, 0x06	; 6
    21ec:	ed bf       	out	0x3d, r30	; 61
    21ee:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    21f0:	8b e0       	ldi	r24, 0x0B	; 11
    21f2:	98 e2       	ldi	r25, 0x28	; 40
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	75 e2       	ldi	r23, 0x25	; 37
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
    if (res == FR_OK) {
    21fe:	88 23       	and	r24, r24
    2200:	c9 f5       	brne	.+114    	; 0x2274 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    2202:	e3 e0       	ldi	r30, 0x03	; 3
    2204:	ce 2e       	mov	r12, r30
    2206:	d1 2c       	mov	r13, r1
    2208:	cc 0e       	add	r12, r28
    220a:	dd 1e       	adc	r13, r29
    220c:	8b e0       	ldi	r24, 0x0B	; 11
    220e:	98 e2       	ldi	r25, 0x28	; 40
    2210:	b6 01       	movw	r22, r12
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	9e 01       	movw	r18, r28
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    2220:	88 23       	and	r24, r24
    2222:	09 f5       	brne	.+66     	; 0x2266 <set_hwConfig+0xfc>
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	80 38       	cpi	r24, 0x80	; 128
    222a:	91 05       	cpc	r25, r1
    222c:	e1 f4       	brne	.+56     	; 0x2266 <set_hwConfig+0xfc>
    222e:	7f e3       	ldi	r23, 0x3F	; 63
    2230:	e7 2e       	mov	r14, r23
    2232:	77 e2       	ldi	r23, 0x27	; 39
    2234:	f7 2e       	mov	r15, r23
    2236:	00 e0       	ldi	r16, 0x00	; 0
    2238:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    223a:	f6 01       	movw	r30, r12
    223c:	e0 0f       	add	r30, r16
    223e:	f1 1f       	adc	r31, r17
    2240:	60 81       	ld	r22, Z
    2242:	d7 01       	movw	r26, r14
    2244:	6d 93       	st	X+, r22
    2246:	7d 01       	movw	r14, r26
        if (quiet_mode_on == 0)
            xputs(PSTR("Error opening pattern file\n"));
    }
}

void set_hwConfig(uint8_t config_num) {
    2248:	0f 5f       	subi	r16, 0xFF	; 255
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    224c:	c8 01       	movw	r24, r16
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2256:	00 38       	cpi	r16, 0x80	; 128
    2258:	11 05       	cpc	r17, r1
    225a:	79 f7       	brne	.-34     	; 0x223a <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2266:	8b e0       	ldi	r24, 0x0B	; 11
    2268:	98 e2       	ldi	r25, 0x28	; 40
    226a:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	95 e0       	ldi	r25, 0x05	; 5
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2274:	89 ec       	ldi	r24, 0xC9	; 201
    2276:	95 e0       	ldi	r25, 0x05	; 5
    2278:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    }
}
    227c:	ce 57       	subi	r28, 0x7E	; 126
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	e8 e0       	ldi	r30, 0x08	; 8
    2282:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>

00002286 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	0e 94 91 22 	call	0x4522	; 0x4522 <digitalToggle>
}
    228c:	08 95       	ret

0000228e <Update_display>:
	}

	digitalWrite(1, LOW); // set line low at end of frame write
}

void Update_display(void) {
    228e:	aa e0       	ldi	r26, 0x0A	; 10
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ed e4       	ldi	r30, 0x4D	; 77
    2294:	f1 e1       	ldi	r31, 0x11	; 17
    2296:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
	uint16_t X_ADC2, Y_ADC2;
	uint16_t resolution;
    
    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    229a:	80 91 bf 27 	lds	r24, 0x27BF
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <Update_display+0x16>
    22a2:	8d c0       	rjmp	.+282    	; 0x23be <Update_display+0x130>
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	30 f4       	brcc	.+12     	; 0x22b4 <Update_display+0x26>
    22a8:	88 23       	and	r24, r24
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <Update_display+0x34>
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <Update_display+0x24>
    22b0:	9a c1       	rjmp	.+820    	; 0x25e6 <Update_display+0x358>
    22b2:	32 c0       	rjmp	.+100    	; 0x2318 <Update_display+0x8a>
    22b4:	83 30       	cpi	r24, 0x03	; 3
    22b6:	09 f4       	brne	.+2      	; 0x22ba <Update_display+0x2c>
    22b8:	d2 c0       	rjmp	.+420    	; 0x245e <Update_display+0x1d0>
    22ba:	84 30       	cpi	r24, 0x04	; 4
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <Update_display+0x32>
    22be:	93 c1       	rjmp	.+806    	; 0x25e6 <Update_display+0x358>
    22c0:	48 c1       	rjmp	.+656    	; 0x2552 <Update_display+0x2c4>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[function_counter_x];
    22c2:	e0 91 f1 24 	lds	r30, 0x24F1
    22c6:	f0 91 f2 24 	lds	r31, 0x24F2
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	e3 5d       	subi	r30, 0xD3	; 211
    22d0:	f7 4d       	sbci	r31, 0xD7	; 215
    22d2:	20 81       	ld	r18, Z
    22d4:	31 81       	ldd	r19, Z+1	; 0x01
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	20 93 8d 26 	sts	0x268D, r18
    22de:	30 93 8e 26 	sts	0x268E, r19
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    22e2:	80 91 0a 28 	lds	r24, 0x280A
    22e6:	99 27       	eor	r25, r25
    22e8:	87 fd       	sbrc	r24, 7
    22ea:	90 95       	com	r25
    22ec:	ac 01       	movw	r20, r24
    22ee:	24 9f       	mul	r18, r20
    22f0:	c0 01       	movw	r24, r0
    22f2:	25 9f       	mul	r18, r21
    22f4:	90 0d       	add	r25, r0
    22f6:	34 9f       	mul	r19, r20
    22f8:	90 0d       	add	r25, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	6a e0       	ldi	r22, 0x0A	; 10
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2304:	cb 01       	movw	r24, r22
    2306:	20 91 9f 25 	lds	r18, 0x259F
    230a:	45 e0       	ldi	r20, 0x05	; 5
    230c:	24 02       	muls	r18, r20
    230e:	90 01       	movw	r18, r0
    2310:	11 24       	eor	r1, r1
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	9d c0       	rjmp	.+314    	; 0x2452 <Update_display+0x1c4>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  // 1 volt = 102 frames/sec
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2326:	cb 01       	movw	r24, r22
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	40 91 8d 26 	lds	r20, 0x268D
    2334:	50 91 8e 26 	lds	r21, 0x268E
    2338:	9a 01       	movw	r18, r20
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	24 0f       	add	r18, r20
    2340:	35 1f       	adc	r19, r21
    2342:	22 0f       	add	r18, r18
    2344:	33 1f       	adc	r19, r19
    2346:	82 0f       	add	r24, r18
    2348:	93 1f       	adc	r25, r19
    234a:	6a e0       	ldi	r22, 0x0A	; 10
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2352:	9b 01       	movw	r18, r22
    2354:	60 93 8d 26 	sts	0x268D, r22
    2358:	70 93 8e 26 	sts	0x268E, r23
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    235c:	80 91 0a 28 	lds	r24, 0x280A
    2360:	99 27       	eor	r25, r25
    2362:	87 fd       	sbrc	r24, 7
    2364:	90 95       	com	r25
    2366:	bc 01       	movw	r22, r24
    2368:	26 9f       	mul	r18, r22
    236a:	c0 01       	movw	r24, r0
    236c:	27 9f       	mul	r18, r23
    236e:	90 0d       	add	r25, r0
    2370:	36 9f       	mul	r19, r22
    2372:	90 0d       	add	r25, r0
    2374:	11 24       	eor	r1, r1
    2376:	6a e0       	ldi	r22, 0x0A	; 10
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    237e:	cb 01       	movw	r24, r22
    2380:	20 91 9f 25 	lds	r18, 0x259F
    2384:	45 e0       	ldi	r20, 0x05	; 5
    2386:	24 02       	muls	r18, r20
    2388:	90 01       	movw	r18, r0
    238a:	11 24       	eor	r1, r1
    238c:	82 0f       	add	r24, r18
    238e:	93 1f       	adc	r25, r19
    2390:	62 e0       	ldi	r22, 0x02	; 2
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2398:	9b 01       	movw	r18, r22
    239a:	1b 01       	movw	r2, r22
            
            //set a frame rate limit 256fps
            if (X_rate >256)
    239c:	71 e0       	ldi	r23, 0x01	; 1
    239e:	21 30       	cpi	r18, 0x01	; 1
    23a0:	37 07       	cpc	r19, r23
    23a2:	24 f0       	brlt	.+8      	; 0x23ac <Update_display+0x11e>
    23a4:	21 2c       	mov	r2, r1
    23a6:	f1 e0       	ldi	r31, 0x01	; 1
    23a8:	3f 2e       	mov	r3, r31
    23aa:	1f c1       	rjmp	.+574    	; 0x25ea <Update_display+0x35c>
                X_rate = 256;
            else if (X_rate < -256)
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	20 30       	cpi	r18, 0x00	; 0
    23b0:	38 07       	cpc	r19, r24
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <Update_display+0x128>
    23b4:	1a c1       	rjmp	.+564    	; 0x25ea <Update_display+0x35c>
    23b6:	21 2c       	mov	r2, r1
    23b8:	ef ef       	ldi	r30, 0xFF	; 255
    23ba:	3e 2e       	mov	r3, r30
    23bc:	16 c1       	rjmp	.+556    	; 0x25ea <Update_display+0x35c>
                X_rate = -256;
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4; // 1 volt = 102
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    23c4:	64 e0       	ldi	r22, 0x04	; 4
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    23cc:	cb 01       	movw	r24, r22
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	40 91 8d 26 	lds	r20, 0x268D
    23da:	50 91 8e 26 	lds	r21, 0x268E
    23de:	9a 01       	movw	r18, r20
    23e0:	22 0f       	add	r18, r18
    23e2:	33 1f       	adc	r19, r19
    23e4:	24 0f       	add	r18, r20
    23e6:	35 1f       	adc	r19, r21
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	82 0f       	add	r24, r18
    23ee:	93 1f       	adc	r25, r19
    23f0:	6a e0       	ldi	r22, 0x0A	; 10
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    23f8:	db 01       	movw	r26, r22
    23fa:	60 93 8d 26 	sts	0x268D, r22
    23fe:	70 93 8e 26 	sts	0x268E, r23
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[function_counter_x] + 5*bias_x)/2;
    2402:	e0 91 f1 24 	lds	r30, 0x24F1
    2406:	f0 91 f2 24 	lds	r31, 0x24F2
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	e3 5d       	subi	r30, 0xD3	; 211
    2410:	f7 4d       	sbci	r31, 0xD7	; 215
    2412:	20 81       	ld	r18, Z
    2414:	31 81       	ldd	r19, Z+1	; 0x01
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	80 91 9f 25 	lds	r24, 0x259F
    241e:	45 e0       	ldi	r20, 0x05	; 5
    2420:	84 02       	muls	r24, r20
    2422:	c0 01       	movw	r24, r0
    2424:	11 24       	eor	r1, r1
    2426:	28 0f       	add	r18, r24
    2428:	39 1f       	adc	r19, r25
    242a:	80 91 0a 28 	lds	r24, 0x280A
    242e:	99 27       	eor	r25, r25
    2430:	87 fd       	sbrc	r24, 7
    2432:	90 95       	com	r25
    2434:	fc 01       	movw	r30, r24
    2436:	ae 9f       	mul	r26, r30
    2438:	c0 01       	movw	r24, r0
    243a:	af 9f       	mul	r26, r31
    243c:	90 0d       	add	r25, r0
    243e:	be 9f       	mul	r27, r30
    2440:	90 0d       	add	r25, r0
    2442:	11 24       	eor	r1, r1
    2444:	6a e0       	ldi	r22, 0x0A	; 10
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    244c:	c9 01       	movw	r24, r18
    244e:	86 0f       	add	r24, r22
    2450:	97 1f       	adc	r25, r23
    2452:	62 e0       	ldi	r22, 0x02	; 2
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    245a:	1b 01       	movw	r2, r22
    245c:	c6 c0       	rjmp	.+396    	; 0x25ea <Update_display+0x35c>
            break;
        case 3: // POS mode, use CH2 to set the frame position (pos ctrl, not vel ctrl)
            X_ADC2 = analogRead(2);  //X_ADC2 ranges from 0-4095 (12bit ADC) when input 0-10V
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
    2464:	18 2f       	mov	r17, r24
    2466:	09 2f       	mov	r16, r25
            
			//Calculate the resolution         
			resolution = (uint32_t)g_v_max * 4095/10;
    2468:	60 91 9d 20 	lds	r22, 0x209D
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	2f ef       	ldi	r18, 0xFF	; 255
    2474:	3f e0       	ldi	r19, 0x0F	; 15
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    247e:	2a e0       	ldi	r18, 0x0A	; 10
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    248a:	49 01       	movw	r8, r18
    248c:	5a 01       	movw	r10, r20
    248e:	a9 01       	movw	r20, r18
			
			if (X_ADC2>resolution) {X_ADC2 = resolution;}
			
			//calculate the index_x                                               
			temp_index_x = ((int32_t)X_ADC2 * x_num * 2 + resolution) / ((int32_t) resolution * 2) - 1;
    2490:	20 90 2b 28 	lds	r2, 0x282B
    2494:	30 90 2c 28 	lds	r3, 0x282C
    2498:	b1 01       	movw	r22, r2
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	6d 83       	std	Y+5, r22	; 0x05
    24a0:	7e 83       	std	Y+6, r23	; 0x06
    24a2:	8f 83       	std	Y+7, r24	; 0x07
    24a4:	98 87       	std	Y+8, r25	; 0x08
    24a6:	69 01       	movw	r12, r18
    24a8:	ee 24       	eor	r14, r14
    24aa:	ff 24       	eor	r15, r15
    24ac:	2b 01       	movw	r4, r22
    24ae:	3c 01       	movw	r6, r24
    24b0:	44 0c       	add	r4, r4
    24b2:	55 1c       	adc	r5, r5
    24b4:	66 1c       	adc	r6, r6
    24b6:	77 1c       	adc	r7, r7
    24b8:	21 2f       	mov	r18, r17
    24ba:	30 2f       	mov	r19, r16
    24bc:	c9 01       	movw	r24, r18
    24be:	48 17       	cp	r20, r24
    24c0:	59 07       	cpc	r21, r25
    24c2:	08 f4       	brcc	.+2      	; 0x24c6 <Update_display+0x238>
    24c4:	c4 01       	movw	r24, r8
    24c6:	9c 01       	movw	r18, r24
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	c3 01       	movw	r24, r6
    24ce:	b2 01       	movw	r22, r4
    24d0:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    24d4:	6c 0d       	add	r22, r12
    24d6:	7d 1d       	adc	r23, r13
    24d8:	8e 1d       	adc	r24, r14
    24da:	9f 1d       	adc	r25, r15
    24dc:	cc 0c       	add	r12, r12
    24de:	dd 1c       	adc	r13, r13
    24e0:	ee 1c       	adc	r14, r14
    24e2:	ff 1c       	adc	r15, r15
    24e4:	a7 01       	movw	r20, r14
    24e6:	96 01       	movw	r18, r12
    24e8:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    24ec:	21 50       	subi	r18, 0x01	; 1
    24ee:	30 40       	sbci	r19, 0x00	; 0
    24f0:	40 40       	sbci	r20, 0x00	; 0
    24f2:	50 40       	sbci	r21, 0x00	; 0
				
            if (temp_index_x >= x_num)  {temp_index_x = x_num - 1;} //check if too big
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	af 81       	ldd	r26, Y+7	; 0x07
    24fa:	b8 85       	ldd	r27, Y+8	; 0x08
    24fc:	28 17       	cp	r18, r24
    24fe:	39 07       	cpc	r19, r25
    2500:	4a 07       	cpc	r20, r26
    2502:	5b 07       	cpc	r21, r27
    2504:	4c f0       	brlt	.+18     	; 0x2518 <Update_display+0x28a>
    2506:	08 94       	sec
    2508:	21 08       	sbc	r2, r1
    250a:	31 08       	sbc	r3, r1
    250c:	91 01       	movw	r18, r2
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	08 94       	sec
    2514:	21 1c       	adc	r2, r1
    2516:	31 1c       	adc	r3, r1
            if (temp_index_x <= 0)  {temp_index_x = 0;} //or too small
			index_x = temp_index_x;
    2518:	57 ff       	sbrs	r21, 7
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <Update_display+0x296>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	20 93 c1 27 	sts	0x27C1, r18
    2528:	30 93 c2 27 	sts	0x27C2, r19
			
            frame_num = index_y*x_num + index_x;
    252c:	80 91 76 29 	lds	r24, 0x2976
    2530:	90 91 77 29 	lds	r25, 0x2977
    2534:	20 91 c1 27 	lds	r18, 0x27C1
    2538:	30 91 c2 27 	lds	r19, 0x27C2
    253c:	dc 01       	movw	r26, r24
    253e:	a2 9d       	mul	r26, r2
    2540:	c0 01       	movw	r24, r0
    2542:	a3 9d       	mul	r26, r3
    2544:	90 0d       	add	r25, r0
    2546:	b2 9d       	mul	r27, r2
    2548:	90 0d       	add	r25, r0
    254a:	11 24       	eor	r1, r1
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	46 c0       	rjmp	.+140    	; 0x25de <Update_display+0x350>
            X_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (X_pos_index + function_X[function_counter_x]);
    2552:	e0 91 f1 24 	lds	r30, 0x24F1
    2556:	f0 91 f2 24 	lds	r31, 0x24F2
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	e3 5d       	subi	r30, 0xD3	; 211
    2560:	f7 4d       	sbci	r31, 0xD7	; 215
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	80 91 0c 27 	lds	r24, 0x270C
    256c:	90 91 0d 27 	lds	r25, 0x270D
    2570:	e8 0f       	add	r30, r24
    2572:	f9 1f       	adc	r31, r25
    2574:	20 91 2b 28 	lds	r18, 0x282B
    2578:	30 91 2c 28 	lds	r19, 0x282C
            if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    257c:	f7 fd       	sbrc	r31, 7
    257e:	09 c0       	rjmp	.+18     	; 0x2592 <Update_display+0x304>
    2580:	cf 01       	movw	r24, r30
    2582:	b9 01       	movw	r22, r18
    2584:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    2588:	80 93 c1 27 	sts	0x27C1, r24
    258c:	90 93 c2 27 	sts	0x27C2, r25
    2590:	10 c0       	rjmp	.+32     	; 0x25b2 <Update_display+0x324>
            if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    2592:	88 27       	eor	r24, r24
    2594:	99 27       	eor	r25, r25
    2596:	8e 1b       	sub	r24, r30
    2598:	9f 0b       	sbc	r25, r31
    259a:	b9 01       	movw	r22, r18
    259c:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    25a0:	21 50       	subi	r18, 0x01	; 1
    25a2:	30 40       	sbci	r19, 0x00	; 0
    25a4:	f9 01       	movw	r30, r18
    25a6:	e8 1b       	sub	r30, r24
    25a8:	f9 0b       	sbc	r31, r25
    25aa:	e0 93 c1 27 	sts	0x27C1, r30
    25ae:	f0 93 c2 27 	sts	0x27C2, r31
            frame_num = index_y*x_num + index_x;
    25b2:	20 91 76 29 	lds	r18, 0x2976
    25b6:	30 91 77 29 	lds	r19, 0x2977
    25ba:	40 91 c1 27 	lds	r20, 0x27C1
    25be:	50 91 c2 27 	lds	r21, 0x27C2
    25c2:	80 91 2b 28 	lds	r24, 0x282B
    25c6:	90 91 2c 28 	lds	r25, 0x282C
    25ca:	bc 01       	movw	r22, r24
    25cc:	26 9f       	mul	r18, r22
    25ce:	c0 01       	movw	r24, r0
    25d0:	27 9f       	mul	r18, r23
    25d2:	90 0d       	add	r25, r0
    25d4:	36 9f       	mul	r19, r22
    25d6:	90 0d       	add	r25, r0
    25d8:	11 24       	eor	r1, r1
    25da:	84 0f       	add	r24, r20
    25dc:	95 1f       	adc	r25, r21
    25de:	80 93 ef 24 	sts	0x24EF, r24
    25e2:	90 93 f0 24 	sts	0x24F0, r25
    25e6:	22 24       	eor	r2, r2
    25e8:	33 24       	eor	r3, r3
            //do something with errors here for default case
    }
    
	
    
    switch(y_mode) {
    25ea:	80 91 09 28 	lds	r24, 0x2809
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <Update_display+0x366>
    25f2:	8b c0       	rjmp	.+278    	; 0x270a <Update_display+0x47c>
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	30 f4       	brcc	.+12     	; 0x2604 <Update_display+0x376>
    25f8:	88 23       	and	r24, r24
    25fa:	59 f0       	breq	.+22     	; 0x2612 <Update_display+0x384>
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	09 f0       	breq	.+2      	; 0x2602 <Update_display+0x374>
    2600:	99 c1       	rjmp	.+818    	; 0x2934 <Update_display+0x6a6>
    2602:	32 c0       	rjmp	.+100    	; 0x2668 <Update_display+0x3da>
    2604:	83 30       	cpi	r24, 0x03	; 3
    2606:	09 f4       	brne	.+2      	; 0x260a <Update_display+0x37c>
    2608:	d0 c0       	rjmp	.+416    	; 0x27aa <Update_display+0x51c>
    260a:	84 30       	cpi	r24, 0x04	; 4
    260c:	09 f0       	breq	.+2      	; 0x2610 <Update_display+0x382>
    260e:	92 c1       	rjmp	.+804    	; 0x2934 <Update_display+0x6a6>
    2610:	47 c1       	rjmp	.+654    	; 0x28a0 <Update_display+0x612>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[function_counter_y];
    2612:	e0 91 f3 24 	lds	r30, 0x24F3
    2616:	f0 91 f4 24 	lds	r31, 0x24F4
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	ec 54       	subi	r30, 0x4C	; 76
    2620:	fa 4d       	sbci	r31, 0xDA	; 218
    2622:	20 81       	ld	r18, Z
    2624:	31 81       	ldd	r19, Z+1	; 0x01
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	20 93 b1 25 	sts	0x25B1, r18
    262e:	30 93 b2 25 	sts	0x25B2, r19
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2632:	80 91 c3 27 	lds	r24, 0x27C3
    2636:	99 27       	eor	r25, r25
    2638:	87 fd       	sbrc	r24, 7
    263a:	90 95       	com	r25
    263c:	dc 01       	movw	r26, r24
    263e:	2a 9f       	mul	r18, r26
    2640:	c0 01       	movw	r24, r0
    2642:	2b 9f       	mul	r18, r27
    2644:	90 0d       	add	r25, r0
    2646:	3a 9f       	mul	r19, r26
    2648:	90 0d       	add	r25, r0
    264a:	11 24       	eor	r1, r1
    264c:	6a e0       	ldi	r22, 0x0A	; 10
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2654:	cb 01       	movw	r24, r22
    2656:	20 91 da 2b 	lds	r18, 0x2BDA
    265a:	45 e0       	ldi	r20, 0x05	; 5
    265c:	24 02       	muls	r18, r20
    265e:	90 01       	movw	r18, r0
    2660:	11 24       	eor	r1, r1
    2662:	82 0f       	add	r24, r18
    2664:	93 1f       	adc	r25, r19
    2666:	9b c0       	rjmp	.+310    	; 0x279e <Update_display+0x510>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102fps
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    266e:	64 e0       	ldi	r22, 0x04	; 4
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2676:	cb 01       	movw	r24, r22
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	40 91 b1 25 	lds	r20, 0x25B1
    2684:	50 91 b2 25 	lds	r21, 0x25B2
    2688:	9a 01       	movw	r18, r20
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	24 0f       	add	r18, r20
    2690:	35 1f       	adc	r19, r21
    2692:	22 0f       	add	r18, r18
    2694:	33 1f       	adc	r19, r19
    2696:	82 0f       	add	r24, r18
    2698:	93 1f       	adc	r25, r19
    269a:	6a e0       	ldi	r22, 0x0A	; 10
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    26a2:	60 93 b1 25 	sts	0x25B1, r22
    26a6:	70 93 b2 25 	sts	0x25B2, r23
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    26aa:	80 91 c3 27 	lds	r24, 0x27C3
    26ae:	99 27       	eor	r25, r25
    26b0:	87 fd       	sbrc	r24, 7
    26b2:	90 95       	com	r25
    26b4:	fc 01       	movw	r30, r24
    26b6:	6e 9f       	mul	r22, r30
    26b8:	c0 01       	movw	r24, r0
    26ba:	6f 9f       	mul	r22, r31
    26bc:	90 0d       	add	r25, r0
    26be:	7e 9f       	mul	r23, r30
    26c0:	90 0d       	add	r25, r0
    26c2:	11 24       	eor	r1, r1
    26c4:	6a e0       	ldi	r22, 0x0A	; 10
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    26cc:	cb 01       	movw	r24, r22
    26ce:	20 91 da 2b 	lds	r18, 0x2BDA
    26d2:	45 e0       	ldi	r20, 0x05	; 5
    26d4:	24 02       	muls	r18, r20
    26d6:	90 01       	movw	r18, r0
    26d8:	11 24       	eor	r1, r1
    26da:	82 0f       	add	r24, r18
    26dc:	93 1f       	adc	r25, r19
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    26e6:	7b 01       	movw	r14, r22
            
            //set a frame rate limit 256fps
            if (Y_rate > 256)
    26e8:	f1 e0       	ldi	r31, 0x01	; 1
    26ea:	61 30       	cpi	r22, 0x01	; 1
    26ec:	7f 07       	cpc	r23, r31
    26ee:	24 f0       	brlt	.+8      	; 0x26f8 <Update_display+0x46a>
    26f0:	e1 2c       	mov	r14, r1
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	ff 2e       	mov	r15, r31
    26f6:	20 c1       	rjmp	.+576    	; 0x2938 <Update_display+0x6aa>
                Y_rate = 256;
            else if (Y_rate < -256)
    26f8:	4f ef       	ldi	r20, 0xFF	; 255
    26fa:	60 30       	cpi	r22, 0x00	; 0
    26fc:	74 07       	cpc	r23, r20
    26fe:	0c f0       	brlt	.+2      	; 0x2702 <Update_display+0x474>
    2700:	1b c1       	rjmp	.+566    	; 0x2938 <Update_display+0x6aa>
    2702:	e1 2c       	mov	r14, r1
    2704:	ef ef       	ldi	r30, 0xFF	; 255
    2706:	fe 2e       	mov	r15, r30
    2708:	17 c1       	rjmp	.+558    	; 0x2938 <Update_display+0x6aa>
                Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    2710:	64 e0       	ldi	r22, 0x04	; 4
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2718:	cb 01       	movw	r24, r22
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	40 91 b1 25 	lds	r20, 0x25B1
    2726:	50 91 b2 25 	lds	r21, 0x25B2
    272a:	9a 01       	movw	r18, r20
    272c:	22 0f       	add	r18, r18
    272e:	33 1f       	adc	r19, r19
    2730:	24 0f       	add	r18, r20
    2732:	35 1f       	adc	r19, r21
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	82 0f       	add	r24, r18
    273a:	93 1f       	adc	r25, r19
    273c:	6a e0       	ldi	r22, 0x0A	; 10
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2744:	db 01       	movw	r26, r22
    2746:	60 93 b1 25 	sts	0x25B1, r22
    274a:	70 93 b2 25 	sts	0x25B2, r23
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[function_counter_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    274e:	e0 91 f3 24 	lds	r30, 0x24F3
    2752:	f0 91 f4 24 	lds	r31, 0x24F4
    2756:	ee 0f       	add	r30, r30
    2758:	ff 1f       	adc	r31, r31
    275a:	ec 54       	subi	r30, 0x4C	; 76
    275c:	fa 4d       	sbci	r31, 0xDA	; 218
    275e:	20 81       	ld	r18, Z
    2760:	31 81       	ldd	r19, Z+1	; 0x01
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	80 91 da 2b 	lds	r24, 0x2BDA
    276a:	45 e0       	ldi	r20, 0x05	; 5
    276c:	84 02       	muls	r24, r20
    276e:	c0 01       	movw	r24, r0
    2770:	11 24       	eor	r1, r1
    2772:	28 0f       	add	r18, r24
    2774:	39 1f       	adc	r19, r25
    2776:	80 91 c3 27 	lds	r24, 0x27C3
    277a:	99 27       	eor	r25, r25
    277c:	87 fd       	sbrc	r24, 7
    277e:	90 95       	com	r25
    2780:	bc 01       	movw	r22, r24
    2782:	a6 9f       	mul	r26, r22
    2784:	c0 01       	movw	r24, r0
    2786:	a7 9f       	mul	r26, r23
    2788:	90 0d       	add	r25, r0
    278a:	b6 9f       	mul	r27, r22
    278c:	90 0d       	add	r25, r0
    278e:	11 24       	eor	r1, r1
    2790:	6a e0       	ldi	r22, 0x0A	; 10
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    2798:	c9 01       	movw	r24, r18
    279a:	86 0f       	add	r24, r22
    279c:	97 1f       	adc	r25, r23
    279e:	62 e0       	ldi	r22, 0x02	; 2
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>
    27a6:	7b 01       	movw	r14, r22
    27a8:	c7 c0       	rjmp	.+398    	; 0x2938 <Update_display+0x6aa>
            break;
        case 3: // POS mode, use CH3 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC2 = analogRead(3);   //Y_ADC2 ranges from 0-4095 when input 0-10V
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
    27b0:	18 2f       	mov	r17, r24
    27b2:	09 2f       	mov	r16, r25
            
			//Calculate the resolution         
			resolution = (uint32_t)g_v_max * 4095/10;
    27b4:	60 91 9d 20 	lds	r22, 0x209D
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	2f ef       	ldi	r18, 0xFF	; 255
    27c0:	3f e0       	ldi	r19, 0x0F	; 15
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    27ca:	2a e0       	ldi	r18, 0x0A	; 10
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    27d6:	49 01       	movw	r8, r18
    27d8:	5a 01       	movw	r10, r20
    27da:	a9 01       	movw	r20, r18
			
			if (Y_ADC2>resolution) {Y_ADC2 = resolution;}
			
			//calculate the index_x                                               
			temp_index_y = ((int32_t)Y_ADC2 * y_num * 2 + resolution) / ((int32_t) resolution * 2) - 1;
    27dc:	80 91 af 25 	lds	r24, 0x25AF
    27e0:	90 91 b0 25 	lds	r25, 0x25B0
    27e4:	89 87       	std	Y+9, r24	; 0x09
    27e6:	9a 87       	std	Y+10, r25	; 0x0a
    27e8:	bc 01       	movw	r22, r24
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	69 83       	std	Y+1, r22	; 0x01
    27f0:	7a 83       	std	Y+2, r23	; 0x02
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	69 01       	movw	r12, r18
    27f8:	ee 24       	eor	r14, r14
    27fa:	ff 24       	eor	r15, r15
    27fc:	2b 01       	movw	r4, r22
    27fe:	3c 01       	movw	r6, r24
    2800:	44 0c       	add	r4, r4
    2802:	55 1c       	adc	r5, r5
    2804:	66 1c       	adc	r6, r6
    2806:	77 1c       	adc	r7, r7
    2808:	21 2f       	mov	r18, r17
    280a:	30 2f       	mov	r19, r16
    280c:	c9 01       	movw	r24, r18
    280e:	48 17       	cp	r20, r24
    2810:	59 07       	cpc	r21, r25
    2812:	08 f4       	brcc	.+2      	; 0x2816 <Update_display+0x588>
    2814:	c4 01       	movw	r24, r8
    2816:	9c 01       	movw	r18, r24
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	c3 01       	movw	r24, r6
    281e:	b2 01       	movw	r22, r4
    2820:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    2824:	6c 0d       	add	r22, r12
    2826:	7d 1d       	adc	r23, r13
    2828:	8e 1d       	adc	r24, r14
    282a:	9f 1d       	adc	r25, r15
    282c:	cc 0c       	add	r12, r12
    282e:	dd 1c       	adc	r13, r13
    2830:	ee 1c       	adc	r14, r14
    2832:	ff 1c       	adc	r15, r15
    2834:	a7 01       	movw	r20, r14
    2836:	96 01       	movw	r18, r12
    2838:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    283c:	21 50       	subi	r18, 0x01	; 1
    283e:	30 40       	sbci	r19, 0x00	; 0
    2840:	40 40       	sbci	r20, 0x00	; 0
    2842:	50 40       	sbci	r21, 0x00	; 0
			
            if (temp_index_y >= y_num)  {temp_index_y = y_num - 1;} //check if too big
    2844:	69 81       	ldd	r22, Y+1	; 0x01
    2846:	7a 81       	ldd	r23, Y+2	; 0x02
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	26 17       	cp	r18, r22
    284e:	37 07       	cpc	r19, r23
    2850:	48 07       	cpc	r20, r24
    2852:	59 07       	cpc	r21, r25
    2854:	34 f0       	brlt	.+12     	; 0x2862 <Update_display+0x5d4>
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	9c 01       	movw	r18, r24
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
            if (temp_index_y <= 0)  {temp_index_y = 0;} //or too small
			index_y = temp_index_y;
    2862:	57 ff       	sbrs	r21, 7
    2864:	04 c0       	rjmp	.+8      	; 0x286e <Update_display+0x5e0>
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	20 93 76 29 	sts	0x2976, r18
    2872:	30 93 77 29 	sts	0x2977, r19
            frame_num = index_y*x_num + index_x;
    2876:	20 91 76 29 	lds	r18, 0x2976
    287a:	30 91 77 29 	lds	r19, 0x2977
    287e:	40 91 c1 27 	lds	r20, 0x27C1
    2882:	50 91 c2 27 	lds	r21, 0x27C2
    2886:	80 91 2b 28 	lds	r24, 0x282B
    288a:	90 91 2c 28 	lds	r25, 0x282C
    288e:	dc 01       	movw	r26, r24
    2890:	2a 9f       	mul	r18, r26
    2892:	c0 01       	movw	r24, r0
    2894:	2b 9f       	mul	r18, r27
    2896:	90 0d       	add	r25, r0
    2898:	3a 9f       	mul	r19, r26
    289a:	90 0d       	add	r25, r0
    289c:	11 24       	eor	r1, r1
    289e:	44 c0       	rjmp	.+136    	; 0x2928 <Update_display+0x69a>
            Y_rate = 0;
            break;
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[function_counter_y]);
    28a0:	e0 91 f3 24 	lds	r30, 0x24F3
    28a4:	f0 91 f4 24 	lds	r31, 0x24F4
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ec 54       	subi	r30, 0x4C	; 76
    28ae:	fa 4d       	sbci	r31, 0xDA	; 218
    28b0:	01 90       	ld	r0, Z+
    28b2:	f0 81       	ld	r31, Z
    28b4:	e0 2d       	mov	r30, r0
    28b6:	80 91 7c 26 	lds	r24, 0x267C
    28ba:	90 91 7d 26 	lds	r25, 0x267D
    28be:	e8 0f       	add	r30, r24
    28c0:	f9 1f       	adc	r31, r25
    28c2:	20 91 af 25 	lds	r18, 0x25AF
    28c6:	30 91 b0 25 	lds	r19, 0x25B0
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    28ca:	f7 fd       	sbrc	r31, 7
    28cc:	09 c0       	rjmp	.+18     	; 0x28e0 <Update_display+0x652>
    28ce:	cf 01       	movw	r24, r30
    28d0:	b9 01       	movw	r22, r18
    28d2:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    28d6:	80 93 76 29 	sts	0x2976, r24
    28da:	90 93 77 29 	sts	0x2977, r25
    28de:	10 c0       	rjmp	.+32     	; 0x2900 <Update_display+0x672>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    28e0:	88 27       	eor	r24, r24
    28e2:	99 27       	eor	r25, r25
    28e4:	8e 1b       	sub	r24, r30
    28e6:	9f 0b       	sbc	r25, r31
    28e8:	b9 01       	movw	r22, r18
    28ea:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    28ee:	21 50       	subi	r18, 0x01	; 1
    28f0:	30 40       	sbci	r19, 0x00	; 0
    28f2:	f9 01       	movw	r30, r18
    28f4:	e8 1b       	sub	r30, r24
    28f6:	f9 0b       	sbc	r31, r25
    28f8:	e0 93 76 29 	sts	0x2976, r30
    28fc:	f0 93 77 29 	sts	0x2977, r31
            frame_num = index_y*x_num + index_x;
    2900:	20 91 76 29 	lds	r18, 0x2976
    2904:	30 91 77 29 	lds	r19, 0x2977
    2908:	40 91 c1 27 	lds	r20, 0x27C1
    290c:	50 91 c2 27 	lds	r21, 0x27C2
    2910:	80 91 2b 28 	lds	r24, 0x282B
    2914:	90 91 2c 28 	lds	r25, 0x282C
    2918:	bc 01       	movw	r22, r24
    291a:	26 9f       	mul	r18, r22
    291c:	c0 01       	movw	r24, r0
    291e:	27 9f       	mul	r18, r23
    2920:	90 0d       	add	r25, r0
    2922:	36 9f       	mul	r19, r22
    2924:	90 0d       	add	r25, r0
    2926:	11 24       	eor	r1, r1
    2928:	84 0f       	add	r24, r20
    292a:	95 1f       	adc	r25, r21
    292c:	80 93 ef 24 	sts	0x24EF, r24
    2930:	90 93 f0 24 	sts	0x24F0, r25
    2934:	ee 24       	eor	r14, r14
    2936:	ff 24       	eor	r15, r15
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    2938:	80 91 9c 20 	lds	r24, 0x209C
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	59 f1       	breq	.+86     	; 0x2996 <Update_display+0x708>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    2940:	12 14       	cp	r1, r2
    2942:	13 04       	cpc	r1, r3
    2944:	74 f4       	brge	.+28     	; 0x2962 <Update_display+0x6d4>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2946:	91 01       	movw	r18, r2
    2948:	44 27       	eor	r20, r20
    294a:	37 fd       	sbrc	r19, 7
    294c:	40 95       	com	r20
    294e:	54 2f       	mov	r21, r20
    2950:	62 e1       	ldi	r22, 0x12	; 18
    2952:	7a e7       	ldi	r23, 0x7A	; 122
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    295c:	86 e5       	ldi	r24, 0x56	; 86
    295e:	98 e0       	ldi	r25, 0x08	; 8
    2960:	13 c0       	rjmp	.+38     	; 0x2988 <Update_display+0x6fa>
    else if (X_rate < 0)
    2962:	21 14       	cp	r2, r1
    2964:	31 04       	cpc	r3, r1
    2966:	c9 f0       	breq	.+50     	; 0x299a <Update_display+0x70c>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2968:	22 27       	eor	r18, r18
    296a:	33 27       	eor	r19, r19
    296c:	22 19       	sub	r18, r2
    296e:	33 09       	sbc	r19, r3
    2970:	44 27       	eor	r20, r20
    2972:	37 fd       	sbrc	r19, 7
    2974:	40 95       	com	r20
    2976:	54 2f       	mov	r21, r20
    2978:	62 e1       	ldi	r22, 0x12	; 18
    297a:	7a e7       	ldi	r23, 0x7A	; 122
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    2984:	8a ec       	ldi	r24, 0xCA	; 202
    2986:	98 e0       	ldi	r25, 0x08	; 8
    2988:	ba 01       	movw	r22, r20
    298a:	a9 01       	movw	r20, r18
    298c:	22 e0       	ldi	r18, 0x02	; 2
    298e:	01 e0       	ldi	r16, 0x01	; 1
    2990:	0e 94 70 30 	call	0x60e0	; 0x60e0 <Update_Reg_Handler>
    2994:	0e c0       	rjmp	.+28     	; 0x29b2 <Update_display+0x724>
    2996:	ee 24       	eor	r14, r14
    2998:	ff 24       	eor	r15, r15
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    299a:	8a ec       	ldi	r24, 0xCA	; 202
    299c:	98 e0       	ldi	r25, 0x08	; 8
    299e:	4e e4       	ldi	r20, 0x4E	; 78
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	22 e0       	ldi	r18, 0x02	; 2
    29a8:	00 e0       	ldi	r16, 0x00	; 0
    29aa:	0e 94 70 30 	call	0x60e0	; 0x60e0 <Update_Reg_Handler>
    29ae:	22 24       	eor	r2, r2
    29b0:	33 24       	eor	r3, r3
    
    
    if (Y_rate > 0)
    29b2:	1e 14       	cp	r1, r14
    29b4:	1f 04       	cpc	r1, r15
    29b6:	74 f4       	brge	.+28     	; 0x29d4 <Update_display+0x746>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    29b8:	97 01       	movw	r18, r14
    29ba:	44 27       	eor	r20, r20
    29bc:	37 fd       	sbrc	r19, 7
    29be:	40 95       	com	r20
    29c0:	54 2f       	mov	r21, r20
    29c2:	62 e1       	ldi	r22, 0x12	; 18
    29c4:	7a e7       	ldi	r23, 0x7A	; 122
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    29ce:	8e e8       	ldi	r24, 0x8E	; 142
    29d0:	98 e0       	ldi	r25, 0x08	; 8
    29d2:	13 c0       	rjmp	.+38     	; 0x29fa <Update_display+0x76c>
    else if (Y_rate < 0)
    29d4:	e1 14       	cp	r14, r1
    29d6:	f1 04       	cpc	r15, r1
    29d8:	a9 f0       	breq	.+42     	; 0x2a04 <Update_display+0x776>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    29da:	22 27       	eor	r18, r18
    29dc:	33 27       	eor	r19, r19
    29de:	2e 19       	sub	r18, r14
    29e0:	3f 09       	sbc	r19, r15
    29e2:	44 27       	eor	r20, r20
    29e4:	37 fd       	sbrc	r19, 7
    29e6:	40 95       	com	r20
    29e8:	54 2f       	mov	r21, r20
    29ea:	62 e1       	ldi	r22, 0x12	; 18
    29ec:	7a e7       	ldi	r23, 0x7A	; 122
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	99 e0       	ldi	r25, 0x09	; 9
    29fa:	ba 01       	movw	r22, r20
    29fc:	a9 01       	movw	r20, r18
    29fe:	23 e0       	ldi	r18, 0x03	; 3
    2a00:	01 e0       	ldi	r16, 0x01	; 1
    2a02:	08 c0       	rjmp	.+16     	; 0x2a14 <Update_display+0x786>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	99 e0       	ldi	r25, 0x09	; 9
    2a08:	4e e4       	ldi	r20, 0x4E	; 78
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	23 e0       	ldi	r18, 0x03	; 3
    2a12:	00 e0       	ldi	r16, 0x00	; 0
    2a14:	0e 94 70 30 	call	0x60e0	; 0x60e0 <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    2a18:	10 92 eb 24 	sts	0x24EB, r1
    2a1c:	2e 14       	cp	r2, r14
    2a1e:	3f 04       	cpc	r3, r15
    2a20:	1c f0       	brlt	.+6      	; 0x2a28 <Update_display+0x79a>
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 93 eb 24 	sts	0x24EB, r24
}
    2a28:	2a 96       	adiw	r28, 0x0a	; 10
    2a2a:	e2 e1       	ldi	r30, 0x12	; 18
    2a2c:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00002a30 <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2a30:	a1 e0       	ldi	r26, 0x01	; 1
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ee e1       	ldi	r30, 0x1E	; 30
    2a36:	f5 e1       	ldi	r31, 0x15	; 21
    2a38:	0c 94 26 59 	jmp	0xb24c	; 0xb24c <__prologue_saves__+0x10>
    2a3c:	5c 01       	movw	r10, r24
    //The first two bytes are the x_dac_val, only support positive number 
    //The second two bytes are the y_dac_val, only support positive number 
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e0 80       	ld	r14, Z
    2a42:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2a44:	c2 80       	ldd	r12, Z+2	; 0x02
    2a46:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2a48:	84 81       	ldd	r24, Z+4	; 0x04
    2a4a:	80 93 ee 24 	sts	0x24EE, r24
    gs_value =msg_buffer[5];
    2a4e:	95 81       	ldd	r25, Z+5	; 0x05
    2a50:	90 93 3d 27 	sts	0x273D, r25
    row_compress = msg_buffer[6];
    2a54:	86 81       	ldd	r24, Z+6	; 0x06
    2a56:	80 93 b3 25 	sts	0x25B3, r24


    if (row_compress)
    2a5a:	88 23       	and	r24, r24
    2a5c:	19 f0       	breq	.+6      	; 0x2a64 <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2a5e:	90 93 c0 27 	sts	0x27C0, r25
    2a62:	09 c0       	rjmp	.+18     	; 0x2a76 <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2a64:	89 2f       	mov	r24, r25
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	23 e0       	ldi	r18, 0x03	; 3
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	2a 95       	dec	r18
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <display_dumped_frame+0x3a>
    2a72:	80 93 c0 27 	sts	0x27C0, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2a76:	10 92 ea 24 	sts	0x24EA, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	07 e0       	ldi	r16, 0x07	; 7
    2a86:	10 e0       	ldi	r17, 0x00	; 0
    2a88:	0f c0       	rjmp	.+30     	; 0x2aa8 <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2a8a:	a5 01       	movw	r20, r10
    2a8c:	40 0f       	add	r20, r16
    2a8e:	51 1f       	adc	r21, r17
    2a90:	89 2f       	mov	r24, r25
    2a92:	60 91 c0 27 	lds	r22, 0x27C0
    2a96:	99 83       	std	Y+1, r25	; 0x01
    2a98:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2a9c:	80 91 c0 27 	lds	r24, 0x27C0
    2aa0:	08 0f       	add	r16, r24
    2aa2:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2aa4:	99 81       	ldd	r25, Y+1	; 0x01
    2aa6:	9f 5f       	subi	r25, 0xFF	; 255
    2aa8:	80 91 ee 24 	lds	r24, 0x24EE
    2aac:	89 17       	cp	r24, r25
    2aae:	68 f7       	brcc	.-38     	; 0x2a8a <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    2ab0:	7f 2d       	mov	r23, r15
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	6e 0d       	add	r22, r14
    2ab6:	71 1d       	adc	r23, r1
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    2abe:	7d 2d       	mov	r23, r13
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	6c 0d       	add	r22, r12
    2ac4:	71 1d       	adc	r23, r1
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
}
    2ad4:	21 96       	adiw	r28, 0x01	; 1
    2ad6:	ea e0       	ldi	r30, 0x0A	; 10
    2ad8:	0c 94 42 59 	jmp	0xb284	; 0xb284 <__epilogue_restores__+0x10>

00002adc <fetch_display_frame>:


void fetch_display_frame(uint16_t f_num){
    2adc:	4f 92       	push	r4
    2ade:	5f 92       	push	r5
    2ae0:	6f 92       	push	r6
    2ae2:	7f 92       	push	r7
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <fetch_display_frame+0x20>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <fetch_display_frame+0x22>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	5c 01       	movw	r10, r24
			}
		}
	}

	digitalWrite(1, LOW); // set line low at end of frame write
}
    2b04:	4d b6       	in	r4, 0x3d	; 61
    2b06:	5e b6       	in	r5, 0x3e	; 62
    uint8_t *FLASH;
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2b08:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
	uint8_t tempVal, bitIndex, arrayIndex;
	uint8_t randNum;
    
    digitalWrite(1, HIGH); // set line high at start of frame write
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	61 e0       	ldi	r22, 0x01	; 1
    2b0e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
    len = num_panels * bytes_per_panel_frame;
    2b12:	90 91 c0 27 	lds	r25, 0x27C0
    2b16:	80 91 ee 24 	lds	r24, 0x24EE
    2b1a:	98 9f       	mul	r25, r24
    2b1c:	60 01       	movw	r12, r0
    2b1e:	11 24       	eor	r1, r1
	block_per_frame = len/512 + 1;
    uint8_t  frameBuff[len];
    2b20:	8d b7       	in	r24, 0x3d	; 61
    2b22:	9e b7       	in	r25, 0x3e	; 62
    2b24:	8c 19       	sub	r24, r12
    2b26:	9d 09       	sbc	r25, r13
    2b28:	8d bf       	out	0x3d, r24	; 61
    2b2a:	9e bf       	out	0x3e, r25	; 62
    2b2c:	6d b6       	in	r6, 0x3d	; 61
    2b2e:	7e b6       	in	r7, 0x3e	; 62
    2b30:	08 94       	sec
    2b32:	61 1c       	adc	r6, r1
    2b34:	71 1c       	adc	r7, r1
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2b36:	6d 2d       	mov	r22, r13
    2b38:	66 95       	lsr	r22
    2b3a:	6f 5f       	subi	r22, 0xFF	; 255
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	95 01       	movw	r18, r10
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    2b4c:	7b 01       	movw	r14, r22
    2b4e:	8c 01       	movw	r16, r24
    2b50:	08 94       	sec
    2b52:	e1 1c       	adc	r14, r1
    2b54:	f1 1c       	adc	r15, r1
    2b56:	01 1d       	adc	r16, r1
    2b58:	11 1d       	adc	r17, r1
    2b5a:	69 e0       	ldi	r22, 0x09	; 9
    2b5c:	ee 0c       	add	r14, r14
    2b5e:	ff 1c       	adc	r15, r15
    2b60:	00 1f       	adc	r16, r16
    2b62:	11 1f       	adc	r17, r17
    2b64:	6a 95       	dec	r22
    2b66:	d1 f7       	brne	.-12     	; 0x2b5c <fetch_display_frame+0x80>

    res = f_lseek(&file1, offset);
    2b68:	88 e7       	ldi	r24, 0x78	; 120
    2b6a:	99 e2       	ldi	r25, 0x29	; 41
    2b6c:	b8 01       	movw	r22, r16
    2b6e:	a7 01       	movw	r20, r14
    2b70:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
    2b74:	98 2e       	mov	r9, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2b76:	88 23       	and	r24, r24
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <fetch_display_frame+0xa0>
    2b7a:	f4 c1       	rjmp	.+1000   	; 0x2f64 <fetch_display_frame+0x488>
    2b7c:	80 91 7e 29 	lds	r24, 0x297E
    2b80:	90 91 7f 29 	lds	r25, 0x297F
    2b84:	a0 91 80 29 	lds	r26, 0x2980
    2b88:	b0 91 81 29 	lds	r27, 0x2981
    2b8c:	8e 15       	cp	r24, r14
    2b8e:	9f 05       	cpc	r25, r15
    2b90:	a0 07       	cpc	r26, r16
    2b92:	b1 07       	cpc	r27, r17
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <fetch_display_frame+0xbc>
    2b96:	e6 c1       	rjmp	.+972    	; 0x2f64 <fetch_display_frame+0x488>
        res = f_read(&file1, frameBuff, len, &cnt);
    2b98:	88 e7       	ldi	r24, 0x78	; 120
    2b9a:	99 e2       	ldi	r25, 0x29	; 41
    2b9c:	b3 01       	movw	r22, r6
    2b9e:	a6 01       	movw	r20, r12
    2ba0:	9e 01       	movw	r18, r28
    2ba2:	2f 5f       	subi	r18, 0xFF	; 255
    2ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba6:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
    2baa:	18 2f       	mov	r17, r24
        if ((res == FR_OK) && (cnt == len)) {	
    2bac:	88 23       	and	r24, r24
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <fetch_display_frame+0xd6>
    2bb0:	b4 c1       	rjmp	.+872    	; 0x2f1a <fetch_display_frame+0x43e>
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	8c 15       	cp	r24, r12
    2bb8:	9d 05       	cpc	r25, r13
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <fetch_display_frame+0xe2>
    2bbc:	ae c1       	rjmp	.+860    	; 0x2f1a <fetch_display_frame+0x43e>
		
            if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    2bbe:	80 91 ea 24 	lds	r24, 0x24EA
    2bc2:	82 30       	cpi	r24, 0x02	; 2
    2bc4:	18 f0       	brcs	.+6      	; 0x2bcc <fetch_display_frame+0xf0>
                ledToggle(1);    //toggle LED 1
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	0e 94 fe 21 	call	0x43fc	; 0x43fc <ledToggle>
            }
            
            display_flag = 0;  //clear the display flag
    2bcc:	10 92 ea 24 	sts	0x24EA, r1
    2bd0:	dd 24       	eor	r13, r13
    2bd2:	d3 94       	inc	r13
    2bd4:	ee 24       	eor	r14, r14
    2bd6:	ff 24       	eor	r15, r15
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2bd8:	53 e0       	ldi	r21, 0x03	; 3
    2bda:	a5 2e       	mov	r10, r21
    2bdc:	b1 2c       	mov	r11, r1
    2bde:	ac 0e       	add	r10, r28
    2be0:	bd 1e       	adc	r11, r29
    2be2:	95 c1       	rjmp	.+810    	; 0x2f0e <fetch_display_frame+0x432>
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
				FLASH = &frameBuff[buff_index];
    2be4:	83 01       	movw	r16, r6
    2be6:	0e 0d       	add	r16, r14
    2be8:	1f 1d       	adc	r17, r15
				buff_index = buff_index + bytes_per_panel_frame;
    2bea:	c0 90 c0 27 	lds	r12, 0x27C0

                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    2bee:	80 91 a7 29 	lds	r24, 0x29A7
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <fetch_display_frame+0x11c>
    2bf6:	82 c1       	rjmp	.+772    	; 0x2efc <fetch_display_frame+0x420>
                    if (bytes_per_panel_frame == 8){
    2bf8:	98 e0       	ldi	r25, 0x08	; 8
    2bfa:	c9 16       	cp	r12, r25
    2bfc:	59 f5       	brne	.+86     	; 0x2c54 <fetch_display_frame+0x178>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2bfe:	d8 01       	movw	r26, r16
    2c00:	9c 91       	ld	r25, X
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	8c 91       	ld	r24, X
    2c06:	11 97       	sbiw	r26, 0x01	; 1
    2c08:	98 17       	cp	r25, r24
    2c0a:	21 f5       	brne	.+72     	; 0x2c54 <fetch_display_frame+0x178>
    2c0c:	12 96       	adiw	r26, 0x02	; 2
    2c0e:	4c 91       	ld	r20, X
    2c10:	12 97       	sbiw	r26, 0x02	; 2
    2c12:	13 96       	adiw	r26, 0x03	; 3
    2c14:	8c 91       	ld	r24, X
    2c16:	13 97       	sbiw	r26, 0x03	; 3
    2c18:	48 17       	cp	r20, r24
    2c1a:	e1 f4       	brne	.+56     	; 0x2c54 <fetch_display_frame+0x178>
    2c1c:	14 96       	adiw	r26, 0x04	; 4
    2c1e:	3c 91       	ld	r19, X
    2c20:	14 97       	sbiw	r26, 0x04	; 4
    2c22:	15 96       	adiw	r26, 0x05	; 5
    2c24:	8c 91       	ld	r24, X
    2c26:	15 97       	sbiw	r26, 0x05	; 5
    2c28:	38 17       	cp	r19, r24
    2c2a:	a1 f4       	brne	.+40     	; 0x2c54 <fetch_display_frame+0x178>
    2c2c:	16 96       	adiw	r26, 0x06	; 6
    2c2e:	2c 91       	ld	r18, X
    2c30:	16 97       	sbiw	r26, 0x06	; 6
    2c32:	17 96       	adiw	r26, 0x07	; 7
    2c34:	8c 91       	ld	r24, X
    2c36:	28 17       	cp	r18, r24
    2c38:	69 f4       	brne	.+26     	; 0x2c54 <fetch_display_frame+0x178>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2c3a:	94 17       	cp	r25, r20
    2c3c:	59 f4       	brne	.+22     	; 0x2c54 <fetch_display_frame+0x178>
    2c3e:	93 17       	cp	r25, r19
    2c40:	49 f4       	brne	.+18     	; 0x2c54 <fetch_display_frame+0x178>
    2c42:	92 17       	cp	r25, r18
    2c44:	39 f4       	brne	.+14     	; 0x2c54 <fetch_display_frame+0x178>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    2c46:	8d 2d       	mov	r24, r13
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	a8 01       	movw	r20, r16
    2c4c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    2c50:	51 e0       	ldi	r21, 0x01	; 1
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <fetch_display_frame+0x17a>
    2c54:	50 e0       	ldi	r21, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    2c56:	80 91 c0 27 	lds	r24, 0x27C0
    2c5a:	88 31       	cpi	r24, 0x18	; 24
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <fetch_display_frame+0x184>
    2c5e:	8c c0       	rjmp	.+280    	; 0x2d78 <fetch_display_frame+0x29c>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2c60:	f3 01       	movw	r30, r6
    2c62:	ee 0d       	add	r30, r14
    2c64:	ff 1d       	adc	r31, r15
    2c66:	e0 81       	ld	r30, Z
    2c68:	d8 01       	movw	r26, r16
    2c6a:	11 96       	adiw	r26, 0x01	; 1
    2c6c:	8c 91       	ld	r24, X
    2c6e:	11 97       	sbiw	r26, 0x01	; 1
    2c70:	e8 17       	cp	r30, r24
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <fetch_display_frame+0x19a>
    2c74:	81 c0       	rjmp	.+258    	; 0x2d78 <fetch_display_frame+0x29c>
    2c76:	12 96       	adiw	r26, 0x02	; 2
    2c78:	3c 91       	ld	r19, X
    2c7a:	12 97       	sbiw	r26, 0x02	; 2
    2c7c:	13 96       	adiw	r26, 0x03	; 3
    2c7e:	8c 91       	ld	r24, X
    2c80:	13 97       	sbiw	r26, 0x03	; 3
    2c82:	38 17       	cp	r19, r24
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <fetch_display_frame+0x1ac>
    2c86:	78 c0       	rjmp	.+240    	; 0x2d78 <fetch_display_frame+0x29c>
    2c88:	14 96       	adiw	r26, 0x04	; 4
    2c8a:	2c 91       	ld	r18, X
    2c8c:	14 97       	sbiw	r26, 0x04	; 4
    2c8e:	15 96       	adiw	r26, 0x05	; 5
    2c90:	8c 91       	ld	r24, X
    2c92:	15 97       	sbiw	r26, 0x05	; 5
    2c94:	28 17       	cp	r18, r24
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <fetch_display_frame+0x1be>
    2c98:	6f c0       	rjmp	.+222    	; 0x2d78 <fetch_display_frame+0x29c>
    2c9a:	16 96       	adiw	r26, 0x06	; 6
    2c9c:	9c 91       	ld	r25, X
    2c9e:	16 97       	sbiw	r26, 0x06	; 6
    2ca0:	17 96       	adiw	r26, 0x07	; 7
    2ca2:	8c 91       	ld	r24, X
    2ca4:	17 97       	sbiw	r26, 0x07	; 7
    2ca6:	98 17       	cp	r25, r24
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <fetch_display_frame+0x1d0>
    2caa:	66 c0       	rjmp	.+204    	; 0x2d78 <fetch_display_frame+0x29c>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2cac:	e3 17       	cp	r30, r19
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <fetch_display_frame+0x1d6>
    2cb0:	63 c0       	rjmp	.+198    	; 0x2d78 <fetch_display_frame+0x29c>
    2cb2:	e2 17       	cp	r30, r18
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <fetch_display_frame+0x1dc>
    2cb6:	60 c0       	rjmp	.+192    	; 0x2d78 <fetch_display_frame+0x29c>
    2cb8:	e9 17       	cp	r30, r25
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <fetch_display_frame+0x1e2>
    2cbc:	5d c0       	rjmp	.+186    	; 0x2d78 <fetch_display_frame+0x29c>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2cbe:	18 96       	adiw	r26, 0x08	; 8
    2cc0:	9c 91       	ld	r25, X
    2cc2:	18 97       	sbiw	r26, 0x08	; 8
    2cc4:	19 96       	adiw	r26, 0x09	; 9
    2cc6:	8c 91       	ld	r24, X
    2cc8:	19 97       	sbiw	r26, 0x09	; 9
    2cca:	98 17       	cp	r25, r24
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <fetch_display_frame+0x1f4>
    2cce:	54 c0       	rjmp	.+168    	; 0x2d78 <fetch_display_frame+0x29c>
    2cd0:	1a 96       	adiw	r26, 0x0a	; 10
    2cd2:	4c 91       	ld	r20, X
    2cd4:	1a 97       	sbiw	r26, 0x0a	; 10
    2cd6:	1b 96       	adiw	r26, 0x0b	; 11
    2cd8:	8c 91       	ld	r24, X
    2cda:	1b 97       	sbiw	r26, 0x0b	; 11
    2cdc:	48 17       	cp	r20, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <fetch_display_frame+0x206>
    2ce0:	4b c0       	rjmp	.+150    	; 0x2d78 <fetch_display_frame+0x29c>
    2ce2:	1c 96       	adiw	r26, 0x0c	; 12
    2ce4:	3c 91       	ld	r19, X
    2ce6:	1c 97       	sbiw	r26, 0x0c	; 12
    2ce8:	1d 96       	adiw	r26, 0x0d	; 13
    2cea:	8c 91       	ld	r24, X
    2cec:	1d 97       	sbiw	r26, 0x0d	; 13
    2cee:	38 17       	cp	r19, r24
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <fetch_display_frame+0x218>
    2cf2:	42 c0       	rjmp	.+132    	; 0x2d78 <fetch_display_frame+0x29c>
    2cf4:	1e 96       	adiw	r26, 0x0e	; 14
    2cf6:	2c 91       	ld	r18, X
    2cf8:	1e 97       	sbiw	r26, 0x0e	; 14
    2cfa:	1f 96       	adiw	r26, 0x0f	; 15
    2cfc:	8c 91       	ld	r24, X
    2cfe:	1f 97       	sbiw	r26, 0x0f	; 15
    2d00:	28 17       	cp	r18, r24
    2d02:	d1 f5       	brne	.+116    	; 0x2d78 <fetch_display_frame+0x29c>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2d04:	94 17       	cp	r25, r20
    2d06:	c1 f5       	brne	.+112    	; 0x2d78 <fetch_display_frame+0x29c>
    2d08:	93 17       	cp	r25, r19
    2d0a:	b1 f5       	brne	.+108    	; 0x2d78 <fetch_display_frame+0x29c>
    2d0c:	92 17       	cp	r25, r18
    2d0e:	a1 f5       	brne	.+104    	; 0x2d78 <fetch_display_frame+0x29c>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2d10:	50 96       	adiw	r26, 0x10	; 16
    2d12:	9c 91       	ld	r25, X
    2d14:	50 97       	sbiw	r26, 0x10	; 16
    2d16:	51 96       	adiw	r26, 0x11	; 17
    2d18:	8c 91       	ld	r24, X
    2d1a:	51 97       	sbiw	r26, 0x11	; 17
    2d1c:	98 17       	cp	r25, r24
    2d1e:	61 f5       	brne	.+88     	; 0x2d78 <fetch_display_frame+0x29c>
    2d20:	52 96       	adiw	r26, 0x12	; 18
    2d22:	4c 91       	ld	r20, X
    2d24:	52 97       	sbiw	r26, 0x12	; 18
    2d26:	53 96       	adiw	r26, 0x13	; 19
    2d28:	8c 91       	ld	r24, X
    2d2a:	53 97       	sbiw	r26, 0x13	; 19
    2d2c:	48 17       	cp	r20, r24
    2d2e:	21 f5       	brne	.+72     	; 0x2d78 <fetch_display_frame+0x29c>
    2d30:	54 96       	adiw	r26, 0x14	; 20
    2d32:	3c 91       	ld	r19, X
    2d34:	54 97       	sbiw	r26, 0x14	; 20
    2d36:	55 96       	adiw	r26, 0x15	; 21
    2d38:	8c 91       	ld	r24, X
    2d3a:	55 97       	sbiw	r26, 0x15	; 21
    2d3c:	38 17       	cp	r19, r24
    2d3e:	e1 f4       	brne	.+56     	; 0x2d78 <fetch_display_frame+0x29c>
    2d40:	56 96       	adiw	r26, 0x16	; 22
    2d42:	2c 91       	ld	r18, X
    2d44:	56 97       	sbiw	r26, 0x16	; 22
    2d46:	57 96       	adiw	r26, 0x17	; 23
    2d48:	8c 91       	ld	r24, X
    2d4a:	57 97       	sbiw	r26, 0x17	; 23
    2d4c:	28 17       	cp	r18, r24
    2d4e:	a1 f4       	brne	.+40     	; 0x2d78 <fetch_display_frame+0x29c>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2d50:	94 17       	cp	r25, r20
    2d52:	91 f4       	brne	.+36     	; 0x2d78 <fetch_display_frame+0x29c>
    2d54:	93 17       	cp	r25, r19
    2d56:	81 f4       	brne	.+32     	; 0x2d78 <fetch_display_frame+0x29c>
    2d58:	92 17       	cp	r25, r18
    2d5a:	71 f4       	brne	.+28     	; 0x2d78 <fetch_display_frame+0x29c>
                                                gscale[0] = FLASH[0];
    2d5c:	eb 83       	std	Y+3, r30	; 0x03
                                                gscale[1] = FLASH[8];
    2d5e:	18 96       	adiw	r26, 0x08	; 8
    2d60:	8c 91       	ld	r24, X
    2d62:	18 97       	sbiw	r26, 0x08	; 8
    2d64:	8c 83       	std	Y+4, r24	; 0x04
                                                gscale[2] = FLASH[16];
    2d66:	50 96       	adiw	r26, 0x10	; 16
    2d68:	8c 91       	ld	r24, X
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    2d6c:	8d 2d       	mov	r24, r13
    2d6e:	63 e0       	ldi	r22, 0x03	; 3
    2d70:	a5 01       	movw	r20, r10
    2d72:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    2d76:	51 e0       	ldi	r21, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    2d78:	80 91 c0 27 	lds	r24, 0x27C0
    2d7c:	80 32       	cpi	r24, 0x20	; 32
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <fetch_display_frame+0x2a6>
    2d80:	bb c0       	rjmp	.+374    	; 0x2ef8 <fetch_display_frame+0x41c>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2d82:	f3 01       	movw	r30, r6
    2d84:	ee 0d       	add	r30, r14
    2d86:	ff 1d       	adc	r31, r15
    2d88:	e0 81       	ld	r30, Z
    2d8a:	d8 01       	movw	r26, r16
    2d8c:	11 96       	adiw	r26, 0x01	; 1
    2d8e:	8c 91       	ld	r24, X
    2d90:	11 97       	sbiw	r26, 0x01	; 1
    2d92:	e8 17       	cp	r30, r24
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <fetch_display_frame+0x2bc>
    2d96:	b0 c0       	rjmp	.+352    	; 0x2ef8 <fetch_display_frame+0x41c>
    2d98:	12 96       	adiw	r26, 0x02	; 2
    2d9a:	3c 91       	ld	r19, X
    2d9c:	12 97       	sbiw	r26, 0x02	; 2
    2d9e:	13 96       	adiw	r26, 0x03	; 3
    2da0:	8c 91       	ld	r24, X
    2da2:	13 97       	sbiw	r26, 0x03	; 3
    2da4:	38 17       	cp	r19, r24
    2da6:	09 f0       	breq	.+2      	; 0x2daa <fetch_display_frame+0x2ce>
    2da8:	a7 c0       	rjmp	.+334    	; 0x2ef8 <fetch_display_frame+0x41c>
    2daa:	14 96       	adiw	r26, 0x04	; 4
    2dac:	2c 91       	ld	r18, X
    2dae:	14 97       	sbiw	r26, 0x04	; 4
    2db0:	15 96       	adiw	r26, 0x05	; 5
    2db2:	8c 91       	ld	r24, X
    2db4:	15 97       	sbiw	r26, 0x05	; 5
    2db6:	28 17       	cp	r18, r24
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <fetch_display_frame+0x2e0>
    2dba:	9e c0       	rjmp	.+316    	; 0x2ef8 <fetch_display_frame+0x41c>
    2dbc:	16 96       	adiw	r26, 0x06	; 6
    2dbe:	9c 91       	ld	r25, X
    2dc0:	16 97       	sbiw	r26, 0x06	; 6
    2dc2:	17 96       	adiw	r26, 0x07	; 7
    2dc4:	8c 91       	ld	r24, X
    2dc6:	17 97       	sbiw	r26, 0x07	; 7
    2dc8:	98 17       	cp	r25, r24
    2dca:	09 f0       	breq	.+2      	; 0x2dce <fetch_display_frame+0x2f2>
    2dcc:	95 c0       	rjmp	.+298    	; 0x2ef8 <fetch_display_frame+0x41c>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2dce:	e3 17       	cp	r30, r19
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <fetch_display_frame+0x2f8>
    2dd2:	92 c0       	rjmp	.+292    	; 0x2ef8 <fetch_display_frame+0x41c>
    2dd4:	e2 17       	cp	r30, r18
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <fetch_display_frame+0x2fe>
    2dd8:	8f c0       	rjmp	.+286    	; 0x2ef8 <fetch_display_frame+0x41c>
    2dda:	e9 17       	cp	r30, r25
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <fetch_display_frame+0x304>
    2dde:	8c c0       	rjmp	.+280    	; 0x2ef8 <fetch_display_frame+0x41c>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2de0:	18 96       	adiw	r26, 0x08	; 8
    2de2:	9c 91       	ld	r25, X
    2de4:	18 97       	sbiw	r26, 0x08	; 8
    2de6:	19 96       	adiw	r26, 0x09	; 9
    2de8:	8c 91       	ld	r24, X
    2dea:	19 97       	sbiw	r26, 0x09	; 9
    2dec:	98 17       	cp	r25, r24
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <fetch_display_frame+0x316>
    2df0:	83 c0       	rjmp	.+262    	; 0x2ef8 <fetch_display_frame+0x41c>
    2df2:	1a 96       	adiw	r26, 0x0a	; 10
    2df4:	4c 91       	ld	r20, X
    2df6:	1a 97       	sbiw	r26, 0x0a	; 10
    2df8:	1b 96       	adiw	r26, 0x0b	; 11
    2dfa:	8c 91       	ld	r24, X
    2dfc:	1b 97       	sbiw	r26, 0x0b	; 11
    2dfe:	48 17       	cp	r20, r24
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <fetch_display_frame+0x328>
    2e02:	7a c0       	rjmp	.+244    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e04:	1c 96       	adiw	r26, 0x0c	; 12
    2e06:	3c 91       	ld	r19, X
    2e08:	1c 97       	sbiw	r26, 0x0c	; 12
    2e0a:	1d 96       	adiw	r26, 0x0d	; 13
    2e0c:	8c 91       	ld	r24, X
    2e0e:	1d 97       	sbiw	r26, 0x0d	; 13
    2e10:	38 17       	cp	r19, r24
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <fetch_display_frame+0x33a>
    2e14:	71 c0       	rjmp	.+226    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e16:	1e 96       	adiw	r26, 0x0e	; 14
    2e18:	2c 91       	ld	r18, X
    2e1a:	1e 97       	sbiw	r26, 0x0e	; 14
    2e1c:	1f 96       	adiw	r26, 0x0f	; 15
    2e1e:	8c 91       	ld	r24, X
    2e20:	1f 97       	sbiw	r26, 0x0f	; 15
    2e22:	28 17       	cp	r18, r24
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <fetch_display_frame+0x34c>
    2e26:	68 c0       	rjmp	.+208    	; 0x2ef8 <fetch_display_frame+0x41c>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2e28:	94 17       	cp	r25, r20
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <fetch_display_frame+0x352>
    2e2c:	65 c0       	rjmp	.+202    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e2e:	93 17       	cp	r25, r19
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <fetch_display_frame+0x358>
    2e32:	62 c0       	rjmp	.+196    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e34:	92 17       	cp	r25, r18
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <fetch_display_frame+0x35e>
    2e38:	5f c0       	rjmp	.+190    	; 0x2ef8 <fetch_display_frame+0x41c>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2e3a:	50 96       	adiw	r26, 0x10	; 16
    2e3c:	9c 91       	ld	r25, X
    2e3e:	50 97       	sbiw	r26, 0x10	; 16
    2e40:	51 96       	adiw	r26, 0x11	; 17
    2e42:	8c 91       	ld	r24, X
    2e44:	51 97       	sbiw	r26, 0x11	; 17
    2e46:	98 17       	cp	r25, r24
    2e48:	09 f0       	breq	.+2      	; 0x2e4c <fetch_display_frame+0x370>
    2e4a:	56 c0       	rjmp	.+172    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e4c:	52 96       	adiw	r26, 0x12	; 18
    2e4e:	4c 91       	ld	r20, X
    2e50:	52 97       	sbiw	r26, 0x12	; 18
    2e52:	53 96       	adiw	r26, 0x13	; 19
    2e54:	8c 91       	ld	r24, X
    2e56:	53 97       	sbiw	r26, 0x13	; 19
    2e58:	48 17       	cp	r20, r24
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <fetch_display_frame+0x382>
    2e5c:	4d c0       	rjmp	.+154    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e5e:	54 96       	adiw	r26, 0x14	; 20
    2e60:	3c 91       	ld	r19, X
    2e62:	54 97       	sbiw	r26, 0x14	; 20
    2e64:	55 96       	adiw	r26, 0x15	; 21
    2e66:	8c 91       	ld	r24, X
    2e68:	55 97       	sbiw	r26, 0x15	; 21
    2e6a:	38 17       	cp	r19, r24
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <fetch_display_frame+0x394>
    2e6e:	44 c0       	rjmp	.+136    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e70:	56 96       	adiw	r26, 0x16	; 22
    2e72:	2c 91       	ld	r18, X
    2e74:	56 97       	sbiw	r26, 0x16	; 22
    2e76:	57 96       	adiw	r26, 0x17	; 23
    2e78:	8c 91       	ld	r24, X
    2e7a:	57 97       	sbiw	r26, 0x17	; 23
    2e7c:	28 17       	cp	r18, r24
    2e7e:	e1 f5       	brne	.+120    	; 0x2ef8 <fetch_display_frame+0x41c>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2e80:	94 17       	cp	r25, r20
    2e82:	d1 f5       	brne	.+116    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e84:	93 17       	cp	r25, r19
    2e86:	c1 f5       	brne	.+112    	; 0x2ef8 <fetch_display_frame+0x41c>
    2e88:	92 17       	cp	r25, r18
    2e8a:	b1 f5       	brne	.+108    	; 0x2ef8 <fetch_display_frame+0x41c>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    2e8c:	58 96       	adiw	r26, 0x18	; 24
    2e8e:	9c 91       	ld	r25, X
    2e90:	58 97       	sbiw	r26, 0x18	; 24
    2e92:	59 96       	adiw	r26, 0x19	; 25
    2e94:	8c 91       	ld	r24, X
    2e96:	59 97       	sbiw	r26, 0x19	; 25
    2e98:	98 17       	cp	r25, r24
    2e9a:	71 f5       	brne	.+92     	; 0x2ef8 <fetch_display_frame+0x41c>
    2e9c:	5a 96       	adiw	r26, 0x1a	; 26
    2e9e:	4c 91       	ld	r20, X
    2ea0:	5a 97       	sbiw	r26, 0x1a	; 26
    2ea2:	5b 96       	adiw	r26, 0x1b	; 27
    2ea4:	8c 91       	ld	r24, X
    2ea6:	5b 97       	sbiw	r26, 0x1b	; 27
    2ea8:	48 17       	cp	r20, r24
    2eaa:	31 f5       	brne	.+76     	; 0x2ef8 <fetch_display_frame+0x41c>
    2eac:	5c 96       	adiw	r26, 0x1c	; 28
    2eae:	3c 91       	ld	r19, X
    2eb0:	5c 97       	sbiw	r26, 0x1c	; 28
    2eb2:	5d 96       	adiw	r26, 0x1d	; 29
    2eb4:	8c 91       	ld	r24, X
    2eb6:	5d 97       	sbiw	r26, 0x1d	; 29
    2eb8:	38 17       	cp	r19, r24
    2eba:	f1 f4       	brne	.+60     	; 0x2ef8 <fetch_display_frame+0x41c>
    2ebc:	5e 96       	adiw	r26, 0x1e	; 30
    2ebe:	2c 91       	ld	r18, X
    2ec0:	5e 97       	sbiw	r26, 0x1e	; 30
    2ec2:	5f 96       	adiw	r26, 0x1f	; 31
    2ec4:	8c 91       	ld	r24, X
    2ec6:	5f 97       	sbiw	r26, 0x1f	; 31
    2ec8:	28 17       	cp	r18, r24
    2eca:	b1 f4       	brne	.+44     	; 0x2ef8 <fetch_display_frame+0x41c>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    2ecc:	94 17       	cp	r25, r20
    2ece:	a1 f4       	brne	.+40     	; 0x2ef8 <fetch_display_frame+0x41c>
    2ed0:	93 17       	cp	r25, r19
    2ed2:	91 f4       	brne	.+36     	; 0x2ef8 <fetch_display_frame+0x41c>
    2ed4:	92 17       	cp	r25, r18
    2ed6:	81 f4       	brne	.+32     	; 0x2ef8 <fetch_display_frame+0x41c>
                                                        gscale[0] = FLASH[0];
    2ed8:	eb 83       	std	Y+3, r30	; 0x03
                                                        gscale[1] = FLASH[8];
    2eda:	18 96       	adiw	r26, 0x08	; 8
    2edc:	8c 91       	ld	r24, X
    2ede:	18 97       	sbiw	r26, 0x08	; 8
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
                                                        gscale[2] = FLASH[16];
    2ee2:	50 96       	adiw	r26, 0x10	; 16
    2ee4:	8c 91       	ld	r24, X
    2ee6:	50 97       	sbiw	r26, 0x10	; 16
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
                                                        gscale[3] = FLASH[24];
    2eea:	58 96       	adiw	r26, 0x18	; 24
    2eec:	8c 91       	ld	r24, X
    2eee:	8e 83       	std	Y+6, r24	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2ef0:	8d 2d       	mov	r24, r13
    2ef2:	64 e0       	ldi	r22, 0x04	; 4
    2ef4:	a5 01       	movw	r20, r10
    2ef6:	06 c0       	rjmp	.+12     	; 0x2f04 <fetch_display_frame+0x428>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    2ef8:	55 23       	and	r21, r21
    2efa:	31 f4       	brne	.+12     	; 0x2f08 <fetch_display_frame+0x42c>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    2efc:	8d 2d       	mov	r24, r13
    2efe:	60 91 c0 27 	lds	r22, 0x27C0
    2f02:	a8 01       	movw	r20, r16
    2f04:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
				FLASH = &frameBuff[buff_index];
				buff_index = buff_index + bytes_per_panel_frame;
    2f08:	ec 0c       	add	r14, r12
    2f0a:	f1 1c       	adc	r15, r1
            }
            
            display_flag = 0;  //clear the display flag
            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2f0c:	d3 94       	inc	r13
    2f0e:	80 91 ee 24 	lds	r24, 0x24EE
    2f12:	8d 15       	cp	r24, r13
    2f14:	08 f0       	brcs	.+2      	; 0x2f18 <fetch_display_frame+0x43c>
    2f16:	66 ce       	rjmp	.-820    	; 0x2be4 <fetch_display_frame+0x108>
    2f18:	4c c0       	rjmp	.+152    	; 0x2fb2 <fetch_display_frame+0x4d6>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    2f1a:	80 91 b1 20 	lds	r24, 0x20B1
    2f1e:	88 23       	and	r24, r24
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <fetch_display_frame+0x448>
    2f22:	47 c0       	rjmp	.+142    	; 0x2fb2 <fetch_display_frame+0x4d6>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    2f24:	83 e4       	ldi	r24, 0x43	; 67
    2f26:	97 e0       	ldi	r25, 0x07	; 7
    2f28:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    2f2c:	ed b7       	in	r30, 0x3d	; 61
    2f2e:	fe b7       	in	r31, 0x3e	; 62
    2f30:	38 97       	sbiw	r30, 0x08	; 8
    2f32:	ed bf       	out	0x3d, r30	; 61
    2f34:	fe bf       	out	0x3e, r31	; 62
    2f36:	31 96       	adiw	r30, 0x01	; 1
    2f38:	85 e2       	ldi	r24, 0x25	; 37
    2f3a:	97 e0       	ldi	r25, 0x07	; 7
    2f3c:	ad b7       	in	r26, 0x3d	; 61
    2f3e:	be b7       	in	r27, 0x3e	; 62
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	8d 93       	st	X+, r24
    2f44:	9c 93       	st	X, r25
    2f46:	12 97       	sbiw	r26, 0x02	; 2
    2f48:	12 83       	std	Z+2, r17	; 0x02
    2f4a:	13 82       	std	Z+3, r1	; 0x03
    2f4c:	a4 82       	std	Z+4, r10	; 0x04
    2f4e:	b5 82       	std	Z+5, r11	; 0x05
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	86 83       	std	Z+6, r24	; 0x06
    2f56:	97 83       	std	Z+7, r25	; 0x07
    2f58:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    2f5c:	ed b7       	in	r30, 0x3d	; 61
    2f5e:	fe b7       	in	r31, 0x3e	; 62
    2f60:	38 96       	adiw	r30, 0x08	; 8
    2f62:	25 c0       	rjmp	.+74     	; 0x2fae <fetch_display_frame+0x4d2>
            }
        }
    } else {
        
        if (quiet_mode_on == 0){
    2f64:	80 91 b1 20 	lds	r24, 0x20B1
    2f68:	88 23       	and	r24, r24
    2f6a:	19 f5       	brne	.+70     	; 0x2fb2 <fetch_display_frame+0x4d6>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    2f6c:	8b ef       	ldi	r24, 0xFB	; 251
    2f6e:	96 e0       	ldi	r25, 0x06	; 6
    2f70:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    2f74:	8d b7       	in	r24, 0x3d	; 61
    2f76:	9e b7       	in	r25, 0x3e	; 62
    2f78:	0a 97       	sbiw	r24, 0x0a	; 10
    2f7a:	8d bf       	out	0x3d, r24	; 61
    2f7c:	9e bf       	out	0x3e, r25	; 62
    2f7e:	ed b7       	in	r30, 0x3d	; 61
    2f80:	fe b7       	in	r31, 0x3e	; 62
    2f82:	31 96       	adiw	r30, 0x01	; 1
    2f84:	88 ed       	ldi	r24, 0xD8	; 216
    2f86:	96 e0       	ldi	r25, 0x06	; 6
    2f88:	ad b7       	in	r26, 0x3d	; 61
    2f8a:	be b7       	in	r27, 0x3e	; 62
    2f8c:	11 96       	adiw	r26, 0x01	; 1
    2f8e:	8d 93       	st	X+, r24
    2f90:	9c 93       	st	X, r25
    2f92:	12 97       	sbiw	r26, 0x02	; 2
    2f94:	92 82       	std	Z+2, r9	; 0x02
    2f96:	13 82       	std	Z+3, r1	; 0x03
    2f98:	a4 82       	std	Z+4, r10	; 0x04
    2f9a:	b5 82       	std	Z+5, r11	; 0x05
    2f9c:	e6 82       	std	Z+6, r14	; 0x06
    2f9e:	f7 82       	std	Z+7, r15	; 0x07
    2fa0:	00 87       	std	Z+8, r16	; 0x08
    2fa2:	11 87       	std	Z+9, r17	; 0x09
    2fa4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    2fa8:	ed b7       	in	r30, 0x3d	; 61
    2faa:	fe b7       	in	r31, 0x3e	; 62
    2fac:	3a 96       	adiw	r30, 0x0a	; 10
    2fae:	ed bf       	out	0x3d, r30	; 61
    2fb0:	fe bf       	out	0x3e, r31	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    2fb2:	80 91 bf 27 	lds	r24, 0x27BF
    2fb6:	85 30       	cpi	r24, 0x05	; 5
    2fb8:	e1 f0       	breq	.+56     	; 0x2ff2 <fetch_display_frame+0x516>
		X_dac_val = ((uint32_t)index_x + 1)*32767/x_num;
    2fba:	60 91 c1 27 	lds	r22, 0x27C1
    2fbe:	70 91 c2 27 	lds	r23, 0x27C2
		analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	6f 5f       	subi	r22, 0xFF	; 255
    2fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fca:	8f 4f       	sbci	r24, 0xFF	; 255
    2fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fce:	2f ef       	ldi	r18, 0xFF	; 255
    2fd0:	3f e7       	ldi	r19, 0x7F	; 127
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    2fda:	20 91 2b 28 	lds	r18, 0x282B
    2fde:	30 91 2c 28 	lds	r19, 0x282C
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	b9 01       	movw	r22, r18
    2fee:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
	}

    
    if (y_mode != 5){
    2ff2:	80 91 09 28 	lds	r24, 0x2809
    2ff6:	85 30       	cpi	r24, 0x05	; 5
    2ff8:	e1 f0       	breq	.+56     	; 0x3032 <fetch_display_frame+0x556>
        Y_dac_val = ((uint32_t)index_y + 1)*32767/y_num; 
    2ffa:	60 91 76 29 	lds	r22, 0x2976
    2ffe:	70 91 77 29 	lds	r23, 0x2977
        analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	6f 5f       	subi	r22, 0xFF	; 255
    3008:	7f 4f       	sbci	r23, 0xFF	; 255
    300a:	8f 4f       	sbci	r24, 0xFF	; 255
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	2f ef       	ldi	r18, 0xFF	; 255
    3010:	3f e7       	ldi	r19, 0x7F	; 127
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    301a:	20 91 af 25 	lds	r18, 0x25AF
    301e:	30 91 b0 25 	lds	r19, 0x25B0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	b9 01       	movw	r22, r18
    302e:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
	
	  //also update the output lines for quadrant-type learning patterns
	  
	  //Chuntao wants the dac2 and dac3 follow the laser map no matter whether laser_active is true or false  4/4/2012

    if (Stop == 0) {
    3032:	80 91 9c 20 	lds	r24, 0x209C
    3036:	88 23       	and	r24, r24
    3038:	09 f0       	breq	.+2      	; 0x303c <fetch_display_frame+0x560>
    303a:	54 c0       	rjmp	.+168    	; 0x30e4 <fetch_display_frame+0x608>
	
		arrayIndex = index_x/8;  // find the index in laserPattern array for index_x
    303c:	00 91 c1 27 	lds	r16, 0x27C1
    3040:	10 91 c2 27 	lds	r17, 0x27C2
		bitIndex = index_x - arrayIndex*8;  // find the bit index in a laserPattern byte for index_x
    3044:	c0 90 c1 27 	lds	r12, 0x27C1
    3048:	d0 90 c2 27 	lds	r13, 0x27C2
    304c:	43 e0       	ldi	r20, 0x03	; 3
    304e:	16 95       	lsr	r17
    3050:	07 95       	ror	r16
    3052:	4a 95       	dec	r20
    3054:	e1 f7       	brne	.-8      	; 0x304e <fetch_display_frame+0x572>
    3056:	10 e0       	ldi	r17, 0x00	; 0

		tempVal = laserPattern[arrayIndex];
    3058:	f8 01       	movw	r30, r16
    305a:	e1 57       	subi	r30, 0x71	; 113
    305c:	f9 4d       	sbci	r31, 0xD9	; 217
    305e:	e0 80       	ld	r14, Z
		
		randNum =  rand()/ (RAND_MAX / 100 + 1); //generate a random number between 0 and 99
    3060:	0e 94 bb 5a 	call	0xb576	; 0xb576 <rand>
    3064:	68 e4       	ldi	r22, 0x48	; 72
    3066:	71 e0       	ldi	r23, 0x01	; 1
    3068:	0e 94 ce 58 	call	0xb19c	; 0xb19c <__divmodhi4>

		if ((tempVal & (1<<(7-bitIndex))) == 0){
    306c:	ff 24       	eor	r15, r15
    306e:	33 e0       	ldi	r19, 0x03	; 3
    3070:	00 0f       	add	r16, r16
    3072:	11 1f       	adc	r17, r17
    3074:	3a 95       	dec	r19
    3076:	e1 f7       	brne	.-8      	; 0x3070 <fetch_display_frame+0x594>
    3078:	c0 1a       	sub	r12, r16
    307a:	87 e0       	ldi	r24, 0x07	; 7
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	8c 19       	sub	r24, r12
    3080:	91 09       	sbc	r25, r1
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <fetch_display_frame+0x5ac>
    3084:	f5 94       	asr	r15
    3086:	e7 94       	ror	r14
    3088:	8a 95       	dec	r24
    308a:	e2 f7       	brpl	.-8      	; 0x3084 <fetch_display_frame+0x5a8>
    308c:	80 91 a0 20 	lds	r24, 0x20A0
    3090:	e0 fc       	sbrc	r14, 0
    3092:	03 c0       	rjmp	.+6      	; 0x309a <fetch_display_frame+0x5be>
			
			if (randNum > probLaser){
    3094:	86 17       	cp	r24, r22
    3096:	a0 f4       	brcc	.+40     	; 0x30c0 <fetch_display_frame+0x5e4>
    3098:	02 c0       	rjmp	.+4      	; 0x309e <fetch_display_frame+0x5c2>
				if (Laser_active == 1) digitalWrite(0,LOW);		
			}
		}
		else{

			if (randNum <= probLaser){
    309a:	86 17       	cp	r24, r22
    309c:	88 f0       	brcs	.+34     	; 0x30c0 <fetch_display_frame+0x5e4>
				analogWrite(2, 16384);   // turn on laser
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	70 e4       	ldi	r23, 0x40	; 64
    30a4:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
				analogWrite(3, 0);  //DAC3 inverse
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	70 e0       	ldi	r23, 0x00	; 0
    30ae:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
				if (Laser_active == 1) digitalWrite(0,HIGH);
    30b2:	80 91 ec 24 	lds	r24, 0x24EC
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	a9 f4       	brne	.+42     	; 0x30e4 <fetch_display_frame+0x608>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	61 e0       	ldi	r22, 0x01	; 1
    30be:	10 c0       	rjmp	.+32     	; 0x30e0 <fetch_display_frame+0x604>
			}
			else{
				analogWrite(2, 0);  // turn off laser
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	60 e0       	ldi	r22, 0x00	; 0
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
				analogWrite(3, 16384);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	70 e4       	ldi	r23, 0x40	; 64
    30d0:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
				if (Laser_active == 1) digitalWrite(0,LOW);
    30d4:	80 91 ec 24 	lds	r24, 0x24EC
    30d8:	81 30       	cpi	r24, 0x01	; 1
    30da:	21 f4       	brne	.+8      	; 0x30e4 <fetch_display_frame+0x608>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
			}
		}
	}

	digitalWrite(1, LOW); // set line low at end of frame write
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
}
    30ec:	4d be       	out	0x3d, r4	; 61
    30ee:	5e be       	out	0x3e, r5	; 62
    30f0:	26 96       	adiw	r28, 0x06	; 6
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	bf 90       	pop	r11
    3108:	af 90       	pop	r10
    310a:	9f 90       	pop	r9
    310c:	7f 90       	pop	r7
    310e:	6f 90       	pop	r6
    3110:	5f 90       	pop	r5
    3112:	4f 90       	pop	r4
    3114:	08 95       	ret

00003116 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e1 e9       	ldi	r30, 0x91	; 145
    311c:	f8 e1       	ldi	r31, 0x18	; 24
    311e:	0c 94 26 59 	jmp	0xb24c	; 0xb24c <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    3128:	20 91 af 25 	lds	r18, 0x25AF
    312c:	30 91 b0 25 	lds	r19, 0x25B0
    3130:	80 91 2b 28 	lds	r24, 0x282B
    3134:	90 91 2c 28 	lds	r25, 0x282C
    3138:	28 9f       	mul	r18, r24
    313a:	50 01       	movw	r10, r0
    313c:	29 9f       	mul	r18, r25
    313e:	b0 0c       	add	r11, r0
    3140:	38 9f       	mul	r19, r24
    3142:	b0 0c       	add	r11, r0
    3144:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    3146:	0e 94 70 56 	call	0xace0	; 0xace0 <timer_coarse_tic>
    314a:	c0 e0       	ldi	r28, 0x00	; 0
    314c:	d0 e0       	ldi	r29, 0x00	; 0
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <benchmark_pattern+0x42>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind);
    3150:	ce 01       	movw	r24, r28
    3152:	0e 94 6e 15 	call	0x2adc	; 0x2adc <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    3156:	21 96       	adiw	r28, 0x01	; 1
    3158:	ca 15       	cp	r28, r10
    315a:	db 05       	cpc	r29, r11
    315c:	c8 f3       	brcs	.-14     	; 0x3150 <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind);
    
    bench_time = timer_coarse_toc();
    315e:	0e 94 85 56 	call	0xad0a	; 0xad0a <timer_coarse_toc>
    3162:	7b 01       	movw	r14, r22
    3164:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    3166:	8d b7       	in	r24, 0x3d	; 61
    3168:	9e b7       	in	r25, 0x3e	; 62
    316a:	08 97       	sbiw	r24, 0x08	; 8
    316c:	8d bf       	out	0x3d, r24	; 61
    316e:	9e bf       	out	0x3e, r25	; 62
    3170:	cd b6       	in	r12, 0x3d	; 61
    3172:	de b6       	in	r13, 0x3e	; 62
    3174:	08 94       	sec
    3176:	c1 1c       	adc	r12, r1
    3178:	d1 1c       	adc	r13, r1
    317a:	82 ea       	ldi	r24, 0xA2	; 162
    317c:	95 e0       	ldi	r25, 0x05	; 5
    317e:	ed b7       	in	r30, 0x3d	; 61
    3180:	fe b7       	in	r31, 0x3e	; 62
    3182:	81 83       	std	Z+1, r24	; 0x01
    3184:	92 83       	std	Z+2, r25	; 0x02
    3186:	f6 01       	movw	r30, r12
    3188:	e2 82       	std	Z+2, r14	; 0x02
    318a:	f3 82       	std	Z+3, r15	; 0x03
    318c:	04 83       	std	Z+4, r16	; 0x04
    318e:	15 83       	std	Z+5, r17	; 0x05
    3190:	b5 01       	movw	r22, r10
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	28 ee       	ldi	r18, 0xE8	; 232
    3198:	33 e0       	ldi	r19, 0x03	; 3
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    31a2:	a8 01       	movw	r20, r16
    31a4:	97 01       	movw	r18, r14
    31a6:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    31aa:	f6 01       	movw	r30, r12
    31ac:	26 83       	std	Z+6, r18	; 0x06
    31ae:	37 83       	std	Z+7, r19	; 0x07
    31b0:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    31b4:	8d b7       	in	r24, 0x3d	; 61
    31b6:	9e b7       	in	r25, 0x3e	; 62
    31b8:	08 96       	adiw	r24, 0x08	; 8
    31ba:	8d bf       	out	0x3d, r24	; 61
    31bc:	9e bf       	out	0x3e, r25	; 62
}
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	ea e0       	ldi	r30, 0x0A	; 10
    31c4:	0c 94 42 59 	jmp	0xb284	; 0xb284 <__epilogue_restores__+0x10>

000031c8 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    31c8:	a2 e0       	ldi	r26, 0x02	; 2
    31ca:	b2 e0       	ldi	r27, 0x02	; 2
    31cc:	ea ee       	ldi	r30, 0xEA	; 234
    31ce:	f8 e1       	ldi	r31, 0x18	; 24
    31d0:	0c 94 2d 59 	jmp	0xb25a	; 0xb25a <__prologue_saves__+0x1e>
    31d4:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    31d6:	8a 30       	cpi	r24, 0x0A	; 10
    31d8:	80 f4       	brcc	.+32     	; 0x31fa <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    31da:	00 d0       	rcall	.+0      	; 0x31dc <set_pattern+0x14>
    31dc:	00 d0       	rcall	.+0      	; 0x31de <set_pattern+0x16>
    31de:	ed b7       	in	r30, 0x3d	; 61
    31e0:	fe b7       	in	r31, 0x3e	; 62
    31e2:	31 96       	adiw	r30, 0x01	; 1
    31e4:	8d e0       	ldi	r24, 0x0D	; 13
    31e6:	95 e2       	ldi	r25, 0x25	; 37
    31e8:	ad b7       	in	r26, 0x3d	; 61
    31ea:	be b7       	in	r27, 0x3e	; 62
    31ec:	11 96       	adiw	r26, 0x01	; 1
    31ee:	8d 93       	st	X+, r24
    31f0:	9c 93       	st	X, r25
    31f2:	12 97       	sbiw	r26, 0x02	; 2
    31f4:	85 e7       	ldi	r24, 0x75	; 117
    31f6:	90 e2       	ldi	r25, 0x20	; 32
    31f8:	1f c0       	rjmp	.+62     	; 0x3238 <set_pattern+0x70>
    31fa:	8d e0       	ldi	r24, 0x0D	; 13
    31fc:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    31fe:	14 36       	cpi	r17, 0x64	; 100
    3200:	70 f4       	brcc	.+28     	; 0x321e <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    3202:	00 d0       	rcall	.+0      	; 0x3204 <set_pattern+0x3c>
    3204:	00 d0       	rcall	.+0      	; 0x3206 <set_pattern+0x3e>
    3206:	ed b7       	in	r30, 0x3d	; 61
    3208:	fe b7       	in	r31, 0x3e	; 62
    320a:	31 96       	adiw	r30, 0x01	; 1
    320c:	ad b7       	in	r26, 0x3d	; 61
    320e:	be b7       	in	r27, 0x3e	; 62
    3210:	11 96       	adiw	r26, 0x01	; 1
    3212:	8d 93       	st	X+, r24
    3214:	9c 93       	st	X, r25
    3216:	12 97       	sbiw	r26, 0x02	; 2
    3218:	83 e8       	ldi	r24, 0x83	; 131
    321a:	90 e2       	ldi	r25, 0x20	; 32
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    321e:	00 d0       	rcall	.+0      	; 0x3220 <set_pattern+0x58>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <set_pattern+0x5a>
    3222:	ed b7       	in	r30, 0x3d	; 61
    3224:	fe b7       	in	r31, 0x3e	; 62
    3226:	31 96       	adiw	r30, 0x01	; 1
    3228:	ad b7       	in	r26, 0x3d	; 61
    322a:	be b7       	in	r27, 0x3e	; 62
    322c:	11 96       	adiw	r26, 0x01	; 1
    322e:	8d 93       	st	X+, r24
    3230:	9c 93       	st	X, r25
    3232:	12 97       	sbiw	r26, 0x02	; 2
    3234:	80 e9       	ldi	r24, 0x90	; 144
    3236:	90 e2       	ldi	r25, 0x20	; 32
    3238:	82 83       	std	Z+2, r24	; 0x02
    323a:	93 83       	std	Z+3, r25	; 0x03
    323c:	14 83       	std	Z+4, r17	; 0x04
    323e:	15 82       	std	Z+5, r1	; 0x05
    3240:	0e 94 e9 5b 	call	0xb7d2	; 0xb7d2 <sprintf>
    3244:	8d b7       	in	r24, 0x3d	; 61
    3246:	9e b7       	in	r25, 0x3e	; 62
    3248:	06 96       	adiw	r24, 0x06	; 6
    324a:	8d bf       	out	0x3d, r24	; 61
    324c:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
   
	
    res = f_close(&file1);
    324e:	88 e7       	ldi	r24, 0x78	; 120
    3250:	99 e2       	ldi	r25, 0x29	; 41
    3252:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    3256:	88 e7       	ldi	r24, 0x78	; 120
    3258:	99 e2       	ldi	r25, 0x29	; 41
    325a:	6d e0       	ldi	r22, 0x0D	; 13
    325c:	75 e2       	ldi	r23, 0x25	; 37
    325e:	41 e0       	ldi	r20, 0x01	; 1
    3260:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
    if (res == FR_OK) {
    3264:	88 23       	and	r24, r24
    3266:	09 f0       	breq	.+2      	; 0x326a <set_pattern+0xa2>
    3268:	a7 c0       	rjmp	.+334    	; 0x33b8 <set_pattern+0x1f0>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    326a:	88 e7       	ldi	r24, 0x78	; 120
    326c:	99 e2       	ldi	r25, 0x29	; 41
    326e:	be 01       	movw	r22, r28
    3270:	6d 5f       	subi	r22, 0xFD	; 253
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	52 e0       	ldi	r21, 0x02	; 2
    3278:	9e 01       	movw	r18, r28
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    3282:	88 23       	and	r24, r24
    3284:	09 f0       	breq	.+2      	; 0x3288 <set_pattern+0xc0>
    3286:	91 c0       	rjmp	.+290    	; 0x33aa <set_pattern+0x1e2>
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	9a 81       	ldd	r25, Y+2	; 0x02
    328c:	80 50       	subi	r24, 0x00	; 0
    328e:	92 40       	sbci	r25, 0x02	; 2
    3290:	09 f0       	breq	.+2      	; 0x3294 <set_pattern+0xcc>
    3292:	8b c0       	rjmp	.+278    	; 0x33aa <set_pattern+0x1e2>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	80 93 2b 28 	sts	0x282B, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    329a:	8c 81       	ldd	r24, Y+4	; 0x04
    329c:	80 93 2c 28 	sts	0x282C, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	80 93 af 25 	sts	0x25AF, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    32a6:	8e 81       	ldd	r24, Y+6	; 0x06
    32a8:	80 93 b0 25 	sts	0x25B0, r24
            num_panels = pattDataBuff[4];
    32ac:	8f 81       	ldd	r24, Y+7	; 0x07
    32ae:	80 93 ee 24 	sts	0x24EE, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    32b2:	98 85       	ldd	r25, Y+8	; 0x08
    32b4:	90 93 3d 27 	sts	0x273D, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    32b8:	89 2f       	mov	r24, r25
    32ba:	8b 50       	subi	r24, 0x0B	; 11
    32bc:	84 30       	cpi	r24, 0x04	; 4
    32be:	48 f4       	brcc	.+18     	; 0x32d2 <set_pattern+0x10a>
                gs_value = gs_value - 10;
    32c0:	9a 50       	subi	r25, 0x0A	; 10
    32c2:	90 93 3d 27 	sts	0x273D, r25
                row_compress = 1;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 b3 25 	sts	0x25B3, r24
                bytes_per_panel_frame = gs_value;
    32cc:	90 93 c0 27 	sts	0x27C0, r25
    32d0:	0b c0       	rjmp	.+22     	; 0x32e8 <set_pattern+0x120>
            }
            else {
                row_compress = 0;
    32d2:	10 92 b3 25 	sts	0x25B3, r1
                bytes_per_panel_frame = gs_value * 8;
    32d6:	89 2f       	mov	r24, r25
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	73 e0       	ldi	r23, 0x03	; 3
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	7a 95       	dec	r23
    32e2:	e1 f7       	brne	.-8      	; 0x32dc <set_pattern+0x114>
    32e4:	80 93 c0 27 	sts	0x27C0, r24
            }
            index_x = index_y = 0;
    32e8:	10 92 76 29 	sts	0x2976, r1
    32ec:	10 92 77 29 	sts	0x2977, r1
    32f0:	80 91 76 29 	lds	r24, 0x2976
    32f4:	90 91 77 29 	lds	r25, 0x2977
    32f8:	80 93 c1 27 	sts	0x27C1, r24
    32fc:	90 93 c2 27 	sts	0x27C2, r25
            frame_num = 0;
    3300:	10 92 ef 24 	sts	0x24EF, r1
    3304:	10 92 f0 24 	sts	0x24F0, r1
            Stop = 1;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    330e:	10 92 ea 24 	sts	0x24EA, r1
            if (quiet_mode_on == 0){
    3312:	80 91 b1 20 	lds	r24, 0x20B1
    3316:	88 23       	and	r24, r24
    3318:	09 f0       	breq	.+2      	; 0x331c <set_pattern+0x154>
    331a:	40 c0       	rjmp	.+128    	; 0x339c <set_pattern+0x1d4>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    331c:	00 d0       	rcall	.+0      	; 0x331e <set_pattern+0x156>
    331e:	0f 92       	push	r0
    3320:	ed b7       	in	r30, 0x3d	; 61
    3322:	fe b7       	in	r31, 0x3e	; 62
    3324:	31 96       	adiw	r30, 0x01	; 1
    3326:	83 ec       	ldi	r24, 0xC3	; 195
    3328:	96 e0       	ldi	r25, 0x06	; 6
    332a:	ad b7       	in	r26, 0x3d	; 61
    332c:	be b7       	in	r27, 0x3e	; 62
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	8d 93       	st	X+, r24
    3332:	9c 93       	st	X, r25
    3334:	12 97       	sbiw	r26, 0x02	; 2
    3336:	12 83       	std	Z+2, r17	; 0x02
    3338:	13 82       	std	Z+3, r1	; 0x03
    333a:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    333e:	8d b7       	in	r24, 0x3d	; 61
    3340:	9e b7       	in	r25, 0x3e	; 62
    3342:	08 97       	sbiw	r24, 0x08	; 8
    3344:	8d bf       	out	0x3d, r24	; 61
    3346:	9e bf       	out	0x3e, r25	; 62
    3348:	ed b7       	in	r30, 0x3d	; 61
    334a:	fe b7       	in	r31, 0x3e	; 62
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	80 e7       	ldi	r24, 0x70	; 112
    3350:	96 e0       	ldi	r25, 0x06	; 6
    3352:	ad b7       	in	r26, 0x3d	; 61
    3354:	be b7       	in	r27, 0x3e	; 62
    3356:	11 96       	adiw	r26, 0x01	; 1
    3358:	8d 93       	st	X+, r24
    335a:	9c 93       	st	X, r25
    335c:	12 97       	sbiw	r26, 0x02	; 2
    335e:	80 91 2b 28 	lds	r24, 0x282B
    3362:	90 91 2c 28 	lds	r25, 0x282C
    3366:	82 83       	std	Z+2, r24	; 0x02
    3368:	93 83       	std	Z+3, r25	; 0x03
    336a:	80 91 af 25 	lds	r24, 0x25AF
    336e:	90 91 b0 25 	lds	r25, 0x25B0
    3372:	84 83       	std	Z+4, r24	; 0x04
    3374:	95 83       	std	Z+5, r25	; 0x05
    3376:	80 91 ee 24 	lds	r24, 0x24EE
    337a:	86 83       	std	Z+6, r24	; 0x06
    337c:	17 82       	std	Z+7, r1	; 0x07
    337e:	80 91 3d 27 	lds	r24, 0x273D
    3382:	80 87       	std	Z+8, r24	; 0x08
    3384:	11 86       	std	Z+9, r1	; 0x09
    3386:	80 91 b3 25 	lds	r24, 0x25B3
    338a:	82 87       	std	Z+10, r24	; 0x0a
    338c:	13 86       	std	Z+11, r1	; 0x0b
    338e:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    3392:	8d b7       	in	r24, 0x3d	; 61
    3394:	9e b7       	in	r25, 0x3e	; 62
    3396:	0c 96       	adiw	r24, 0x0c	; 12
    3398:	8d bf       	out	0x3d, r24	; 61
    339a:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num);
    339c:	80 91 ef 24 	lds	r24, 0x24EF
    33a0:	90 91 f0 24 	lds	r25, 0x24F0
    33a4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <fetch_display_frame>
    33a8:	0f c0       	rjmp	.+30     	; 0x33c8 <set_pattern+0x200>
        } else {
            if (quiet_mode_on == 0)
    33aa:	80 91 b1 20 	lds	r24, 0x20B1
    33ae:	88 23       	and	r24, r24
    33b0:	59 f4       	brne	.+22     	; 0x33c8 <set_pattern+0x200>
                xputs(PSTR("Error reading in pattern file\n"));
    33b2:	81 e5       	ldi	r24, 0x51	; 81
    33b4:	96 e0       	ldi	r25, 0x06	; 6
    33b6:	06 c0       	rjmp	.+12     	; 0x33c4 <set_pattern+0x1fc>
        }
    } else {
        if (quiet_mode_on == 0)
    33b8:	80 91 b1 20 	lds	r24, 0x20B1
    33bc:	88 23       	and	r24, r24
    33be:	21 f4       	brne	.+8      	; 0x33c8 <set_pattern+0x200>
            xputs(PSTR("Error opening pattern file\n"));
    33c0:	85 e3       	ldi	r24, 0x35	; 53
    33c2:	96 e0       	ldi	r25, 0x06	; 6
    33c4:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    }
}
    33c8:	ce 5f       	subi	r28, 0xFE	; 254
    33ca:	dd 4f       	sbci	r29, 0xFD	; 253
    33cc:	e3 e0       	ldi	r30, 0x03	; 3
    33ce:	0c 94 49 59 	jmp	0xb292	; 0xb292 <__epilogue_restores__+0x1e>

000033d2 <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    33d2:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    33d4:	80 81       	ld	r24, Z
    33d6:	80 37       	cpi	r24, 0x70	; 112
    33d8:	21 f0       	breq	.+8      	; 0x33e2 <handle_message_length_5+0x10>
    33da:	81 37       	cpi	r24, 0x71	; 113
    33dc:	09 f0       	breq	.+2      	; 0x33e0 <handle_message_length_5+0xe>
    33de:	b5 c0       	rjmp	.+362    	; 0x354a <handle_message_length_5+0x178>
    33e0:	73 c0       	rjmp	.+230    	; 0x34c8 <handle_message_length_5+0xf6>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    33e2:	92 81       	ldd	r25, Z+2	; 0x02
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	21 81       	ldd	r18, Z+1	; 0x01
    33e8:	82 0f       	add	r24, r18
    33ea:	91 1d       	adc	r25, r1
    33ec:	80 93 c1 27 	sts	0x27C1, r24
    33f0:	90 93 c2 27 	sts	0x27C2, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    33f4:	94 81       	ldd	r25, Z+4	; 0x04
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	23 81       	ldd	r18, Z+3	; 0x03
    33fa:	82 0f       	add	r24, r18
    33fc:	91 1d       	adc	r25, r1
    33fe:	80 93 76 29 	sts	0x2976, r24
    3402:	90 93 77 29 	sts	0x2977, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    3406:	80 91 c1 27 	lds	r24, 0x27C1
    340a:	90 91 c2 27 	lds	r25, 0x27C2
    340e:	80 93 0c 27 	sts	0x270C, r24
    3412:	90 93 0d 27 	sts	0x270D, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    3416:	80 91 76 29 	lds	r24, 0x2976
    341a:	90 91 77 29 	lds	r25, 0x2977
    341e:	80 93 7c 26 	sts	0x267C, r24
    3422:	90 93 7d 26 	sts	0x267D, r25
            frame_num = index_y* x_num + index_x;
    3426:	20 91 76 29 	lds	r18, 0x2976
    342a:	30 91 77 29 	lds	r19, 0x2977
    342e:	40 91 c1 27 	lds	r20, 0x27C1
    3432:	50 91 c2 27 	lds	r21, 0x27C2
    3436:	80 91 2b 28 	lds	r24, 0x282B
    343a:	90 91 2c 28 	lds	r25, 0x282C
    343e:	bc 01       	movw	r22, r24
    3440:	26 9f       	mul	r18, r22
    3442:	c0 01       	movw	r24, r0
    3444:	27 9f       	mul	r18, r23
    3446:	90 0d       	add	r25, r0
    3448:	36 9f       	mul	r19, r22
    344a:	90 0d       	add	r25, r0
    344c:	11 24       	eor	r1, r1
    344e:	84 0f       	add	r24, r20
    3450:	95 1f       	adc	r25, r21
    3452:	80 93 ef 24 	sts	0x24EF, r24
    3456:	90 93 f0 24 	sts	0x24F0, r25
            display_flag = 0;  //clear the display flag
    345a:	10 92 ea 24 	sts	0x24EA, r1
            if (quiet_mode_on == 0)
    345e:	80 91 b1 20 	lds	r24, 0x20B1
    3462:	88 23       	and	r24, r24
    3464:	51 f5       	brne	.+84     	; 0x34ba <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    3466:	20 91 c1 27 	lds	r18, 0x27C1
    346a:	30 91 c2 27 	lds	r19, 0x27C2
    346e:	40 91 76 29 	lds	r20, 0x2976
    3472:	50 91 77 29 	lds	r21, 0x2977
    3476:	60 91 ef 24 	lds	r22, 0x24EF
    347a:	70 91 f0 24 	lds	r23, 0x24F0
    347e:	8d b7       	in	r24, 0x3d	; 61
    3480:	9e b7       	in	r25, 0x3e	; 62
    3482:	08 97       	sbiw	r24, 0x08	; 8
    3484:	8d bf       	out	0x3d, r24	; 61
    3486:	9e bf       	out	0x3e, r25	; 62
    3488:	ed b7       	in	r30, 0x3d	; 61
    348a:	fe b7       	in	r31, 0x3e	; 62
    348c:	31 96       	adiw	r30, 0x01	; 1
    348e:	8f ec       	ldi	r24, 0xCF	; 207
    3490:	97 e0       	ldi	r25, 0x07	; 7
    3492:	ad b7       	in	r26, 0x3d	; 61
    3494:	be b7       	in	r27, 0x3e	; 62
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	8d 93       	st	X+, r24
    349a:	9c 93       	st	X, r25
    349c:	12 97       	sbiw	r26, 0x02	; 2
    349e:	22 83       	std	Z+2, r18	; 0x02
    34a0:	33 83       	std	Z+3, r19	; 0x03
    34a2:	44 83       	std	Z+4, r20	; 0x04
    34a4:	55 83       	std	Z+5, r21	; 0x05
    34a6:	66 83       	std	Z+6, r22	; 0x06
    34a8:	77 83       	std	Z+7, r23	; 0x07
    34aa:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    34ae:	6d b7       	in	r22, 0x3d	; 61
    34b0:	7e b7       	in	r23, 0x3e	; 62
    34b2:	68 5f       	subi	r22, 0xF8	; 248
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	6d bf       	out	0x3d, r22	; 61
    34b8:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num);
    34ba:	80 91 ef 24 	lds	r24, 0x24EF
    34be:	90 91 f0 24 	lds	r25, 0x24F0
    34c2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <fetch_display_frame>
    34c6:	08 95       	ret
            break;
            
        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    34c8:	51 81       	ldd	r21, Z+1	; 0x01
    34ca:	50 93 0a 28 	sts	0x280A, r21
            bias_x = msg_buffer[2];
    34ce:	42 81       	ldd	r20, Z+2	; 0x02
    34d0:	40 93 9f 25 	sts	0x259F, r20
            gain_y = msg_buffer[3];
    34d4:	33 81       	ldd	r19, Z+3	; 0x03
    34d6:	30 93 c3 27 	sts	0x27C3, r19
            bias_y = msg_buffer[4];
    34da:	24 81       	ldd	r18, Z+4	; 0x04
    34dc:	20 93 da 2b 	sts	0x2BDA, r18
			if (quiet_mode_on == 0)
    34e0:	80 91 b1 20 	lds	r24, 0x20B1
    34e4:	88 23       	and	r24, r24
    34e6:	b9 f5       	brne	.+110    	; 0x3556 <handle_message_length_5+0x184>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    34e8:	8d b7       	in	r24, 0x3d	; 61
    34ea:	9e b7       	in	r25, 0x3e	; 62
    34ec:	0a 97       	sbiw	r24, 0x0a	; 10
    34ee:	8d bf       	out	0x3d, r24	; 61
    34f0:	9e bf       	out	0x3e, r25	; 62
    34f2:	ed b7       	in	r30, 0x3d	; 61
    34f4:	fe b7       	in	r31, 0x3e	; 62
    34f6:	31 96       	adiw	r30, 0x01	; 1
    34f8:	80 e9       	ldi	r24, 0x90	; 144
    34fa:	97 e0       	ldi	r25, 0x07	; 7
    34fc:	ad b7       	in	r26, 0x3d	; 61
    34fe:	be b7       	in	r27, 0x3e	; 62
    3500:	11 96       	adiw	r26, 0x01	; 1
    3502:	8d 93       	st	X+, r24
    3504:	9c 93       	st	X, r25
    3506:	12 97       	sbiw	r26, 0x02	; 2
    3508:	85 2f       	mov	r24, r21
    350a:	99 27       	eor	r25, r25
    350c:	87 fd       	sbrc	r24, 7
    350e:	90 95       	com	r25
    3510:	82 83       	std	Z+2, r24	; 0x02
    3512:	93 83       	std	Z+3, r25	; 0x03
    3514:	84 2f       	mov	r24, r20
    3516:	99 27       	eor	r25, r25
    3518:	87 fd       	sbrc	r24, 7
    351a:	90 95       	com	r25
    351c:	84 83       	std	Z+4, r24	; 0x04
    351e:	95 83       	std	Z+5, r25	; 0x05
    3520:	83 2f       	mov	r24, r19
    3522:	99 27       	eor	r25, r25
    3524:	87 fd       	sbrc	r24, 7
    3526:	90 95       	com	r25
    3528:	86 83       	std	Z+6, r24	; 0x06
    352a:	97 83       	std	Z+7, r25	; 0x07
    352c:	82 2f       	mov	r24, r18
    352e:	99 27       	eor	r25, r25
    3530:	87 fd       	sbrc	r24, 7
    3532:	90 95       	com	r25
    3534:	80 87       	std	Z+8, r24	; 0x08
    3536:	91 87       	std	Z+9, r25	; 0x09
    3538:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    353c:	6d b7       	in	r22, 0x3d	; 61
    353e:	7e b7       	in	r23, 0x3e	; 62
    3540:	66 5f       	subi	r22, 0xF6	; 246
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	6d bf       	out	0x3d, r22	; 61
    3546:	7e bf       	out	0x3e, r23	; 62
    3548:	08 95       	ret
            break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	68 e0       	ldi	r22, 0x08	; 8
    354e:	46 ee       	ldi	r20, 0xE6	; 230
    3550:	50 e2       	ldi	r21, 0x20	; 32
    3552:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    3556:	08 95       	ret

00003558 <handle_message_length_2>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    3558:	1f 93       	push	r17
    355a:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    355c:	11 81       	ldd	r17, Z+1	; 0x01
    switch(msg_buffer[0]) {
    355e:	80 81       	ld	r24, Z
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	fc 01       	movw	r30, r24
    3564:	31 97       	sbiw	r30, 0x01	; 1
    3566:	e2 31       	cpi	r30, 0x12	; 18
    3568:	f1 05       	cpc	r31, r1
    356a:	08 f0       	brcs	.+2      	; 0x356e <handle_message_length_2+0x16>
    356c:	5f c0       	rjmp	.+190    	; 0x362c <handle_message_length_2+0xd4>
    356e:	e6 50       	subi	r30, 0x06	; 6
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	0c 94 55 59 	jmp	0xb2aa	; 0xb2aa <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    3576:	81 2f       	mov	r24, r17
    3578:	62 e0       	ldi	r22, 0x02	; 2
    357a:	4e ef       	ldi	r20, 0xFE	; 254
    357c:	50 e2       	ldi	r21, 0x20	; 32
    357e:	5a c0       	rjmp	.+180    	; 0x3634 <handle_message_length_2+0xdc>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    3580:	81 2f       	mov	r24, r17
    3582:	62 e0       	ldi	r22, 0x02	; 2
    3584:	40 e0       	ldi	r20, 0x00	; 0
    3586:	51 e2       	ldi	r21, 0x21	; 33
    3588:	55 c0       	rjmp	.+170    	; 0x3634 <handle_message_length_2+0xdc>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    358a:	81 2f       	mov	r24, r17
    358c:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <set_pattern>
    3590:	53 c0       	rjmp	.+166    	; 0x3638 <handle_message_length_2+0xe0>
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3592:	81 2f       	mov	r24, r17
    3594:	0e 94 94 23 	call	0x4728	; 0x4728 <test_ADC>
    3598:	4f c0       	rjmp	.+158    	; 0x3638 <handle_message_length_2+0xe0>
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    359a:	81 2f       	mov	r24, r17
    359c:	0e 94 38 23 	call	0x4670	; 0x4670 <test_DIO>
    35a0:	4b c0       	rjmp	.+150    	; 0x3638 <handle_message_length_2+0xe0>
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    35a2:	81 2f       	mov	r24, r17
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	80 93 a7 20 	sts	0x20A7, r24
    35ae:	90 93 a8 20 	sts	0x20A8, r25
    35b2:	42 c0       	rjmp	.+132    	; 0x3638 <handle_message_length_2+0xe0>
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    35b4:	81 2f       	mov	r24, r17
    35b6:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <flash_panel>
    35ba:	3e c0       	rjmp	.+124    	; 0x3638 <handle_message_length_2+0xe0>
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    35bc:	81 2f       	mov	r24, r17
    35be:	0e 94 00 27 	call	0x4e00	; 0x4e00 <eeprom_panel>
    35c2:	3a c0       	rjmp	.+116    	; 0x3638 <handle_message_length_2+0xe0>
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    35c4:	81 2f       	mov	r24, r17
    35c6:	0e 94 b5 10 	call	0x216a	; 0x216a <set_hwConfig>
    35ca:	36 c0       	rjmp	.+108    	; 0x3638 <handle_message_length_2+0xe0>
            break;	
			
		case 0x10:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    35cc:	81 2f       	mov	r24, r17
    35ce:	81 50       	subi	r24, 0x01	; 1
    35d0:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
    35d4:	00 d0       	rcall	.+0      	; 0x35d6 <handle_message_length_2+0x7e>
    35d6:	0f 92       	push	r0
    35d8:	23 e6       	ldi	r18, 0x63	; 99
    35da:	38 e0       	ldi	r19, 0x08	; 8
    35dc:	ad b7       	in	r26, 0x3d	; 61
    35de:	be b7       	in	r27, 0x3e	; 62
    35e0:	11 96       	adiw	r26, 0x01	; 1
    35e2:	2d 93       	st	X+, r18
    35e4:	3c 93       	st	X, r19
    35e6:	12 97       	sbiw	r26, 0x02	; 2
    35e8:	13 96       	adiw	r26, 0x03	; 3
    35ea:	8d 93       	st	X+, r24
    35ec:	9c 93       	st	X, r25
    35ee:	14 97       	sbiw	r26, 0x04	; 4
    35f0:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    35f4:	16 c0       	rjmp	.+44     	; 0x3622 <handle_message_length_2+0xca>
            break;	
			
		case 0x11: //set g_V_max value	
			g_v_max = argument_byte;
    35f6:	10 93 9d 20 	sts	0x209D, r17
    35fa:	1e c0       	rjmp	.+60     	; 0x3638 <handle_message_length_2+0xe0>
			break;
			
		case 0x12: //set probLaser value, should be a value between 0 and 100	
		    xprintf(PSTR("probLaser =  %d:\n"), argument_byte);
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <handle_message_length_2+0xa6>
    35fe:	0f 92       	push	r0
    3600:	ed b7       	in	r30, 0x3d	; 61
    3602:	fe b7       	in	r31, 0x3e	; 62
    3604:	31 96       	adiw	r30, 0x01	; 1
    3606:	81 e5       	ldi	r24, 0x51	; 81
    3608:	98 e0       	ldi	r25, 0x08	; 8
    360a:	ad b7       	in	r26, 0x3d	; 61
    360c:	be b7       	in	r27, 0x3e	; 62
    360e:	11 96       	adiw	r26, 0x01	; 1
    3610:	8d 93       	st	X+, r24
    3612:	9c 93       	st	X, r25
    3614:	12 97       	sbiw	r26, 0x02	; 2
    3616:	12 83       	std	Z+2, r17	; 0x02
    3618:	13 82       	std	Z+3, r1	; 0x03
    361a:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
		    probLaser = argument_byte;
    361e:	10 93 a0 20 	sts	0x20A0, r17
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	06 c0       	rjmp	.+12     	; 0x3638 <handle_message_length_2+0xe0>
			break;	
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	68 e0       	ldi	r22, 0x08	; 8
    3630:	4e ec       	ldi	r20, 0xCE	; 206
    3632:	50 e2       	ldi	r21, 0x20	; 32
    3634:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    }
}
    3638:	1f 91       	pop	r17
    363a:	08 95       	ret

0000363c <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    363c:	a2 e0       	ldi	r26, 0x02	; 2
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e4 e2       	ldi	r30, 0x24	; 36
    3642:	fb e1       	ldi	r31, 0x1B	; 27
    3644:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    3648:	fc 01       	movw	r30, r24
    uint8_t CMD[2];
    uint8_t i;
    
    switch(msg_buffer[0]) {
    364a:	e0 81       	ld	r30, Z
    364c:	e5 34       	cpi	r30, 0x45	; 69
    364e:	09 f4       	brne	.+2      	; 0x3652 <handle_message_length_1+0x16>
    3650:	16 c2       	rjmp	.+1068   	; 0x3a7e <handle_message_length_1+0x442>
    3652:	e6 34       	cpi	r30, 0x46	; 70
    3654:	08 f0       	brcs	.+2      	; 0x3658 <handle_message_length_1+0x1c>
    3656:	58 c0       	rjmp	.+176    	; 0x3708 <handle_message_length_1+0xcc>
    3658:	e9 31       	cpi	r30, 0x19	; 25
    365a:	09 f4       	brne	.+2      	; 0x365e <handle_message_length_1+0x22>
    365c:	c8 c2       	rjmp	.+1424   	; 0x3bee <handle_message_length_1+0x5b2>
    365e:	ea 31       	cpi	r30, 0x1A	; 26
    3660:	40 f5       	brcc	.+80     	; 0x36b2 <handle_message_length_1+0x76>
    3662:	e3 31       	cpi	r30, 0x13	; 19
    3664:	09 f4       	brne	.+2      	; 0x3668 <handle_message_length_1+0x2c>
    3666:	87 c2       	rjmp	.+1294   	; 0x3b76 <handle_message_length_1+0x53a>
    3668:	e4 31       	cpi	r30, 0x14	; 20
    366a:	80 f4       	brcc	.+32     	; 0x368c <handle_message_length_1+0x50>
    366c:	e0 31       	cpi	r30, 0x10	; 16
    366e:	09 f4       	brne	.+2      	; 0x3672 <handle_message_length_1+0x36>
    3670:	73 c2       	rjmp	.+1254   	; 0x3b58 <handle_message_length_1+0x51c>
    3672:	e1 31       	cpi	r30, 0x11	; 17
    3674:	20 f4       	brcc	.+8      	; 0x367e <handle_message_length_1+0x42>
    3676:	ee 23       	and	r30, r30
    3678:	09 f4       	brne	.+2      	; 0x367c <handle_message_length_1+0x40>
    367a:	e3 c1       	rjmp	.+966    	; 0x3a42 <handle_message_length_1+0x406>
    367c:	22 c3       	rjmp	.+1604   	; 0x3cc2 <handle_message_length_1+0x686>
    367e:	e1 31       	cpi	r30, 0x11	; 17
    3680:	09 f4       	brne	.+2      	; 0x3684 <handle_message_length_1+0x48>
    3682:	6e c2       	rjmp	.+1244   	; 0x3b60 <handle_message_length_1+0x524>
    3684:	e2 31       	cpi	r30, 0x12	; 18
    3686:	09 f0       	breq	.+2      	; 0x368a <handle_message_length_1+0x4e>
    3688:	1c c3       	rjmp	.+1592   	; 0x3cc2 <handle_message_length_1+0x686>
    368a:	71 c2       	rjmp	.+1250   	; 0x3b6e <handle_message_length_1+0x532>
    368c:	e6 31       	cpi	r30, 0x16	; 22
    368e:	09 f4       	brne	.+2      	; 0x3692 <handle_message_length_1+0x56>
    3690:	8f c2       	rjmp	.+1310   	; 0x3bb0 <handle_message_length_1+0x574>
    3692:	e7 31       	cpi	r30, 0x17	; 23
    3694:	38 f4       	brcc	.+14     	; 0x36a4 <handle_message_length_1+0x68>
    3696:	e4 31       	cpi	r30, 0x14	; 20
    3698:	09 f4       	brne	.+2      	; 0x369c <handle_message_length_1+0x60>
    369a:	70 c2       	rjmp	.+1248   	; 0x3b7c <handle_message_length_1+0x540>
    369c:	e5 31       	cpi	r30, 0x15	; 21
    369e:	09 f0       	breq	.+2      	; 0x36a2 <handle_message_length_1+0x66>
    36a0:	10 c3       	rjmp	.+1568   	; 0x3cc2 <handle_message_length_1+0x686>
    36a2:	6f c2       	rjmp	.+1246   	; 0x3b82 <handle_message_length_1+0x546>
    36a4:	e7 31       	cpi	r30, 0x17	; 23
    36a6:	09 f4       	brne	.+2      	; 0x36aa <handle_message_length_1+0x6e>
    36a8:	9b c2       	rjmp	.+1334   	; 0x3be0 <handle_message_length_1+0x5a4>
    36aa:	e8 31       	cpi	r30, 0x18	; 24
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <handle_message_length_1+0x74>
    36ae:	09 c3       	rjmp	.+1554   	; 0x3cc2 <handle_message_length_1+0x686>
    36b0:	9b c2       	rjmp	.+1334   	; 0x3be8 <handle_message_length_1+0x5ac>
    36b2:	e5 33       	cpi	r30, 0x35	; 53
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <handle_message_length_1+0x7c>
    36b6:	7b c1       	rjmp	.+758    	; 0x39ae <handle_message_length_1+0x372>
    36b8:	e6 33       	cpi	r30, 0x36	; 54
    36ba:	98 f4       	brcc	.+38     	; 0x36e2 <handle_message_length_1+0xa6>
    36bc:	e2 32       	cpi	r30, 0x22	; 34
    36be:	09 f4       	brne	.+2      	; 0x36c2 <handle_message_length_1+0x86>
    36c0:	ee c2       	rjmp	.+1500   	; 0x3c9e <handle_message_length_1+0x662>
    36c2:	e3 32       	cpi	r30, 0x23	; 35
    36c4:	38 f4       	brcc	.+14     	; 0x36d4 <handle_message_length_1+0x98>
    36c6:	e0 32       	cpi	r30, 0x20	; 32
    36c8:	09 f4       	brne	.+2      	; 0x36cc <handle_message_length_1+0x90>
    36ca:	73 c0       	rjmp	.+230    	; 0x37b2 <handle_message_length_1+0x176>
    36cc:	e1 32       	cpi	r30, 0x21	; 33
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <handle_message_length_1+0x96>
    36d0:	f8 c2       	rjmp	.+1520   	; 0x3cc2 <handle_message_length_1+0x686>
    36d2:	d5 c2       	rjmp	.+1450   	; 0x3c7e <handle_message_length_1+0x642>
    36d4:	e5 32       	cpi	r30, 0x25	; 37
    36d6:	09 f4       	brne	.+2      	; 0x36da <handle_message_length_1+0x9e>
    36d8:	09 c1       	rjmp	.+530    	; 0x38ec <handle_message_length_1+0x2b0>
    36da:	e0 33       	cpi	r30, 0x30	; 48
    36dc:	09 f0       	breq	.+2      	; 0x36e0 <handle_message_length_1+0xa4>
    36de:	f1 c2       	rjmp	.+1506   	; 0x3cc2 <handle_message_length_1+0x686>
    36e0:	b7 c0       	rjmp	.+366    	; 0x3850 <handle_message_length_1+0x214>
    36e2:	e2 34       	cpi	r30, 0x42	; 66
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <handle_message_length_1+0xac>
    36e6:	bc c1       	rjmp	.+888    	; 0x3a60 <handle_message_length_1+0x424>
    36e8:	e3 34       	cpi	r30, 0x43	; 67
    36ea:	38 f4       	brcc	.+14     	; 0x36fa <handle_message_length_1+0xbe>
    36ec:	e0 34       	cpi	r30, 0x40	; 64
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <handle_message_length_1+0xb6>
    36f0:	ad c1       	rjmp	.+858    	; 0x3a4c <handle_message_length_1+0x410>
    36f2:	e1 34       	cpi	r30, 0x41	; 65
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <handle_message_length_1+0xbc>
    36f6:	e5 c2       	rjmp	.+1482   	; 0x3cc2 <handle_message_length_1+0x686>
    36f8:	ae c1       	rjmp	.+860    	; 0x3a56 <handle_message_length_1+0x41a>
    36fa:	e3 34       	cpi	r30, 0x43	; 67
    36fc:	09 f4       	brne	.+2      	; 0x3700 <handle_message_length_1+0xc4>
    36fe:	b5 c1       	rjmp	.+874    	; 0x3a6a <handle_message_length_1+0x42e>
    3700:	e4 34       	cpi	r30, 0x44	; 68
    3702:	09 f0       	breq	.+2      	; 0x3706 <handle_message_length_1+0xca>
    3704:	de c2       	rjmp	.+1468   	; 0x3cc2 <handle_message_length_1+0x686>
    3706:	b6 c1       	rjmp	.+876    	; 0x3a74 <handle_message_length_1+0x438>
    3708:	e5 39       	cpi	r30, 0x95	; 149
    370a:	09 f4       	brne	.+2      	; 0x370e <handle_message_length_1+0xd2>
    370c:	ee c1       	rjmp	.+988    	; 0x3aea <handle_message_length_1+0x4ae>
    370e:	e6 39       	cpi	r30, 0x96	; 150
    3710:	28 f5       	brcc	.+74     	; 0x375c <handle_message_length_1+0x120>
    3712:	e0 37       	cpi	r30, 0x70	; 112
    3714:	09 f4       	brne	.+2      	; 0x3718 <handle_message_length_1+0xdc>
    3716:	cd c1       	rjmp	.+922    	; 0x3ab2 <handle_message_length_1+0x476>
    3718:	e1 37       	cpi	r30, 0x71	; 113
    371a:	68 f4       	brcc	.+26     	; 0x3736 <handle_message_length_1+0xfa>
    371c:	e7 34       	cpi	r30, 0x47	; 71
    371e:	09 f4       	brne	.+2      	; 0x3722 <handle_message_length_1+0xe6>
    3720:	b8 c1       	rjmp	.+880    	; 0x3a92 <handle_message_length_1+0x456>
    3722:	e7 34       	cpi	r30, 0x47	; 71
    3724:	08 f4       	brcc	.+2      	; 0x3728 <handle_message_length_1+0xec>
    3726:	b0 c1       	rjmp	.+864    	; 0x3a88 <handle_message_length_1+0x44c>
    3728:	e0 35       	cpi	r30, 0x50	; 80
    372a:	09 f4       	brne	.+2      	; 0x372e <handle_message_length_1+0xf2>
    372c:	bc c1       	rjmp	.+888    	; 0x3aa6 <handle_message_length_1+0x46a>
    372e:	e0 36       	cpi	r30, 0x60	; 96
    3730:	09 f0       	breq	.+2      	; 0x3734 <handle_message_length_1+0xf8>
    3732:	c7 c2       	rjmp	.+1422   	; 0x3cc2 <handle_message_length_1+0x686>
    3734:	bb c1       	rjmp	.+886    	; 0x3aac <handle_message_length_1+0x470>
    3736:	e2 39       	cpi	r30, 0x92	; 146
    3738:	09 f4       	brne	.+2      	; 0x373c <handle_message_length_1+0x100>
    373a:	c8 c1       	rjmp	.+912    	; 0x3acc <handle_message_length_1+0x490>
    373c:	e3 39       	cpi	r30, 0x93	; 147
    373e:	38 f4       	brcc	.+14     	; 0x374e <handle_message_length_1+0x112>
    3740:	e0 39       	cpi	r30, 0x90	; 144
    3742:	09 f4       	brne	.+2      	; 0x3746 <handle_message_length_1+0x10a>
    3744:	b9 c1       	rjmp	.+882    	; 0x3ab8 <handle_message_length_1+0x47c>
    3746:	e1 39       	cpi	r30, 0x91	; 145
    3748:	09 f0       	breq	.+2      	; 0x374c <handle_message_length_1+0x110>
    374a:	bb c2       	rjmp	.+1398   	; 0x3cc2 <handle_message_length_1+0x686>
    374c:	ba c1       	rjmp	.+884    	; 0x3ac2 <handle_message_length_1+0x486>
    374e:	e3 39       	cpi	r30, 0x93	; 147
    3750:	09 f4       	brne	.+2      	; 0x3754 <handle_message_length_1+0x118>
    3752:	c1 c1       	rjmp	.+898    	; 0x3ad6 <handle_message_length_1+0x49a>
    3754:	e4 39       	cpi	r30, 0x94	; 148
    3756:	09 f0       	breq	.+2      	; 0x375a <handle_message_length_1+0x11e>
    3758:	b4 c2       	rjmp	.+1384   	; 0x3cc2 <handle_message_length_1+0x686>
    375a:	c2 c1       	rjmp	.+900    	; 0x3ae0 <handle_message_length_1+0x4a4>
    375c:	eb 39       	cpi	r30, 0x9B	; 155
    375e:	09 f4       	brne	.+2      	; 0x3762 <handle_message_length_1+0x126>
    3760:	e2 c1       	rjmp	.+964    	; 0x3b26 <handle_message_length_1+0x4ea>
    3762:	ec 39       	cpi	r30, 0x9C	; 156
    3764:	98 f4       	brcc	.+38     	; 0x378c <handle_message_length_1+0x150>
    3766:	e8 39       	cpi	r30, 0x98	; 152
    3768:	09 f4       	brne	.+2      	; 0x376c <handle_message_length_1+0x130>
    376a:	ce c1       	rjmp	.+924    	; 0x3b08 <handle_message_length_1+0x4cc>
    376c:	e9 39       	cpi	r30, 0x99	; 153
    376e:	38 f4       	brcc	.+14     	; 0x377e <handle_message_length_1+0x142>
    3770:	e6 39       	cpi	r30, 0x96	; 150
    3772:	09 f4       	brne	.+2      	; 0x3776 <handle_message_length_1+0x13a>
    3774:	bf c1       	rjmp	.+894    	; 0x3af4 <handle_message_length_1+0x4b8>
    3776:	e7 39       	cpi	r30, 0x97	; 151
    3778:	09 f0       	breq	.+2      	; 0x377c <handle_message_length_1+0x140>
    377a:	a3 c2       	rjmp	.+1350   	; 0x3cc2 <handle_message_length_1+0x686>
    377c:	c0 c1       	rjmp	.+896    	; 0x3afe <handle_message_length_1+0x4c2>
    377e:	e9 39       	cpi	r30, 0x99	; 153
    3780:	09 f4       	brne	.+2      	; 0x3784 <handle_message_length_1+0x148>
    3782:	c7 c1       	rjmp	.+910    	; 0x3b12 <handle_message_length_1+0x4d6>
    3784:	ea 39       	cpi	r30, 0x9A	; 154
    3786:	09 f0       	breq	.+2      	; 0x378a <handle_message_length_1+0x14e>
    3788:	9c c2       	rjmp	.+1336   	; 0x3cc2 <handle_message_length_1+0x686>
    378a:	c8 c1       	rjmp	.+912    	; 0x3b1c <handle_message_length_1+0x4e0>
    378c:	ee 39       	cpi	r30, 0x9E	; 158
    378e:	09 f4       	brne	.+2      	; 0x3792 <handle_message_length_1+0x156>
    3790:	d9 c1       	rjmp	.+946    	; 0x3b44 <handle_message_length_1+0x508>
    3792:	ef 39       	cpi	r30, 0x9F	; 159
    3794:	38 f4       	brcc	.+14     	; 0x37a4 <handle_message_length_1+0x168>
    3796:	ec 39       	cpi	r30, 0x9C	; 156
    3798:	09 f4       	brne	.+2      	; 0x379c <handle_message_length_1+0x160>
    379a:	ca c1       	rjmp	.+916    	; 0x3b30 <handle_message_length_1+0x4f4>
    379c:	ed 39       	cpi	r30, 0x9D	; 157
    379e:	09 f0       	breq	.+2      	; 0x37a2 <handle_message_length_1+0x166>
    37a0:	90 c2       	rjmp	.+1312   	; 0x3cc2 <handle_message_length_1+0x686>
    37a2:	cb c1       	rjmp	.+918    	; 0x3b3a <handle_message_length_1+0x4fe>
    37a4:	ef 39       	cpi	r30, 0x9F	; 159
    37a6:	09 f4       	brne	.+2      	; 0x37aa <handle_message_length_1+0x16e>
    37a8:	d2 c1       	rjmp	.+932    	; 0x3b4e <handle_message_length_1+0x512>
    37aa:	ef 3f       	cpi	r30, 0xFF	; 255
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <handle_message_length_1+0x174>
    37ae:	89 c2       	rjmp	.+1298   	; 0x3cc2 <handle_message_length_1+0x686>
    37b0:	75 c1       	rjmp	.+746    	; 0x3a9c <handle_message_length_1+0x460>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_global_counter_x = 0;
    37b2:	10 92 f5 24 	sts	0x24F5, r1
    37b6:	10 92 f6 24 	sts	0x24F6, r1
    37ba:	10 92 f7 24 	sts	0x24F7, r1
    37be:	10 92 f8 24 	sts	0x24F8, r1
			func_global_counter_y = 0;
    37c2:	10 92 f9 24 	sts	0x24F9, r1
    37c6:	10 92 fa 24 	sts	0x24FA, r1
    37ca:	10 92 fb 24 	sts	0x24FB, r1
    37ce:	10 92 fc 24 	sts	0x24FC, r1
			function_counter_x = 0;
    37d2:	10 92 f1 24 	sts	0x24F1, r1
    37d6:	10 92 f2 24 	sts	0x24F2, r1
			function_counter_y = 0;
    37da:	10 92 f3 24 	sts	0x24F3, r1
    37de:	10 92 f4 24 	sts	0x24F4, r1
            Stop = 0;
    37e2:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    37e6:	10 92 ea 24 	sts	0x24EA, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    37ea:	87 e4       	ldi	r24, 0x47	; 71
    37ec:	91 e1       	ldi	r25, 0x11	; 17
    37ee:	4e e4       	ldi	r20, 0x4E	; 78
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	21 e0       	ldi	r18, 0x01	; 1
    37f8:	01 e0       	ldi	r16, 0x01	; 1
    37fa:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    37fe:	86 e5       	ldi	r24, 0x56	; 86
    3800:	98 e0       	ldi	r25, 0x08	; 8
    3802:	4e e4       	ldi	r20, 0x4E	; 78
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	22 e0       	ldi	r18, 0x02	; 2
    380c:	00 e0       	ldi	r16, 0x00	; 0
    380e:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    3812:	8e e8       	ldi	r24, 0x8E	; 142
    3814:	98 e0       	ldi	r25, 0x08	; 8
    3816:	4e e4       	ldi	r20, 0x4E	; 78
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	60 e0       	ldi	r22, 0x00	; 0
    381c:	70 e0       	ldi	r23, 0x00	; 0
    381e:	23 e0       	ldi	r18, 0x03	; 3
    3820:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
                                                                //by the Update_display interupt.
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    3824:	40 91 a3 20 	lds	r20, 0x20A3
    3828:	50 91 a4 20 	lds	r21, 0x20A4
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	8d e9       	ldi	r24, 0x9D	; 157
    3832:	9c e0       	ldi	r25, 0x0C	; 12
    3834:	24 e0       	ldi	r18, 0x04	; 4
    3836:	01 e0       	ldi	r16, 0x01	; 1
    3838:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
    383c:	40 91 a5 20 	lds	r20, 0x20A5
    3840:	50 91 a6 20 	lds	r21, 0x20A6
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	83 e5       	ldi	r24, 0x53	; 83
    384a:	9c e0       	ldi	r25, 0x0C	; 12
    384c:	25 e0       	ldi	r18, 0x05	; 5
    384e:	ac c0       	rjmp	.+344    	; 0x39a8 <handle_message_length_1+0x36c>
			break;
            
        case 0x30: //stop display
            Stop = 1;
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3856:	87 e4       	ldi	r24, 0x47	; 71
    3858:	91 e1       	ldi	r25, 0x11	; 17
    385a:	4e e4       	ldi	r20, 0x4E	; 78
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	21 e0       	ldi	r18, 0x01	; 1
    3864:	00 e0       	ldi	r16, 0x00	; 0
    3866:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    386a:	86 e5       	ldi	r24, 0x56	; 86
    386c:	98 e0       	ldi	r25, 0x08	; 8
    386e:	4e e4       	ldi	r20, 0x4E	; 78
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	60 e0       	ldi	r22, 0x00	; 0
    3874:	70 e0       	ldi	r23, 0x00	; 0
    3876:	22 e0       	ldi	r18, 0x02	; 2
    3878:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    387c:	8e e8       	ldi	r24, 0x8E	; 142
    387e:	98 e0       	ldi	r25, 0x08	; 8
    3880:	4e e4       	ldi	r20, 0x4E	; 78
    3882:	50 e0       	ldi	r21, 0x00	; 0
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	23 e0       	ldi	r18, 0x03	; 3
    388a:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    388e:	40 91 a3 20 	lds	r20, 0x20A3
    3892:	50 91 a4 20 	lds	r21, 0x20A4
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	8d e9       	ldi	r24, 0x9D	; 157
    389c:	9c e0       	ldi	r25, 0x0C	; 12
    389e:	24 e0       	ldi	r18, 0x04	; 4
    38a0:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    38a4:	40 91 a5 20 	lds	r20, 0x20A5
    38a8:	50 91 a6 20 	lds	r21, 0x20A6
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	83 e5       	ldi	r24, 0x53	; 83
    38b2:	9c e0       	ldi	r25, 0x0C	; 12
    38b4:	25 e0       	ldi	r18, 0x05	; 5
    38b6:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			if (default_func_x == 0)
    38ba:	80 91 a1 20 	lds	r24, 0x20A1
    38be:	88 23       	and	r24, r24
    38c0:	19 f4       	brne	.+6      	; 0x38c8 <handle_message_length_1+0x28c>
				fetch_update_funcX(1);
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fetch_update_funcX>
			if (default_func_y == 0)	
    38c8:	80 91 a2 20 	lds	r24, 0x20A2
    38cc:	88 23       	and	r24, r24
    38ce:	19 f4       	brne	.+6      	; 0x38d6 <handle_message_length_1+0x29a>
				fetch_update_funcY(1);
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	0e 94 95 0a 	call	0x152a	; 0x152a <fetch_update_funcY>
			analogWrite(2, 0);   // turn on laser
    38d6:	82 e0       	ldi	r24, 0x02	; 2
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
			analogWrite(3, 0);  //DAC3 inverse
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    38ea:	f1 c1       	rjmp	.+994    	; 0x3cce <handle_message_length_1+0x692>
				
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_global_counter_x = 0;
    38ec:	10 92 f5 24 	sts	0x24F5, r1
    38f0:	10 92 f6 24 	sts	0x24F6, r1
    38f4:	10 92 f7 24 	sts	0x24F7, r1
    38f8:	10 92 f8 24 	sts	0x24F8, r1
			func_global_counter_y = 0;
    38fc:	10 92 f9 24 	sts	0x24F9, r1
    3900:	10 92 fa 24 	sts	0x24FA, r1
    3904:	10 92 fb 24 	sts	0x24FB, r1
    3908:	10 92 fc 24 	sts	0x24FC, r1
			function_counter_x = 0;
    390c:	10 92 f1 24 	sts	0x24F1, r1
    3910:	10 92 f2 24 	sts	0x24F2, r1
			function_counter_y = 0;
    3914:	10 92 f3 24 	sts	0x24F3, r1
    3918:	10 92 f4 24 	sts	0x24F4, r1
            Stop = 0;
    391c:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3920:	10 92 ea 24 	sts	0x24EA, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3924:	87 e4       	ldi	r24, 0x47	; 71
    3926:	91 e1       	ldi	r25, 0x11	; 17
    3928:	4e e4       	ldi	r20, 0x4E	; 78
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	21 e0       	ldi	r18, 0x01	; 1
    3932:	01 e0       	ldi	r16, 0x01	; 1
    3934:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3938:	86 e5       	ldi	r24, 0x56	; 86
    393a:	98 e0       	ldi	r25, 0x08	; 8
    393c:	4e e4       	ldi	r20, 0x4E	; 78
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	22 e0       	ldi	r18, 0x02	; 2
    3946:	00 e0       	ldi	r16, 0x00	; 0
    3948:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    394c:	8e e8       	ldi	r24, 0x8E	; 142
    394e:	98 e0       	ldi	r25, 0x08	; 8
    3950:	4e e4       	ldi	r20, 0x4E	; 78
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	23 e0       	ldi	r18, 0x03	; 3
    395a:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    395e:	40 91 a3 20 	lds	r20, 0x20A3
    3962:	50 91 a4 20 	lds	r21, 0x20A4
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	8d e9       	ldi	r24, 0x9D	; 157
    396c:	9c e0       	ldi	r25, 0x0C	; 12
    396e:	24 e0       	ldi	r18, 0x04	; 4
    3970:	01 e0       	ldi	r16, 0x01	; 1
    3972:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
    3976:	40 91 a5 20 	lds	r20, 0x20A5
    397a:	50 91 a6 20 	lds	r21, 0x20A6
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	83 e5       	ldi	r24, 0x53	; 83
    3984:	9c e0       	ldi	r25, 0x0C	; 12
    3986:	25 e0       	ldi	r18, 0x05	; 5
    3988:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    398c:	60 91 a7 20 	lds	r22, 0x20A7
    3990:	70 91 a8 20 	lds	r23, 0x20A8
    3994:	82 e1       	ldi	r24, 0x12	; 18
    3996:	9a e7       	ldi	r25, 0x7A	; 122
    3998:	0e 94 ba 58 	call	0xb174	; 0xb174 <__udivmodhi4>
    399c:	ab 01       	movw	r20, r22
    399e:	60 e0       	ldi	r22, 0x00	; 0
    39a0:	70 e0       	ldi	r23, 0x00	; 0
    39a2:	83 e4       	ldi	r24, 0x43	; 67
    39a4:	91 e1       	ldi	r25, 0x11	; 17
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
    39ac:	90 c1       	rjmp	.+800    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    39b4:	87 e4       	ldi	r24, 0x47	; 71
    39b6:	91 e1       	ldi	r25, 0x11	; 17
    39b8:	4e e4       	ldi	r20, 0x4E	; 78
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	21 e0       	ldi	r18, 0x01	; 1
    39c2:	00 e0       	ldi	r16, 0x00	; 0
    39c4:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    39c8:	86 e5       	ldi	r24, 0x56	; 86
    39ca:	98 e0       	ldi	r25, 0x08	; 8
    39cc:	4e e4       	ldi	r20, 0x4E	; 78
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	22 e0       	ldi	r18, 0x02	; 2
    39d6:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    39da:	8e e8       	ldi	r24, 0x8E	; 142
    39dc:	98 e0       	ldi	r25, 0x08	; 8
    39de:	4e e4       	ldi	r20, 0x4E	; 78
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	23 e0       	ldi	r18, 0x03	; 3
    39e8:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    39ec:	40 91 a3 20 	lds	r20, 0x20A3
    39f0:	50 91 a4 20 	lds	r21, 0x20A4
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	8d e9       	ldi	r24, 0x9D	; 157
    39fa:	9c e0       	ldi	r25, 0x0C	; 12
    39fc:	24 e0       	ldi	r18, 0x04	; 4
    39fe:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3a02:	40 91 a5 20 	lds	r20, 0x20A5
    3a06:	50 91 a6 20 	lds	r21, 0x20A6
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	83 e5       	ldi	r24, 0x53	; 83
    3a10:	9c e0       	ldi	r25, 0x0C	; 12
    3a12:	25 e0       	ldi	r18, 0x05	; 5
    3a14:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3a18:	20 91 a7 20 	lds	r18, 0x20A7
    3a1c:	30 91 a8 20 	lds	r19, 0x20A8
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	62 e1       	ldi	r22, 0x12	; 18
    3a26:	7a e7       	ldi	r23, 0x7A	; 122
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    3a30:	83 e4       	ldi	r24, 0x43	; 67
    3a32:	91 e1       	ldi	r25, 0x11	; 17
    3a34:	ba 01       	movw	r22, r20
    3a36:	a9 01       	movw	r20, r18
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	0e 94 4a 30 	call	0x6094	; 0x6094 <Reg_Handler>
			digitalWrite(3,LOW);    //set the output to low
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	92 c0       	rjmp	.+292    	; 0x3b66 <handle_message_length_1+0x52a>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	68 e0       	ldi	r22, 0x08	; 8
    3a46:	49 e1       	ldi	r20, 0x19	; 25
    3a48:	55 e2       	ldi	r21, 0x25	; 37
    3a4a:	3f c1       	rjmp	.+638    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	68 e1       	ldi	r22, 0x18	; 24
    3a50:	42 e0       	ldi	r20, 0x02	; 2
    3a52:	51 e2       	ldi	r21, 0x21	; 33
    3a54:	3a c1       	rjmp	.+628    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	68 e1       	ldi	r22, 0x18	; 24
    3a5a:	4a e1       	ldi	r20, 0x1A	; 26
    3a5c:	51 e2       	ldi	r21, 0x21	; 33
    3a5e:	35 c1       	rjmp	.+618    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	68 e1       	ldi	r22, 0x18	; 24
    3a64:	42 e3       	ldi	r20, 0x32	; 50
    3a66:	51 e2       	ldi	r21, 0x21	; 33
    3a68:	30 c1       	rjmp	.+608    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	68 e1       	ldi	r22, 0x18	; 24
    3a6e:	4a e4       	ldi	r20, 0x4A	; 74
    3a70:	51 e2       	ldi	r21, 0x21	; 33
    3a72:	2b c1       	rjmp	.+598    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	68 e1       	ldi	r22, 0x18	; 24
    3a78:	42 e6       	ldi	r20, 0x62	; 98
    3a7a:	51 e2       	ldi	r21, 0x21	; 33
    3a7c:	26 c1       	rjmp	.+588    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	68 e1       	ldi	r22, 0x18	; 24
    3a82:	4a e7       	ldi	r20, 0x7A	; 122
    3a84:	51 e2       	ldi	r21, 0x21	; 33
    3a86:	21 c1       	rjmp	.+578    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	68 e1       	ldi	r22, 0x18	; 24
    3a8c:	42 e9       	ldi	r20, 0x92	; 146
    3a8e:	51 e2       	ldi	r21, 0x21	; 33
    3a90:	1c c1       	rjmp	.+568    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	68 e1       	ldi	r22, 0x18	; 24
    3a96:	4a ea       	ldi	r20, 0xAA	; 170
    3a98:	51 e2       	ldi	r21, 0x21	; 33
    3a9a:	17 c1       	rjmp	.+558    	; 0x3cca <handle_message_length_1+0x68e>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	68 e0       	ldi	r22, 0x08	; 8
    3aa0:	42 ec       	ldi	r20, 0xC2	; 194
    3aa2:	51 e2       	ldi	r21, 0x21	; 33
    3aa4:	12 c1       	rjmp	.+548    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x50:  ledBlink(); break;
    3aa6:	0e 94 11 22 	call	0x4422	; 0x4422 <ledBlink>
    3aaa:	11 c1       	rjmp	.+546    	; 0x3cce <handle_message_length_1+0x692>
        case 0x60:  SystemReset();  break;
    3aac:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <SystemReset>
    3ab0:	0e c1       	rjmp	.+540    	; 0x3cce <handle_message_length_1+0x692>
        case 0x70:  benchmark_pattern(); break;
    3ab2:	0e 94 8b 18 	call	0x3116	; 0x3116 <benchmark_pattern>
    3ab6:	0b c1       	rjmp	.+534    	; 0x3cce <handle_message_length_1+0x692>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	60 e2       	ldi	r22, 0x20	; 32
    3abc:	4a ec       	ldi	r20, 0xCA	; 202
    3abe:	51 e2       	ldi	r21, 0x21	; 33
    3ac0:	04 c1       	rjmp	.+520    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	60 e2       	ldi	r22, 0x20	; 32
    3ac6:	4a ee       	ldi	r20, 0xEA	; 234
    3ac8:	51 e2       	ldi	r21, 0x21	; 33
    3aca:	ff c0       	rjmp	.+510    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	60 e2       	ldi	r22, 0x20	; 32
    3ad0:	4a e0       	ldi	r20, 0x0A	; 10
    3ad2:	52 e2       	ldi	r21, 0x22	; 34
    3ad4:	fa c0       	rjmp	.+500    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	60 e2       	ldi	r22, 0x20	; 32
    3ada:	4a e2       	ldi	r20, 0x2A	; 42
    3adc:	52 e2       	ldi	r21, 0x22	; 34
    3ade:	f5 c0       	rjmp	.+490    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	60 e2       	ldi	r22, 0x20	; 32
    3ae4:	4a e4       	ldi	r20, 0x4A	; 74
    3ae6:	52 e2       	ldi	r21, 0x22	; 34
    3ae8:	f0 c0       	rjmp	.+480    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	60 e2       	ldi	r22, 0x20	; 32
    3aee:	4a e6       	ldi	r20, 0x6A	; 106
    3af0:	52 e2       	ldi	r21, 0x22	; 34
    3af2:	eb c0       	rjmp	.+470    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	60 e2       	ldi	r22, 0x20	; 32
    3af8:	4a e8       	ldi	r20, 0x8A	; 138
    3afa:	52 e2       	ldi	r21, 0x22	; 34
    3afc:	e6 c0       	rjmp	.+460    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	60 e2       	ldi	r22, 0x20	; 32
    3b02:	4a ea       	ldi	r20, 0xAA	; 170
    3b04:	52 e2       	ldi	r21, 0x22	; 34
    3b06:	e1 c0       	rjmp	.+450    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	60 e2       	ldi	r22, 0x20	; 32
    3b0c:	4a ec       	ldi	r20, 0xCA	; 202
    3b0e:	52 e2       	ldi	r21, 0x22	; 34
    3b10:	dc c0       	rjmp	.+440    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	60 e2       	ldi	r22, 0x20	; 32
    3b16:	4a ee       	ldi	r20, 0xEA	; 234
    3b18:	52 e2       	ldi	r21, 0x22	; 34
    3b1a:	d7 c0       	rjmp	.+430    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	60 e2       	ldi	r22, 0x20	; 32
    3b20:	4a e0       	ldi	r20, 0x0A	; 10
    3b22:	53 e2       	ldi	r21, 0x23	; 35
    3b24:	d2 c0       	rjmp	.+420    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	60 e2       	ldi	r22, 0x20	; 32
    3b2a:	4a e2       	ldi	r20, 0x2A	; 42
    3b2c:	53 e2       	ldi	r21, 0x23	; 35
    3b2e:	cd c0       	rjmp	.+410    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	60 e2       	ldi	r22, 0x20	; 32
    3b34:	4a e4       	ldi	r20, 0x4A	; 74
    3b36:	53 e2       	ldi	r21, 0x23	; 35
    3b38:	c8 c0       	rjmp	.+400    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	60 e2       	ldi	r22, 0x20	; 32
    3b3e:	4a e6       	ldi	r20, 0x6A	; 106
    3b40:	53 e2       	ldi	r21, 0x23	; 35
    3b42:	c3 c0       	rjmp	.+390    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	60 e2       	ldi	r22, 0x20	; 32
    3b48:	4a e8       	ldi	r20, 0x8A	; 138
    3b4a:	53 e2       	ldi	r21, 0x23	; 35
    3b4c:	be c0       	rjmp	.+380    	; 0x3cca <handle_message_length_1+0x68e>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	60 e2       	ldi	r22, 0x20	; 32
    3b52:	4a ea       	ldi	r20, 0xAA	; 170
    3b54:	53 e2       	ldi	r21, 0x23	; 35
    3b56:	b9 c0       	rjmp	.+370    	; 0x3cca <handle_message_length_1+0x68e>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	80 93 ec 24 	sts	0x24EC, r24
    3b5e:	b7 c0       	rjmp	.+366    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    3b60:	10 92 ec 24 	sts	0x24EC, r1
            // turn off the lines that may be connected
			digitalWrite(0,LOW);
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	0e 94 70 22 	call	0x44e0	; 0x44e0 <digitalWrite>
    3b6c:	b0 c0       	rjmp	.+352    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	80 93 a7 29 	sts	0x29A7, r24
    3b74:	ac c0       	rjmp	.+344    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    3b76:	10 92 a7 29 	sts	0x29A7, r1
    3b7a:	a9 c0       	rjmp	.+338    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    3b7c:	0e 94 c4 09 	call	0x1388	; 0x1388 <dump_mat>
    3b80:	a6 c0       	rjmp	.+332    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <handle_message_length_1+0x548>
    3b84:	0f 92       	push	r0
    3b86:	8b ef       	ldi	r24, 0xFB	; 251
    3b88:	98 e0       	ldi	r25, 0x08	; 8
    3b8a:	ad b7       	in	r26, 0x3d	; 61
    3b8c:	be b7       	in	r27, 0x3e	; 62
    3b8e:	11 96       	adiw	r26, 0x01	; 1
    3b90:	8d 93       	st	X+, r24
    3b92:	9c 93       	st	X, r25
    3b94:	12 97       	sbiw	r26, 0x02	; 2
    3b96:	8a ec       	ldi	r24, 0xCA	; 202
    3b98:	93 e2       	ldi	r25, 0x23	; 35
    3b9a:	13 96       	adiw	r26, 0x03	; 3
    3b9c:	8d 93       	st	X+, r24
    3b9e:	9c 93       	st	X, r25
    3ba0:	14 97       	sbiw	r26, 0x04	; 4
    3ba2:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	8f c0       	rjmp	.+286    	; 0x3cce <handle_message_length_1+0x692>
            break;
    3bb0:	ff e3       	ldi	r31, 0x3F	; 63
    3bb2:	ef 2e       	mov	r14, r31
    3bb4:	f7 e2       	ldi	r31, 0x27	; 39
    3bb6:	ff 2e       	mov	r15, r31
    3bb8:	01 e0       	ldi	r16, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3bba:	1e ef       	ldi	r17, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3bbc:	6e 01       	movw	r12, r28
    3bbe:	08 94       	sec
    3bc0:	c1 1c       	adc	r12, r1
    3bc2:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3bc4:	19 83       	std	Y+1, r17	; 0x01
    3bc6:	f7 01       	movw	r30, r14
    3bc8:	81 91       	ld	r24, Z+
    3bca:	7f 01       	movw	r14, r30
    3bcc:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3bce:	80 2f       	mov	r24, r16
    3bd0:	62 e0       	ldi	r22, 0x02	; 2
    3bd2:	a6 01       	movw	r20, r12
    3bd4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3bd8:	0f 5f       	subi	r16, 0xFF	; 255
    3bda:	01 38       	cpi	r16, 0x81	; 129
    3bdc:	99 f7       	brne	.-26     	; 0x3bc4 <handle_message_length_1+0x588>
    3bde:	77 c0       	rjmp	.+238    	; 0x3cce <handle_message_length_1+0x692>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	80 93 b1 20 	sts	0x20B1, r24
    3be6:	73 c0       	rjmp	.+230    	; 0x3cce <handle_message_length_1+0x692>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3be8:	10 92 b1 20 	sts	0x20B1, r1
    3bec:	70 c0       	rjmp	.+224    	; 0x3cce <handle_message_length_1+0x692>
            break;
			  
        case 0x19:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), gain_x, bias_x, X_pos_index, x_mode, gain_y, bias_y, Y_pos_index, y_mode);
    3bee:	8d b7       	in	r24, 0x3d	; 61
    3bf0:	9e b7       	in	r25, 0x3e	; 62
    3bf2:	42 97       	sbiw	r24, 0x12	; 18
    3bf4:	8d bf       	out	0x3d, r24	; 61
    3bf6:	9e bf       	out	0x3e, r25	; 62
    3bf8:	ed b7       	in	r30, 0x3d	; 61
    3bfa:	fe b7       	in	r31, 0x3e	; 62
    3bfc:	31 96       	adiw	r30, 0x01	; 1
    3bfe:	89 ed       	ldi	r24, 0xD9	; 217
    3c00:	98 e0       	ldi	r25, 0x08	; 8
    3c02:	ad b7       	in	r26, 0x3d	; 61
    3c04:	be b7       	in	r27, 0x3e	; 62
    3c06:	11 96       	adiw	r26, 0x01	; 1
    3c08:	8d 93       	st	X+, r24
    3c0a:	9c 93       	st	X, r25
    3c0c:	12 97       	sbiw	r26, 0x02	; 2
    3c0e:	80 91 0a 28 	lds	r24, 0x280A
    3c12:	99 27       	eor	r25, r25
    3c14:	87 fd       	sbrc	r24, 7
    3c16:	90 95       	com	r25
    3c18:	82 83       	std	Z+2, r24	; 0x02
    3c1a:	93 83       	std	Z+3, r25	; 0x03
    3c1c:	80 91 9f 25 	lds	r24, 0x259F
    3c20:	99 27       	eor	r25, r25
    3c22:	87 fd       	sbrc	r24, 7
    3c24:	90 95       	com	r25
    3c26:	84 83       	std	Z+4, r24	; 0x04
    3c28:	95 83       	std	Z+5, r25	; 0x05
    3c2a:	80 91 0c 27 	lds	r24, 0x270C
    3c2e:	90 91 0d 27 	lds	r25, 0x270D
    3c32:	86 83       	std	Z+6, r24	; 0x06
    3c34:	97 83       	std	Z+7, r25	; 0x07
    3c36:	80 91 bf 27 	lds	r24, 0x27BF
    3c3a:	80 87       	std	Z+8, r24	; 0x08
    3c3c:	11 86       	std	Z+9, r1	; 0x09
    3c3e:	80 91 c3 27 	lds	r24, 0x27C3
    3c42:	99 27       	eor	r25, r25
    3c44:	87 fd       	sbrc	r24, 7
    3c46:	90 95       	com	r25
    3c48:	82 87       	std	Z+10, r24	; 0x0a
    3c4a:	93 87       	std	Z+11, r25	; 0x0b
    3c4c:	80 91 da 2b 	lds	r24, 0x2BDA
    3c50:	99 27       	eor	r25, r25
    3c52:	87 fd       	sbrc	r24, 7
    3c54:	90 95       	com	r25
    3c56:	84 87       	std	Z+12, r24	; 0x0c
    3c58:	95 87       	std	Z+13, r25	; 0x0d
    3c5a:	80 91 7c 26 	lds	r24, 0x267C
    3c5e:	90 91 7d 26 	lds	r25, 0x267D
    3c62:	86 87       	std	Z+14, r24	; 0x0e
    3c64:	97 87       	std	Z+15, r25	; 0x0f
    3c66:	80 91 09 28 	lds	r24, 0x2809
    3c6a:	80 8b       	std	Z+16, r24	; 0x10
    3c6c:	11 8a       	std	Z+17, r1	; 0x11
    3c6e:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    3c72:	ed b7       	in	r30, 0x3d	; 61
    3c74:	fe b7       	in	r31, 0x3e	; 62
    3c76:	72 96       	adiw	r30, 0x12	; 18
    3c78:	ed bf       	out	0x3d, r30	; 61
    3c7a:	fe bf       	out	0x3e, r31	; 62
    3c7c:	28 c0       	rjmp	.+80     	; 0x3cce <handle_message_length_1+0x692>
          break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	6f ef       	ldi	r22, 0xFF	; 255
    3c84:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    3c88:	0f 92       	push	r0
    3c8a:	0f 92       	push	r0
    3c8c:	87 ea       	ldi	r24, 0xA7	; 167
    3c8e:	98 e0       	ldi	r25, 0x08	; 8
    3c90:	ad b7       	in	r26, 0x3d	; 61
    3c92:	be b7       	in	r27, 0x3e	; 62
    3c94:	11 96       	adiw	r26, 0x01	; 1
    3c96:	8d 93       	st	X+, r24
    3c98:	9c 93       	st	X, r25
    3c9a:	12 97       	sbiw	r26, 0x02	; 2
    3c9c:	0d c0       	rjmp	.+26     	; 0x3cb8 <handle_message_length_1+0x67c>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	60 e0       	ldi	r22, 0x00	; 0
    3ca4:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    3ca8:	0f 92       	push	r0
    3caa:	0f 92       	push	r0
    3cac:	85 e7       	ldi	r24, 0x75	; 117
    3cae:	98 e0       	ldi	r25, 0x08	; 8
    3cb0:	ed b7       	in	r30, 0x3d	; 61
    3cb2:	fe b7       	in	r31, 0x3e	; 62
    3cb4:	81 83       	std	Z+1, r24	; 0x01
    3cb6:	92 83       	std	Z+2, r25	; 0x02
    3cb8:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <handle_message_length_1+0x692>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	68 e0       	ldi	r22, 0x08	; 8
    3cc6:	46 ec       	ldi	r20, 0xC6	; 198
    3cc8:	50 e2       	ldi	r21, 0x20	; 32
    3cca:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    }
}
    3cce:	22 96       	adiw	r28, 0x02	; 2
    3cd0:	e8 e0       	ldi	r30, 0x08	; 8
    3cd2:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>

00003cd6 <main>:
}




int main(void) {
    3cd6:	a0 e5       	ldi	r26, 0x50	; 80
    3cd8:	b6 e0       	ldi	r27, 0x06	; 6
    3cda:	e1 e7       	ldi	r30, 0x71	; 113
    3cdc:	fe e1       	ldi	r31, 0x1E	; 30
    3cde:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    uint16_t message_length;
    uint16_t lcv;
    uint8_t  tempBuff[128];
	uint8_t workingModes;

	workingModes = eeprom_read_byte(work_mode);
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <__eerd_byte_x128a1>
    3cea:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    3cec:	8e e7       	ldi	r24, 0x7E	; 126
    3cee:	96 e2       	ldi	r25, 0x26	; 38
    3cf0:	6e 2d       	mov	r22, r14
    3cf2:	0e 94 ee 31 	call	0x63dc	; 0x63dc <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    3cf6:	88 e9       	ldi	r24, 0x98	; 152
    3cf8:	99 e2       	ldi	r25, 0x29	; 41
    3cfa:	6e 2d       	mov	r22, r14
    3cfc:	0e 94 ee 31 	call	0x63dc	; 0x63dc <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    3d00:	8e e2       	ldi	r24, 0x2E	; 46
    3d02:	97 e2       	ldi	r25, 0x27	; 39
    3d04:	6e 2d       	mov	r22, r14
    3d06:	0e 94 ee 31 	call	0x63dc	; 0x63dc <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    3d0a:	80 ea       	ldi	r24, 0xA0	; 160
    3d0c:	95 e2       	ldi	r25, 0x25	; 37
    3d0e:	6e 2d       	mov	r22, r14
    3d10:	0e 94 ee 31 	call	0x63dc	; 0x63dc <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    3d14:	8e e7       	ldi	r24, 0x7E	; 126
    3d16:	96 e2       	ldi	r25, 0x26	; 38
    3d18:	60 e8       	ldi	r22, 0x80	; 128
    3d1a:	74 e0       	ldi	r23, 0x04	; 4
    3d1c:	40 e4       	ldi	r20, 0x40	; 64
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	23 e2       	ldi	r18, 0x23	; 35
    3d22:	0e 94 9f 30 	call	0x613e	; 0x613e <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    3d26:	88 e9       	ldi	r24, 0x98	; 152
    3d28:	99 e2       	ldi	r25, 0x29	; 41
    3d2a:	60 e9       	ldi	r22, 0x90	; 144
    3d2c:	74 e0       	ldi	r23, 0x04	; 4
    3d2e:	40 e4       	ldi	r20, 0x40	; 64
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	23 e2       	ldi	r18, 0x23	; 35
    3d34:	0e 94 9f 30 	call	0x613e	; 0x613e <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    3d38:	8e e2       	ldi	r24, 0x2E	; 46
    3d3a:	97 e2       	ldi	r25, 0x27	; 39
    3d3c:	60 ea       	ldi	r22, 0xA0	; 160
    3d3e:	74 e0       	ldi	r23, 0x04	; 4
    3d40:	40 e4       	ldi	r20, 0x40	; 64
    3d42:	50 e0       	ldi	r21, 0x00	; 0
    3d44:	23 e2       	ldi	r18, 0x23	; 35
    3d46:	0e 94 9f 30 	call	0x613e	; 0x613e <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    3d4a:	80 ea       	ldi	r24, 0xA0	; 160
    3d4c:	95 e2       	ldi	r25, 0x25	; 37
    3d4e:	60 eb       	ldi	r22, 0xB0	; 176
    3d50:	74 e0       	ldi	r23, 0x04	; 4
    3d52:	40 e4       	ldi	r20, 0x40	; 64
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	23 e2       	ldi	r18, 0x23	; 35
    3d58:	0e 94 9f 30 	call	0x613e	; 0x613e <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    3d5c:	8e 2d       	mov	r24, r14
    3d5e:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <createRxBuff>
    init_all();
    3d62:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <init_all>
	
//initialize random number generator. 
    //srand(time(0));
    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    3d66:	8f e5       	ldi	r24, 0x5F	; 95
    3d68:	9e e2       	ldi	r25, 0x2E	; 46
    3d6a:	80 93 7d 25 	sts	0x257D, r24
    3d6e:	90 93 7e 25 	sts	0x257E, r25
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    3d76:	2a e0       	ldi	r18, 0x0A	; 10
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	ec 54       	subi	r30, 0x4C	; 76
    3d7e:	fa 4d       	sbci	r31, 0xDA	; 218
    3d80:	20 83       	st	Z, r18
    3d82:	31 83       	std	Z+1, r19	; 0x01
    3d84:	fc 01       	movw	r30, r24
    3d86:	e3 5d       	subi	r30, 0xD3	; 211
    3d88:	f7 4d       	sbci	r31, 0xD7	; 215
    3d8a:	20 83       	st	Z, r18
    3d8c:	31 83       	std	Z+1, r19	; 0x01
    3d8e:	02 96       	adiw	r24, 0x02	; 2
    //srand(time(0));
    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    3d90:	88 3c       	cpi	r24, 0xC8	; 200
    3d92:	91 05       	cpc	r25, r1
    3d94:	91 f7       	brne	.-28     	; 0x3d7a <main+0xa4>
    3d96:	ef e8       	ldi	r30, 0x8F	; 143
    3d98:	f6 e2       	ldi	r31, 0x26	; 38
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
	        laserPattern[lcv] = 255;
    3d9e:	4f ef       	ldi	r20, 0xFF	; 255
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
    3da0:	23 30       	cpi	r18, 0x03	; 3
    3da2:	31 05       	cpc	r19, r1
    3da4:	20 f0       	brcs	.+8      	; 0x3dae <main+0xd8>
    3da6:	c9 01       	movw	r24, r18
    3da8:	06 97       	sbiw	r24, 0x06	; 6
    3daa:	03 97       	sbiw	r24, 0x03	; 3
    3dac:	10 f4       	brcc	.+4      	; 0x3db2 <main+0xdc>
	        laserPattern[lcv] = 255;
    3dae:	40 83       	st	Z, r20
    3db0:	01 c0       	rjmp	.+2      	; 0x3db4 <main+0xde>
		else
			laserPattern[lcv] = 0;
    3db2:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
    3db4:	2f 5f       	subi	r18, 0xFF	; 255
    3db6:	3f 4f       	sbci	r19, 0xFF	; 255
    3db8:	31 96       	adiw	r30, 0x01	; 1
    3dba:	2d 37       	cpi	r18, 0x7D	; 125
    3dbc:	31 05       	cpc	r19, r1
    3dbe:	81 f7       	brne	.-32     	; 0x3da0 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    3dc0:	10 92 76 29 	sts	0x2976, r1
    3dc4:	10 92 77 29 	sts	0x2977, r1
    3dc8:	80 91 76 29 	lds	r24, 0x2976
    3dcc:	90 91 77 29 	lds	r25, 0x2977
    3dd0:	80 93 c1 27 	sts	0x27C1, r24
    3dd4:	90 93 c2 27 	sts	0x27C2, r25
    3dd8:	80 91 c1 27 	lds	r24, 0x27C1
    3ddc:	90 91 c2 27 	lds	r25, 0x27C2
    3de0:	80 93 7c 26 	sts	0x267C, r24
    3de4:	90 93 7d 26 	sts	0x267D, r25
    3de8:	80 93 0c 27 	sts	0x270C, r24
    3dec:	90 93 0d 27 	sts	0x270D, r25
    bias_x = bias_y = 0;
    3df0:	10 92 da 2b 	sts	0x2BDA, r1
    3df4:	10 92 9f 25 	sts	0x259F, r1
    gain_x = gain_y = 0;
    3df8:	10 92 c3 27 	sts	0x27C3, r1
    3dfc:	10 92 0a 28 	sts	0x280A, r1
    x_mode = y_mode = 0;
    3e00:	10 92 09 28 	sts	0x2809, r1
    3e04:	10 92 bf 27 	sts	0x27BF, r1
    X_val = Y_val = 0;
    3e08:	10 92 b1 25 	sts	0x25B1, r1
    3e0c:	10 92 b2 25 	sts	0x25B2, r1
    3e10:	10 92 8d 26 	sts	0x268D, r1
    3e14:	10 92 8e 26 	sts	0x268E, r1
    gs_value = 1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	80 93 3d 27 	sts	0x273D, r24
    row_compress = 0;
    3e1e:	10 92 b3 25 	sts	0x25B3, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    3e22:	10 92 a7 29 	sts	0x29A7, r1
    
    temp = eeprom_read_byte(arena_config);
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    3e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e30:	d9 f4       	brne	.+54     	; 0x3e68 <main+0x192>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3e32:	19 82       	std	Y+1, r1	; 0x01
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    3e34:	24 e0       	ldi	r18, 0x04	; 4
    3e36:	14 c0       	rjmp	.+40     	; 0x3e60 <main+0x18a>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    3e38:	e8 2f       	mov	r30, r24
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	e2 5c       	subi	r30, 0xC2	; 194
    3e3e:	f8 4d       	sbci	r31, 0xD8	; 216
    3e40:	98 2f       	mov	r25, r24
    3e42:	93 70       	andi	r25, 0x03	; 3
    3e44:	90 83       	st	Z, r25
			if (b1 && (chMap[b1] == 0))
    3e46:	88 23       	and	r24, r24
    3e48:	19 f0       	breq	.+6      	; 0x3e50 <main+0x17a>
    3e4a:	99 23       	and	r25, r25
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <main+0x17a>
				chMap[b1] = 4;
    3e4e:	20 83       	st	Z, r18
			adrMap[b1] = b1; // panel address identity mapping
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	e8 2f       	mov	r30, r24
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	eb 50       	subi	r30, 0x0B	; 11
    3e58:	f7 4d       	sbci	r31, 0xD7	; 215
    3e5a:	80 83       	st	Z, r24
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    3e5c:	8f 5f       	subi	r24, 0xFF	; 255
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	81 38       	cpi	r24, 0x81	; 129
    3e64:	48 f3       	brcs	.-46     	; 0x3e38 <main+0x162>
    3e66:	17 c0       	rjmp	.+46     	; 0x3e96 <main+0x1c0>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3e68:	19 82       	std	Y+1, r1	; 0x01
    3e6a:	11 c0       	rjmp	.+34     	; 0x3e8e <main+0x1b8>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    3e6c:	0f 2d       	mov	r16, r15
    3e6e:	10 e0       	ldi	r17, 0x00	; 0
    3e70:	c8 01       	movw	r24, r16
    3e72:	8f 5f       	subi	r24, 0xFF	; 255
    3e74:	9f 4f       	sbci	r25, 0xFF	; 255
    3e76:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <__eerd_byte_x128a1>
    3e7a:	f8 01       	movw	r30, r16
    3e7c:	e2 5c       	subi	r30, 0xC2	; 194
    3e7e:	f8 4d       	sbci	r31, 0xD8	; 216
    3e80:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    3e82:	0b 50       	subi	r16, 0x0B	; 11
    3e84:	17 4d       	sbci	r17, 0xD7	; 215
    3e86:	f8 01       	movw	r30, r16
    3e88:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    3e8a:	f3 94       	inc	r15
    3e8c:	f9 82       	std	Y+1, r15	; 0x01
    3e8e:	f9 80       	ldd	r15, Y+1	; 0x01
    3e90:	f0 e8       	ldi	r31, 0x80	; 128
    3e92:	ff 15       	cp	r31, r15
    3e94:	58 f7       	brcc	.-42     	; 0x3e6c <main+0x196>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    3e96:	84 e5       	ldi	r24, 0x54	; 84
    3e98:	9a e0       	ldi	r25, 0x0A	; 10
    3e9a:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	61 e0       	ldi	r22, 0x01	; 1
    3ea2:	0e 94 db 21 	call	0x43b6	; 0x43b6 <ledWrite>
    3ea6:	01 e0       	ldi	r16, 0x01	; 1
    3ea8:	10 e2       	ldi	r17, 0x20	; 32
    3eaa:	c1 2e       	mov	r12, r17
    3eac:	13 e0       	ldi	r17, 0x03	; 3
    3eae:	d1 2e       	mov	r13, r17
    3eb0:	3a c0       	rjmp	.+116    	; 0x3f26 <main+0x250>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	0e 94 01 52 	call	0xa402	; 0xa402 <disk_status>
    3eb8:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    3eba:	81 ff       	sbrs	r24, 1
    3ebc:	0d c0       	rjmp	.+26     	; 0x3ed8 <main+0x202>
            xputs(PSTR("Insert SD card"));
    3ebe:	85 e4       	ldi	r24, 0x45	; 69
    3ec0:	9a e0       	ldi	r25, 0x0A	; 10
    3ec2:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            uart_crlf();
    3ec6:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <uart_crlf>
    3eca:	04 c0       	rjmp	.+8      	; 0x3ed4 <main+0x1fe>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	0e 94 01 52 	call	0xa402	; 0xa402 <disk_status>
    3ed2:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    3ed4:	01 fd       	sbrc	r16, 1
    3ed6:	fa cf       	rjmp	.-12     	; 0x3ecc <main+0x1f6>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    3ed8:	02 ff       	sbrs	r16, 2
    3eda:	04 c0       	rjmp	.+8      	; 0x3ee4 <main+0x20e>
            xputs(PSTR("SD card is Write Protected!\n"));
    3edc:	88 e2       	ldi	r24, 0x28	; 40
    3ede:	9a e0       	ldi	r25, 0x0A	; 10
    3ee0:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3ee4:	19 82       	std	Y+1, r1	; 0x01
    3ee6:	10 c0       	rjmp	.+32     	; 0x3f08 <main+0x232>
            sta = disk_initialize(0);
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	0e 94 f7 54 	call	0xa9ee	; 0xa9ee <disk_initialize>
    3eee:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    3ef0:	80 ff       	sbrs	r24, 0
    3ef2:	0d c0       	rjmp	.+26     	; 0x3f0e <main+0x238>
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	89 83       	std	Y+1, r24	; 0x01
    3efa:	84 ef       	ldi	r24, 0xF4	; 244
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	f6 01       	movw	r30, r12
    3f00:	31 97       	sbiw	r30, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <main+0x22a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f06:	d9 f7       	brne	.-10     	; 0x3efe <main+0x228>
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	84 30       	cpi	r24, 0x04	; 4
    3f0c:	68 f3       	brcs	.-38     	; 0x3ee8 <main+0x212>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    3f0e:	00 ff       	sbrs	r16, 0
    3f10:	0a c0       	rjmp	.+20     	; 0x3f26 <main+0x250>
            xputs(PSTR("Initialization failed!!!\n"));
    3f12:	8e e0       	ldi	r24, 0x0E	; 14
    3f14:	9a e0       	ldi	r25, 0x0A	; 10
    3f16:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	0e 94 01 52 	call	0xa402	; 0xa402 <disk_status>
    3f20:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    3f22:	81 ff       	sbrs	r24, 1
    3f24:	fa cf       	rjmp	.-12     	; 0x3f1a <main+0x244>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    3f26:	00 fd       	sbrc	r16, 0
    3f28:	c4 cf       	rjmp	.-120    	; 0x3eb2 <main+0x1dc>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    3f2a:	86 ef       	ldi	r24, 0xF6	; 246
    3f2c:	99 e0       	ldi	r25, 0x09	; 9
    3f2e:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	6a e0       	ldi	r22, 0x0A	; 10
    3f36:	ae 01       	movw	r20, r28
    3f38:	4f 5f       	subi	r20, 0xFF	; 255
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3c:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <disk_ioctl>
    3f40:	89 2b       	or	r24, r25
    3f42:	59 f5       	brne	.+86     	; 0x3f9a <main+0x2c4>
        xputs(PSTR("Card type: "));
    3f44:	8a ee       	ldi	r24, 0xEA	; 234
    3f46:	99 e0       	ldi	r25, 0x09	; 9
    3f48:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        switch(b1) {
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	84 30       	cpi	r24, 0x04	; 4
    3f50:	a1 f0       	breq	.+40     	; 0x3f7a <main+0x2a4>
    3f52:	85 30       	cpi	r24, 0x05	; 5
    3f54:	28 f4       	brcc	.+10     	; 0x3f60 <main+0x28a>
    3f56:	81 30       	cpi	r24, 0x01	; 1
    3f58:	51 f0       	breq	.+20     	; 0x3f6e <main+0x298>
    3f5a:	82 30       	cpi	r24, 0x02	; 2
    3f5c:	d1 f4       	brne	.+52     	; 0x3f92 <main+0x2bc>
    3f5e:	0a c0       	rjmp	.+20     	; 0x3f74 <main+0x29e>
    3f60:	88 30       	cpi	r24, 0x08	; 8
    3f62:	89 f0       	breq	.+34     	; 0x3f86 <main+0x2b0>
    3f64:	8c 30       	cpi	r24, 0x0C	; 12
    3f66:	91 f0       	breq	.+36     	; 0x3f8c <main+0x2b6>
    3f68:	86 30       	cpi	r24, 0x06	; 6
    3f6a:	99 f4       	brne	.+38     	; 0x3f92 <main+0x2bc>
    3f6c:	09 c0       	rjmp	.+18     	; 0x3f80 <main+0x2aa>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    3f6e:	85 ee       	ldi	r24, 0xE5	; 229
    3f70:	99 e0       	ldi	r25, 0x09	; 9
    3f72:	11 c0       	rjmp	.+34     	; 0x3f96 <main+0x2c0>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    3f74:	81 ee       	ldi	r24, 0xE1	; 225
    3f76:	99 e0       	ldi	r25, 0x09	; 9
    3f78:	0e c0       	rjmp	.+28     	; 0x3f96 <main+0x2c0>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    3f7a:	8c ed       	ldi	r24, 0xDC	; 220
    3f7c:	99 e0       	ldi	r25, 0x09	; 9
    3f7e:	0b c0       	rjmp	.+22     	; 0x3f96 <main+0x2c0>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    3f80:	87 ed       	ldi	r24, 0xD7	; 215
    3f82:	99 e0       	ldi	r25, 0x09	; 9
    3f84:	08 c0       	rjmp	.+16     	; 0x3f96 <main+0x2c0>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    3f86:	82 ed       	ldi	r24, 0xD2	; 210
    3f88:	99 e0       	ldi	r25, 0x09	; 9
    3f8a:	05 c0       	rjmp	.+10     	; 0x3f96 <main+0x2c0>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    3f8c:	8c ec       	ldi	r24, 0xCC	; 204
    3f8e:	99 e0       	ldi	r25, 0x09	; 9
    3f90:	02 c0       	rjmp	.+4      	; 0x3f96 <main+0x2c0>
            default: xputs(PSTR("???\n"));
    3f92:	87 ec       	ldi	r24, 0xC7	; 199
    3f94:	99 e0       	ldi	r25, 0x09	; 9
    3f96:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    3f9a:	8e ea       	ldi	r24, 0xAE	; 174
    3f9c:	99 e0       	ldi	r25, 0x09	; 9
    3f9e:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    res = f_mount(0, &fatfs);
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	68 ea       	ldi	r22, 0xA8	; 168
    3fa6:	79 e2       	ldi	r23, 0x29	; 41
    3fa8:	0e 94 8f 32 	call	0x651e	; 0x651e <f_mount>
    switch(res) {
    3fac:	81 30       	cpi	r24, 0x01	; 1
    3fae:	51 f0       	breq	.+20     	; 0x3fc4 <main+0x2ee>
    3fb0:	81 30       	cpi	r24, 0x01	; 1
    3fb2:	28 f0       	brcs	.+10     	; 0x3fbe <main+0x2e8>
    3fb4:	82 30       	cpi	r24, 0x02	; 2
    3fb6:	49 f0       	breq	.+18     	; 0x3fca <main+0x2f4>
    3fb8:	83 30       	cpi	r24, 0x03	; 3
    3fba:	69 f4       	brne	.+26     	; 0x3fd6 <main+0x300>
    3fbc:	09 c0       	rjmp	.+18     	; 0x3fd0 <main+0x2fa>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    3fbe:	84 ea       	ldi	r24, 0xA4	; 164
    3fc0:	99 e0       	ldi	r25, 0x09	; 9
    3fc2:	0b c0       	rjmp	.+22     	; 0x3fda <main+0x304>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    3fc4:	8b e9       	ldi	r24, 0x9B	; 155
    3fc6:	99 e0       	ldi	r25, 0x09	; 9
    3fc8:	08 c0       	rjmp	.+16     	; 0x3fda <main+0x304>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    3fca:	88 e8       	ldi	r24, 0x88	; 136
    3fcc:	99 e0       	ldi	r25, 0x09	; 9
    3fce:	05 c0       	rjmp	.+10     	; 0x3fda <main+0x304>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    3fd0:	8b e7       	ldi	r24, 0x7B	; 123
    3fd2:	99 e0       	ldi	r25, 0x09	; 9
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <main+0x304>
        default: xputs(PSTR("???\n"));
    3fd6:	86 e7       	ldi	r24, 0x76	; 118
    3fd8:	99 e0       	ldi	r25, 0x09	; 9
    3fda:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	68 e0       	ldi	r22, 0x08	; 8
    3fe2:	49 e1       	ldi	r20, 0x19	; 25
    3fe4:	55 e2       	ldi	r21, 0x25	; 37
    3fe6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    ledWrite(LED1, OFF);
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	0e 94 db 21 	call	0x43b6	; 0x43b6 <ledWrite>
    ledBlink();
    3ff2:	0e 94 11 22 	call	0x4422	; 0x4422 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	e8 16       	cp	r14, r24
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <main+0x328>
    3ffc:	d0 c0       	rjmp	.+416    	; 0x419e <__stack+0x19f>
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    3ffe:	88 e4       	ldi	r24, 0x48	; 72
    4000:	99 e0       	ldi	r25, 0x09	; 9
    4002:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4006:	8e 01       	movw	r16, r28
    4008:	0e 5f       	subi	r16, 0xFE	; 254
    400a:	1f 4f       	sbci	r17, 0xFF	; 255
    if (workingModes == 0xff) {
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    400c:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <uart_test>
    4010:	89 2b       	or	r24, r25
    4012:	09 f4       	brne	.+2      	; 0x4016 <__stack+0x17>
    4014:	49 c0       	rjmp	.+146    	; 0x40a8 <__stack+0xa9>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4016:	c8 01       	movw	r24, r16
    4018:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <fill_Rx_buffer>
                switch(message_length) {
    401c:	84 30       	cpi	r24, 0x04	; 4
    401e:	91 05       	cpc	r25, r1
    4020:	09 f1       	breq	.+66     	; 0x4064 <__stack+0x65>
    4022:	85 30       	cpi	r24, 0x05	; 5
    4024:	91 05       	cpc	r25, r1
    4026:	48 f4       	brcc	.+18     	; 0x403a <__stack+0x3b>
    4028:	82 30       	cpi	r24, 0x02	; 2
    402a:	91 05       	cpc	r25, r1
    402c:	99 f0       	breq	.+38     	; 0x4054 <__stack+0x55>
    402e:	83 30       	cpi	r24, 0x03	; 3
    4030:	91 05       	cpc	r25, r1
    4032:	a0 f4       	brcc	.+40     	; 0x405c <__stack+0x5d>
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	91 f5       	brne	.+100    	; 0x409c <__stack+0x9d>
    4038:	09 c0       	rjmp	.+18     	; 0x404c <__stack+0x4d>
    403a:	8e 33       	cpi	r24, 0x3E	; 62
    403c:	91 05       	cpc	r25, r1
    403e:	d1 f0       	breq	.+52     	; 0x4074 <__stack+0x75>
    4040:	8f 33       	cpi	r24, 0x3F	; 63
    4042:	91 05       	cpc	r25, r1
    4044:	39 f1       	breq	.+78     	; 0x4094 <__stack+0x95>
    4046:	05 97       	sbiw	r24, 0x05	; 5
    4048:	49 f5       	brne	.+82     	; 0x409c <__stack+0x9d>
    404a:	10 c0       	rjmp	.+32     	; 0x406c <__stack+0x6d>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    404c:	c8 01       	movw	r24, r16
    404e:	0e 94 1e 1b 	call	0x363c	; 0x363c <handle_message_length_1>
    4052:	2a c0       	rjmp	.+84     	; 0x40a8 <__stack+0xa9>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    4054:	c8 01       	movw	r24, r16
    4056:	0e 94 ac 1a 	call	0x3558	; 0x3558 <handle_message_length_2>
    405a:	26 c0       	rjmp	.+76     	; 0x40a8 <__stack+0xa9>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    405c:	c8 01       	movw	r24, r16
    405e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <handle_message_length_3>
    4062:	22 c0       	rjmp	.+68     	; 0x40a8 <__stack+0xa9>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    4064:	c8 01       	movw	r24, r16
    4066:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <handle_message_length_4>
    406a:	1e c0       	rjmp	.+60     	; 0x40a8 <__stack+0xa9>
						break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    406c:	c8 01       	movw	r24, r16
    406e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <handle_message_length_5>
    4072:	1a c0       	rjmp	.+52     	; 0x40a8 <__stack+0xa9>
                        break;
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
{   
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    4078:	f9 01       	movw	r30, r18
    407a:	e1 57       	subi	r30, 0x71	; 113
    407c:	f9 4d       	sbci	r31, 0xD9	; 217
    407e:	d8 01       	movw	r26, r16
    4080:	a2 0f       	add	r26, r18
    4082:	b3 1f       	adc	r27, r19
    4084:	8c 91       	ld	r24, X
    4086:	80 83       	st	Z, r24
    4088:	2f 5f       	subi	r18, 0xFF	; 255
    408a:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    408c:	2e 33       	cpi	r18, 0x3E	; 62
    408e:	31 05       	cpc	r19, r1
    4090:	99 f7       	brne	.-26     	; 0x4078 <__stack+0x79>
    4092:	0a c0       	rjmp	.+20     	; 0x40a8 <__stack+0xa9>
                        break;
                    case 62: //if length 62, then set laser trigger pattern first 62 byte
                        handle_message_length_62(&msg_buffer[0]);
                        break;
					case 63: //if length 63, then set laser trigger pattern second 63 byte
                        handle_message_length_63(&msg_buffer[0]);
    4094:	c8 01       	movw	r24, r16
    4096:	0e 94 ab 09 	call	0x1356	; 0x1356 <handle_message_length_63>
    409a:	06 c0       	rjmp	.+12     	; 0x40a8 <__stack+0xa9>
                        break;	
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	68 e0       	ldi	r22, 0x08	; 8
    40a0:	4e ee       	ldi	r20, 0xEE	; 238
    40a2:	50 e2       	ldi	r21, 0x20	; 32
    40a4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has change
    40a8:	80 91 9c 20 	lds	r24, 0x209C
    40ac:	88 23       	and	r24, r24
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <__stack+0xb3>
    40b0:	ad cf       	rjmp	.-166    	; 0x400c <__stack+0xd>
			
                if (frame_num != frame_num_old) {
    40b2:	20 91 ef 24 	lds	r18, 0x24EF
    40b6:	30 91 f0 24 	lds	r19, 0x24F0
    40ba:	80 91 9e 20 	lds	r24, 0x209E
    40be:	90 91 9f 20 	lds	r25, 0x209F
    40c2:	28 17       	cp	r18, r24
    40c4:	39 07       	cpc	r19, r25
    40c6:	71 f0       	breq	.+28     	; 0x40e4 <__stack+0xe5>
                    frame_num_old = frame_num; //update the 'old' frame number
    40c8:	80 91 ef 24 	lds	r24, 0x24EF
    40cc:	90 91 f0 24 	lds	r25, 0x24F0
    40d0:	80 93 9e 20 	sts	0x209E, r24
    40d4:	90 93 9f 20 	sts	0x209F, r25
                    fetch_display_frame(frame_num);
    40d8:	80 91 ef 24 	lds	r24, 0x24EF
    40dc:	90 91 f0 24 	lds	r25, 0x24F0
    40e0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <fetch_display_frame>
                }
				
				if (default_func_x == 0){
    40e4:	80 91 a1 20 	lds	r24, 0x20A1
    40e8:	88 23       	and	r24, r24
    40ea:	49 f5       	brne	.+82     	; 0x413e <__stack+0x13f>
					if ((function_counter_x >= loadXBuffer/2 -1) || (func_global_counter_x >= funcSize_x -2)) {
    40ec:	20 91 f1 24 	lds	r18, 0x24F1
    40f0:	30 91 f2 24 	lds	r19, 0x24F2
    40f4:	80 91 b2 20 	lds	r24, 0x20B2
    40f8:	90 91 b3 20 	lds	r25, 0x20B3
    40fc:	96 95       	lsr	r25
    40fe:	87 95       	ror	r24
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	c0 f4       	brcc	.+48     	; 0x4138 <__stack+0x139>
    4108:	20 91 f5 24 	lds	r18, 0x24F5
    410c:	30 91 f6 24 	lds	r19, 0x24F6
    4110:	40 91 f7 24 	lds	r20, 0x24F7
    4114:	50 91 f8 24 	lds	r21, 0x24F8
    4118:	80 91 a9 20 	lds	r24, 0x20A9
    411c:	90 91 aa 20 	lds	r25, 0x20AA
    4120:	a0 91 ab 20 	lds	r26, 0x20AB
    4124:	b0 91 ac 20 	lds	r27, 0x20AC
    4128:	02 97       	sbiw	r24, 0x02	; 2
    412a:	a1 09       	sbc	r26, r1
    412c:	b1 09       	sbc	r27, r1
    412e:	28 17       	cp	r18, r24
    4130:	39 07       	cpc	r19, r25
    4132:	4a 07       	cpc	r20, r26
    4134:	5b 07       	cpc	r21, r27
    4136:	18 f0       	brcs	.+6      	; 0x413e <__stack+0x13f>
						fetch_update_funcX(0);
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <fetch_update_funcX>
					}
				}


				if (default_func_y == 0){
    413e:	80 91 a2 20 	lds	r24, 0x20A2
    4142:	88 23       	and	r24, r24
    4144:	09 f0       	breq	.+2      	; 0x4148 <__stack+0x149>
    4146:	62 cf       	rjmp	.-316    	; 0x400c <__stack+0xd>
					if ((function_counter_y >= loadYBuffer/2-1 ) || (func_global_counter_y >= funcSize_y -2)) {
    4148:	20 91 f3 24 	lds	r18, 0x24F3
    414c:	30 91 f4 24 	lds	r19, 0x24F4
    4150:	80 91 b4 20 	lds	r24, 0x20B4
    4154:	90 91 b5 20 	lds	r25, 0x20B5
    4158:	96 95       	lsr	r25
    415a:	87 95       	ror	r24
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	28 17       	cp	r18, r24
    4160:	39 07       	cpc	r19, r25
    4162:	c8 f4       	brcc	.+50     	; 0x4196 <__stack+0x197>
    4164:	20 91 f9 24 	lds	r18, 0x24F9
    4168:	30 91 fa 24 	lds	r19, 0x24FA
    416c:	40 91 fb 24 	lds	r20, 0x24FB
    4170:	50 91 fc 24 	lds	r21, 0x24FC
    4174:	80 91 ad 20 	lds	r24, 0x20AD
    4178:	90 91 ae 20 	lds	r25, 0x20AE
    417c:	a0 91 af 20 	lds	r26, 0x20AF
    4180:	b0 91 b0 20 	lds	r27, 0x20B0
    4184:	02 97       	sbiw	r24, 0x02	; 2
    4186:	a1 09       	sbc	r26, r1
    4188:	b1 09       	sbc	r27, r1
    418a:	28 17       	cp	r18, r24
    418c:	39 07       	cpc	r19, r25
    418e:	4a 07       	cpc	r20, r26
    4190:	5b 07       	cpc	r21, r27
    4192:	08 f4       	brcc	.+2      	; 0x4196 <__stack+0x197>
    4194:	3b cf       	rjmp	.-394    	; 0x400c <__stack+0xd>
						fetch_update_funcY(0);
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	0e 94 95 0a 	call	0x152a	; 0x152a <fetch_update_funcY>
    419c:	37 cf       	rjmp	.-402    	; 0x400c <__stack+0xd>
				}	
            }
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    419e:	8a e1       	ldi	r24, 0x1A	; 26
    41a0:	99 e0       	ldi	r25, 0x09	; 9
    41a2:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    41a6:	8e 01       	movw	r16, r28
    41a8:	0d 5b       	subi	r16, 0xBD	; 189
    41aa:	1f 4f       	sbci	r17, 0xFF	; 255
        }
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    41ac:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <uart_test>
    41b0:	89 2b       	or	r24, r25
    41b2:	e1 f3       	breq	.-8      	; 0x41ac <__stack+0x1ad>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    41b4:	c8 01       	movw	r24, r16
    41b6:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <fill_Rx_buffer>
                switch(message_length) {
    41ba:	81 30       	cpi	r24, 0x01	; 1
    41bc:	91 05       	cpc	r25, r1
    41be:	19 f0       	breq	.+6      	; 0x41c6 <__stack+0x1c7>
    41c0:	c2 97       	sbiw	r24, 0x32	; 50
    41c2:	49 f4       	brne	.+18     	; 0x41d6 <__stack+0x1d7>
    41c4:	04 c0       	rjmp	.+8      	; 0x41ce <__stack+0x1cf>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    41c6:	c8 01       	movw	r24, r16
    41c8:	0e 94 1e 1b 	call	0x363c	; 0x363c <handle_message_length_1>
    41cc:	ef cf       	rjmp	.-34     	; 0x41ac <__stack+0x1ad>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    41ce:	c8 01       	movw	r24, r16
    41d0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <display_dumped_frame>
    41d4:	eb cf       	rjmp	.-42     	; 0x41ac <__stack+0x1ad>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	68 e0       	ldi	r22, 0x08	; 8
    41da:	4e ee       	ldi	r20, 0xEE	; 238
    41dc:	50 e2       	ldi	r21, 0x20	; 32
    41de:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <i2cMasterSend>
    41e2:	e4 cf       	rjmp	.-56     	; 0x41ac <__stack+0x1ad>

000041e4 <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    41e4:	1f 92       	push	r1
    41e6:	0f 92       	push	r0
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	0f 92       	push	r0
    41ec:	08 b6       	in	r0, 0x38	; 56
    41ee:	0f 92       	push	r0
    41f0:	09 b6       	in	r0, 0x39	; 57
    41f2:	0f 92       	push	r0
    41f4:	0b b6       	in	r0, 0x3b	; 59
    41f6:	0f 92       	push	r0
    41f8:	11 24       	eor	r1, r1
    41fa:	18 be       	out	0x38, r1	; 56
    41fc:	19 be       	out	0x39, r1	; 57
    41fe:	1b be       	out	0x3b, r1	; 59
    4200:	2f 93       	push	r18
    4202:	3f 93       	push	r19
    4204:	4f 93       	push	r20
    4206:	5f 93       	push	r21
    4208:	6f 93       	push	r22
    420a:	7f 93       	push	r23
    420c:	8f 93       	push	r24
    420e:	9f 93       	push	r25
    4210:	af 93       	push	r26
    4212:	bf 93       	push	r27
    4214:	ef 93       	push	r30
    4216:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    4218:	80 ea       	ldi	r24, 0xA0	; 160
    421a:	95 e2       	ldi	r25, 0x25	; 37
    421c:	0e 94 bb 31 	call	0x6376	; 0x6376 <TWI_MasterInterruptHandler>
}
    4220:	ff 91       	pop	r31
    4222:	ef 91       	pop	r30
    4224:	bf 91       	pop	r27
    4226:	af 91       	pop	r26
    4228:	9f 91       	pop	r25
    422a:	8f 91       	pop	r24
    422c:	7f 91       	pop	r23
    422e:	6f 91       	pop	r22
    4230:	5f 91       	pop	r21
    4232:	4f 91       	pop	r20
    4234:	3f 91       	pop	r19
    4236:	2f 91       	pop	r18
    4238:	0f 90       	pop	r0
    423a:	0b be       	out	0x3b, r0	; 59
    423c:	0f 90       	pop	r0
    423e:	09 be       	out	0x39, r0	; 57
    4240:	0f 90       	pop	r0
    4242:	08 be       	out	0x38, r0	; 56
    4244:	0f 90       	pop	r0
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	0f 90       	pop	r0
    424a:	1f 90       	pop	r1
    424c:	18 95       	reti

0000424e <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    424e:	1f 92       	push	r1
    4250:	0f 92       	push	r0
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	0f 92       	push	r0
    4256:	08 b6       	in	r0, 0x38	; 56
    4258:	0f 92       	push	r0
    425a:	09 b6       	in	r0, 0x39	; 57
    425c:	0f 92       	push	r0
    425e:	0b b6       	in	r0, 0x3b	; 59
    4260:	0f 92       	push	r0
    4262:	11 24       	eor	r1, r1
    4264:	18 be       	out	0x38, r1	; 56
    4266:	19 be       	out	0x39, r1	; 57
    4268:	1b be       	out	0x3b, r1	; 59
    426a:	2f 93       	push	r18
    426c:	3f 93       	push	r19
    426e:	4f 93       	push	r20
    4270:	5f 93       	push	r21
    4272:	6f 93       	push	r22
    4274:	7f 93       	push	r23
    4276:	8f 93       	push	r24
    4278:	9f 93       	push	r25
    427a:	af 93       	push	r26
    427c:	bf 93       	push	r27
    427e:	ef 93       	push	r30
    4280:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    4282:	8e e2       	ldi	r24, 0x2E	; 46
    4284:	97 e2       	ldi	r25, 0x27	; 39
    4286:	0e 94 bb 31 	call	0x6376	; 0x6376 <TWI_MasterInterruptHandler>
}
    428a:	ff 91       	pop	r31
    428c:	ef 91       	pop	r30
    428e:	bf 91       	pop	r27
    4290:	af 91       	pop	r26
    4292:	9f 91       	pop	r25
    4294:	8f 91       	pop	r24
    4296:	7f 91       	pop	r23
    4298:	6f 91       	pop	r22
    429a:	5f 91       	pop	r21
    429c:	4f 91       	pop	r20
    429e:	3f 91       	pop	r19
    42a0:	2f 91       	pop	r18
    42a2:	0f 90       	pop	r0
    42a4:	0b be       	out	0x3b, r0	; 59
    42a6:	0f 90       	pop	r0
    42a8:	09 be       	out	0x39, r0	; 57
    42aa:	0f 90       	pop	r0
    42ac:	08 be       	out	0x38, r0	; 56
    42ae:	0f 90       	pop	r0
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	0f 90       	pop	r0
    42b4:	1f 90       	pop	r1
    42b6:	18 95       	reti

000042b8 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    42b8:	1f 92       	push	r1
    42ba:	0f 92       	push	r0
    42bc:	0f b6       	in	r0, 0x3f	; 63
    42be:	0f 92       	push	r0
    42c0:	08 b6       	in	r0, 0x38	; 56
    42c2:	0f 92       	push	r0
    42c4:	09 b6       	in	r0, 0x39	; 57
    42c6:	0f 92       	push	r0
    42c8:	0b b6       	in	r0, 0x3b	; 59
    42ca:	0f 92       	push	r0
    42cc:	11 24       	eor	r1, r1
    42ce:	18 be       	out	0x38, r1	; 56
    42d0:	19 be       	out	0x39, r1	; 57
    42d2:	1b be       	out	0x3b, r1	; 59
    42d4:	2f 93       	push	r18
    42d6:	3f 93       	push	r19
    42d8:	4f 93       	push	r20
    42da:	5f 93       	push	r21
    42dc:	6f 93       	push	r22
    42de:	7f 93       	push	r23
    42e0:	8f 93       	push	r24
    42e2:	9f 93       	push	r25
    42e4:	af 93       	push	r26
    42e6:	bf 93       	push	r27
    42e8:	ef 93       	push	r30
    42ea:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    42ec:	88 e9       	ldi	r24, 0x98	; 152
    42ee:	99 e2       	ldi	r25, 0x29	; 41
    42f0:	0e 94 bb 31 	call	0x6376	; 0x6376 <TWI_MasterInterruptHandler>
}
    42f4:	ff 91       	pop	r31
    42f6:	ef 91       	pop	r30
    42f8:	bf 91       	pop	r27
    42fa:	af 91       	pop	r26
    42fc:	9f 91       	pop	r25
    42fe:	8f 91       	pop	r24
    4300:	7f 91       	pop	r23
    4302:	6f 91       	pop	r22
    4304:	5f 91       	pop	r21
    4306:	4f 91       	pop	r20
    4308:	3f 91       	pop	r19
    430a:	2f 91       	pop	r18
    430c:	0f 90       	pop	r0
    430e:	0b be       	out	0x3b, r0	; 59
    4310:	0f 90       	pop	r0
    4312:	09 be       	out	0x39, r0	; 57
    4314:	0f 90       	pop	r0
    4316:	08 be       	out	0x38, r0	; 56
    4318:	0f 90       	pop	r0
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	0f 90       	pop	r0
    431e:	1f 90       	pop	r1
    4320:	18 95       	reti

00004322 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    4322:	1f 92       	push	r1
    4324:	0f 92       	push	r0
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	0f 92       	push	r0
    432a:	08 b6       	in	r0, 0x38	; 56
    432c:	0f 92       	push	r0
    432e:	09 b6       	in	r0, 0x39	; 57
    4330:	0f 92       	push	r0
    4332:	0b b6       	in	r0, 0x3b	; 59
    4334:	0f 92       	push	r0
    4336:	11 24       	eor	r1, r1
    4338:	18 be       	out	0x38, r1	; 56
    433a:	19 be       	out	0x39, r1	; 57
    433c:	1b be       	out	0x3b, r1	; 59
    433e:	2f 93       	push	r18
    4340:	3f 93       	push	r19
    4342:	4f 93       	push	r20
    4344:	5f 93       	push	r21
    4346:	6f 93       	push	r22
    4348:	7f 93       	push	r23
    434a:	8f 93       	push	r24
    434c:	9f 93       	push	r25
    434e:	af 93       	push	r26
    4350:	bf 93       	push	r27
    4352:	ef 93       	push	r30
    4354:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    4356:	8e e7       	ldi	r24, 0x7E	; 126
    4358:	96 e2       	ldi	r25, 0x26	; 38
    435a:	0e 94 bb 31 	call	0x6376	; 0x6376 <TWI_MasterInterruptHandler>
}
    435e:	ff 91       	pop	r31
    4360:	ef 91       	pop	r30
    4362:	bf 91       	pop	r27
    4364:	af 91       	pop	r26
    4366:	9f 91       	pop	r25
    4368:	8f 91       	pop	r24
    436a:	7f 91       	pop	r23
    436c:	6f 91       	pop	r22
    436e:	5f 91       	pop	r21
    4370:	4f 91       	pop	r20
    4372:	3f 91       	pop	r19
    4374:	2f 91       	pop	r18
    4376:	0f 90       	pop	r0
    4378:	0b be       	out	0x3b, r0	; 59
    437a:	0f 90       	pop	r0
    437c:	09 be       	out	0x39, r0	; 57
    437e:	0f 90       	pop	r0
    4380:	08 be       	out	0x38, r0	; 56
    4382:	0f 90       	pop	r0
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	0f 90       	pop	r0
    4388:	1f 90       	pop	r1
    438a:	18 95       	reti

0000438c <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    438c:	0f 93       	push	r16
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	0f 92       	push	r0
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    4398:	2f b7       	in	r18, 0x3f	; 63
    439a:	29 83       	std	Y+1, r18	; 0x01
  cli();
    439c:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    439e:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    43a0:	fc 01       	movw	r30, r24
    43a2:	08 ed       	ldi	r16, 0xD8	; 216
    43a4:	04 bf       	out	0x34, r16	; 52
    43a6:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	8f bf       	out	0x3f, r24	; 63
}
    43ac:	0f 90       	pop	r0
    43ae:	cf 91       	pop	r28
    43b0:	df 91       	pop	r29
    43b2:	0f 91       	pop	r16
    43b4:	08 95       	ret

000043b6 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    43b6:	28 2f       	mov	r18, r24
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	c9 01       	movw	r24, r18
    43bc:	8c 7f       	andi	r24, 0xFC	; 252
    43be:	89 2b       	or	r24, r25
    43c0:	e1 f4       	brne	.+56     	; 0x43fa <ledWrite+0x44>
    43c2:	86 2f       	mov	r24, r22
    43c4:	8e 7f       	andi	r24, 0xFE	; 254
    43c6:	c9 f4       	brne	.+50     	; 0x43fa <ledWrite+0x44>
    43c8:	2c 5f       	subi	r18, 0xFC	; 252
    43ca:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    43cc:	61 30       	cpi	r22, 0x01	; 1
    43ce:	59 f4       	brne	.+22     	; 0x43e6 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <ledWrite+0x24>
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	2a 95       	dec	r18
    43dc:	e2 f7       	brpl	.-8      	; 0x43d6 <ledWrite+0x20>
    43de:	e0 e0       	ldi	r30, 0x00	; 0
    43e0:	f7 e0       	ldi	r31, 0x07	; 7
    43e2:	86 83       	std	Z+6, r24	; 0x06
    43e4:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <ledWrite+0x3a>
    43ec:	88 0f       	add	r24, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	2a 95       	dec	r18
    43f2:	e2 f7       	brpl	.-8      	; 0x43ec <ledWrite+0x36>
    43f4:	e0 e0       	ldi	r30, 0x00	; 0
    43f6:	f7 e0       	ldi	r31, 0x07	; 7
    43f8:	85 83       	std	Z+5, r24	; 0x05
    43fa:	08 95       	ret

000043fc <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    43fc:	28 2f       	mov	r18, r24
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	c9 01       	movw	r24, r18
    4402:	8c 7f       	andi	r24, 0xFC	; 252
    4404:	89 2b       	or	r24, r25
    4406:	61 f4       	brne	.+24     	; 0x4420 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4408:	2c 5f       	subi	r18, 0xFC	; 252
    440a:	3f 4f       	sbci	r19, 0xFF	; 255
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	02 c0       	rjmp	.+4      	; 0x4416 <ledToggle+0x1a>
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	2a 95       	dec	r18
    4418:	e2 f7       	brpl	.-8      	; 0x4412 <ledToggle+0x16>
    441a:	e0 e0       	ldi	r30, 0x00	; 0
    441c:	f7 e0       	ldi	r31, 0x07	; 7
    441e:	87 83       	std	Z+7, r24	; 0x07
    4420:	08 95       	ret

00004422 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4426:	a0 e0       	ldi	r26, 0x00	; 0
    4428:	b7 e0       	ldi	r27, 0x07	; 7
    442a:	60 e2       	ldi	r22, 0x20	; 32
    442c:	40 e2       	ldi	r20, 0x20	; 32
    442e:	53 e0       	ldi	r21, 0x03	; 3
    4430:	17 96       	adiw	r26, 0x07	; 7
    4432:	6c 93       	st	X, r22
    4434:	17 97       	sbiw	r26, 0x07	; 7
    4436:	8c ea       	ldi	r24, 0xAC	; 172
    4438:	9d e0       	ldi	r25, 0x0D	; 13
    443a:	fa 01       	movw	r30, r20
    443c:	31 97       	sbiw	r30, 0x01	; 1
    443e:	f1 f7       	brne	.-4      	; 0x443c <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4440:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4442:	d9 f7       	brne	.-10     	; 0x443a <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    4444:	2f 5f       	subi	r18, 0xFF	; 255
    4446:	3f 4f       	sbci	r19, 0xFF	; 255
    4448:	2a 30       	cpi	r18, 0x0A	; 10
    444a:	31 05       	cpc	r19, r1
    444c:	89 f7       	brne	.-30     	; 0x4430 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    444e:	08 95       	ret

00004450 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    4450:	48 2f       	mov	r20, r24
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	ca 01       	movw	r24, r20
    4456:	8c 7f       	andi	r24, 0xFC	; 252
    4458:	89 2b       	or	r24, r25
    445a:	79 f5       	brne	.+94     	; 0x44ba <digitalMode+0x6a>
    if (mode == OUTPUT) {
    445c:	66 23       	and	r22, r22
    445e:	b9 f4       	brne	.+46     	; 0x448e <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    4460:	4c 5f       	subi	r20, 0xFC	; 252
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	9c 01       	movw	r18, r24
    446a:	04 2e       	mov	r0, r20
    446c:	02 c0       	rjmp	.+4      	; 0x4472 <digitalMode+0x22>
    446e:	22 0f       	add	r18, r18
    4470:	33 1f       	adc	r19, r19
    4472:	0a 94       	dec	r0
    4474:	e2 f7       	brpl	.-8      	; 0x446e <digitalMode+0x1e>
    4476:	44 50       	subi	r20, 0x04	; 4
    4478:	50 40       	sbci	r21, 0x00	; 0
    447a:	e0 e2       	ldi	r30, 0x20	; 32
    447c:	f7 e0       	ldi	r31, 0x07	; 7
    447e:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    4480:	02 c0       	rjmp	.+4      	; 0x4486 <digitalMode+0x36>
    4482:	88 0f       	add	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	4a 95       	dec	r20
    4488:	e2 f7       	brpl	.-8      	; 0x4482 <digitalMode+0x32>
    448a:	81 83       	std	Z+1, r24	; 0x01
    448c:	08 95       	ret
    } else if (mode == INPUT) {
    448e:	61 30       	cpi	r22, 0x01	; 1
    4490:	a1 f4       	brne	.+40     	; 0x44ba <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	9c 01       	movw	r18, r24
    4498:	04 2e       	mov	r0, r20
    449a:	02 c0       	rjmp	.+4      	; 0x44a0 <digitalMode+0x50>
    449c:	22 0f       	add	r18, r18
    449e:	33 1f       	adc	r19, r19
    44a0:	0a 94       	dec	r0
    44a2:	e2 f7       	brpl	.-8      	; 0x449c <digitalMode+0x4c>
    44a4:	e0 e2       	ldi	r30, 0x20	; 32
    44a6:	f7 e0       	ldi	r31, 0x07	; 7
    44a8:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    44aa:	4c 5f       	subi	r20, 0xFC	; 252
    44ac:	5f 4f       	sbci	r21, 0xFF	; 255
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <digitalMode+0x64>
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	4a 95       	dec	r20
    44b6:	e2 f7       	brpl	.-8      	; 0x44b0 <digitalMode+0x60>
    44b8:	85 83       	std	Z+5, r24	; 0x05
    44ba:	08 95       	ret

000044bc <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    44bc:	28 2f       	mov	r18, r24
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	c9 01       	movw	r24, r18
    44c2:	8c 7f       	andi	r24, 0xFC	; 252
    44c4:	89 2b       	or	r24, r25
    44c6:	11 f0       	breq	.+4      	; 0x44cc <digitalRead+0x10>
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    44cc:	80 91 28 07 	lds	r24, 0x0728
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <digitalRead+0x1c>
    44d4:	95 95       	asr	r25
    44d6:	87 95       	ror	r24
    44d8:	2a 95       	dec	r18
    44da:	e2 f7       	brpl	.-8      	; 0x44d4 <digitalRead+0x18>
    44dc:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    44de:	08 95       	ret

000044e0 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    44e0:	28 2f       	mov	r18, r24
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	c9 01       	movw	r24, r18
    44e6:	8c 7f       	andi	r24, 0xFC	; 252
    44e8:	89 2b       	or	r24, r25
    44ea:	d1 f4       	brne	.+52     	; 0x4520 <digitalWrite+0x40>
    44ec:	86 2f       	mov	r24, r22
    44ee:	8e 7f       	andi	r24, 0xFE	; 254
    44f0:	b9 f4       	brne	.+46     	; 0x4520 <digitalWrite+0x40>
    if (value == 1) {
    44f2:	61 30       	cpi	r22, 0x01	; 1
    44f4:	59 f4       	brne	.+22     	; 0x450c <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <digitalWrite+0x20>
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	2a 95       	dec	r18
    4502:	e2 f7       	brpl	.-8      	; 0x44fc <digitalWrite+0x1c>
    4504:	e0 e2       	ldi	r30, 0x20	; 32
    4506:	f7 e0       	ldi	r31, 0x07	; 7
    4508:	85 83       	std	Z+5, r24	; 0x05
    450a:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	02 c0       	rjmp	.+4      	; 0x4516 <digitalWrite+0x36>
    4512:	88 0f       	add	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	2a 95       	dec	r18
    4518:	e2 f7       	brpl	.-8      	; 0x4512 <digitalWrite+0x32>
    451a:	e0 e2       	ldi	r30, 0x20	; 32
    451c:	f7 e0       	ldi	r31, 0x07	; 7
    451e:	86 83       	std	Z+6, r24	; 0x06
    4520:	08 95       	ret

00004522 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    4522:	28 2f       	mov	r18, r24
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	c9 01       	movw	r24, r18
    4528:	8c 7f       	andi	r24, 0xFC	; 252
    452a:	89 2b       	or	r24, r25
    452c:	51 f4       	brne	.+20     	; 0x4542 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	02 c0       	rjmp	.+4      	; 0x4538 <digitalToggle+0x16>
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	2a 95       	dec	r18
    453a:	e2 f7       	brpl	.-8      	; 0x4534 <digitalToggle+0x12>
    453c:	e0 e2       	ldi	r30, 0x20	; 32
    453e:	f7 e0       	ldi	r31, 0x07	; 7
    4540:	87 83       	std	Z+7, r24	; 0x07
    4542:	08 95       	ret

00004544 <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    4544:	a2 e0       	ldi	r26, 0x02	; 2
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	e8 ea       	ldi	r30, 0xA8	; 168
    454a:	f2 e2       	ldi	r31, 0x22	; 34
    454c:	0c 94 2e 59 	jmp	0xb25c	; 0xb25c <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    4550:	28 2f       	mov	r18, r24
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	c9 01       	movw	r24, r18
    4556:	88 7f       	andi	r24, 0xF8	; 248
    4558:	89 2b       	or	r24, r25
    455a:	19 f0       	breq	.+6      	; 0x4562 <analogRead+0x1e>
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	5c c0       	rjmp	.+184    	; 0x461a <analogRead+0xd6>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
	//coding = 0,the output coding is twos complement
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4562:	80 e1       	ldi	r24, 0x10	; 16
    4564:	e0 e4       	ldi	r30, 0x40	; 64
    4566:	f6 e0       	ldi	r31, 0x06	; 6
    4568:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    456a:	c9 01       	movw	r24, r18
    456c:	87 70       	andi	r24, 0x07	; 7
    456e:	90 70       	andi	r25, 0x00	; 0
    4570:	88 0f       	add	r24, r24
    4572:	99 1f       	adc	r25, r25
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	80 68       	ori	r24, 0x80	; 128
    457a:	e0 ec       	ldi	r30, 0xC0	; 192
    457c:	f8 e0       	ldi	r31, 0x08	; 8
    457e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4580:	80 91 c2 08 	lds	r24, 0x08C2
    4584:	87 ff       	sbrs	r24, 7
    4586:	fc cf       	rjmp	.-8      	; 0x4580 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    4588:	80 e1       	ldi	r24, 0x10	; 16
    458a:	e0 ec       	ldi	r30, 0xC0	; 192
    458c:	f8 e0       	ldi	r31, 0x08	; 8
    458e:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4590:	80 91 c2 08 	lds	r24, 0x08C2
    4594:	87 ff       	sbrs	r24, 7
    4596:	fc cf       	rjmp	.-8      	; 0x4590 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4598:	e0 e4       	ldi	r30, 0x40	; 64
    459a:	f6 e0       	ldi	r31, 0x06	; 6
    459c:	80 e1       	ldi	r24, 0x10	; 16
    459e:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    45a0:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    45a2:	e0 ec       	ldi	r30, 0xC0	; 192
    45a4:	f8 e0       	ldi	r31, 0x08	; 8
    45a6:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    45a8:	80 91 c2 08 	lds	r24, 0x08C2
    45ac:	87 ff       	sbrs	r24, 7
    45ae:	fc cf       	rjmp	.-8      	; 0x45a8 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    45b0:	de 01       	movw	r26, r28
    45b2:	11 96       	adiw	r26, 0x01	; 1
    45b4:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    45b8:	e0 ec       	ldi	r30, 0xC0	; 192
    45ba:	f8 e0       	ldi	r31, 0x08	; 8
    45bc:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    45be:	80 91 c2 08 	lds	r24, 0x08C2
    45c2:	87 ff       	sbrs	r24, 7
    45c4:	fc cf       	rjmp	.-8      	; 0x45be <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    45c6:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    45ca:	11 96       	adiw	r26, 0x01	; 1
    45cc:	9c 93       	st	X, r25
    45ce:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    45d0:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    45d2:	80 e1       	ldi	r24, 0x10	; 16
    45d4:	e0 e4       	ldi	r30, 0x40	; 64
    45d6:	f6 e0       	ldi	r31, 0x06	; 6
    45d8:	85 83       	std	Z+5, r24	; 0x05

	//ADC0-1 -5V-5V  //ADC2-7 0-10V
	if (!(ch& ~1))	
    45da:	2e 7f       	andi	r18, 0xFE	; 254
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	9a 81       	ldd	r25, Y+2	; 0x02
    45e0:	23 2b       	or	r18, r19
    45e2:	69 f4       	brne	.+26     	; 0x45fe <analogRead+0xba>
    45e4:	9c 01       	movw	r18, r24
    45e6:	3f 70       	andi	r19, 0x0F	; 15
		//in this way, 0v ->0, -5V -> -2047, 5V->2047

		//-5V-0V
		if (w1 & 1 << 12) { 
    45e8:	94 ff       	sbrs	r25, 4
    45ea:	04 c0       	rjmp	.+8      	; 0x45f4 <analogRead+0xb0>
		//input value is -5V-0v, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff)>>1;
    45ec:	35 95       	asr	r19
    45ee:	27 95       	ror	r18
		  w1 = w1 | 0xf800;
    45f0:	38 6f       	ori	r19, 0xF8	; 248
    45f2:	02 c0       	rjmp	.+4      	; 0x45f8 <analogRead+0xb4>
		} 
		else{   //0-5V
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is 0-5V, 12 ADC code from 0x0000 to 0x0fff
		 //remove the 3 channel id bits
		  w1 = (w1 & 0x0fff)>>1; 
    45f4:	35 95       	asr	r19
    45f6:	27 95       	ror	r18
    45f8:	29 83       	std	Y+1, r18	; 0x01
    45fa:	3a 83       	std	Y+2, r19	; 0x02
    45fc:	0c c0       	rjmp	.+24     	; 0x4616 <analogRead+0xd2>
		  //output value is now 0x0000 to 0x07ff
		}
	else
		//in this way, 0v ->0, 5V -> 2047, 10V->4095
		if (w1 & 1 << 12) { 
    45fe:	94 ff       	sbrs	r25, 4
    4600:	04 c0       	rjmp	.+8      	; 0x460a <analogRead+0xc6>
		//input value is less than 5V, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff) >> 1;
    4602:	9f 70       	andi	r25, 0x0F	; 15
    4604:	95 95       	asr	r25
    4606:	87 95       	ror	r24
    4608:	04 c0       	rjmp	.+8      	; 0x4612 <analogRead+0xce>
		  //output value now is from 0x0000 to 0x07ff
		} 
		else{   
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is bigger than 5v, 12 ADC code from 0x0000 to 0x0fff
		  w1 = (w1 | 0x1000) >> 1;
    460a:	90 61       	ori	r25, 0x10	; 16
    460c:	95 95       	asr	r25
    460e:	87 95       	ror	r24
		 //remove the 3 channel id bits
		  w1 = w1 & 0x0fff; 
    4610:	9f 70       	andi	r25, 0x0F	; 15
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	9a 83       	std	Y+2, r25	; 0x02
		  //output value is now 0x0800 to 0x0fff
		}
    return w1;
    4616:	29 81       	ldd	r18, Y+1	; 0x01
    4618:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else
    return 0;
}
    461a:	c9 01       	movw	r24, r18
    461c:	22 96       	adiw	r28, 0x02	; 2
    461e:	e2 e0       	ldi	r30, 0x02	; 2
    4620:	0c 94 4a 59 	jmp	0xb294	; 0xb294 <__epilogue_restores__+0x20>

00004624 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    4624:	98 2f       	mov	r25, r24
//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
//chanel number should from 0 to 3 and value ranges from -32767 to 32767
  if (!((ch & ~3) || ((value > 32767) || (value < -32767)))) {
    4626:	8c 7f       	andi	r24, 0xFC	; 252
    4628:	11 f5       	brne	.+68     	; 0x466e <analogWrite+0x4a>
    462a:	80 e8       	ldi	r24, 0x80	; 128
    462c:	60 30       	cpi	r22, 0x00	; 0
    462e:	78 07       	cpc	r23, r24
    4630:	f1 f0       	breq	.+60     	; 0x466e <analogWrite+0x4a>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    4632:	80 e1       	ldi	r24, 0x10	; 16
    4634:	e0 e6       	ldi	r30, 0x60	; 96
    4636:	f6 e0       	ldi	r31, 0x06	; 6
    4638:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    463a:	97 70       	andi	r25, 0x07	; 7
    463c:	e0 ec       	ldi	r30, 0xC0	; 192
    463e:	f9 e0       	ldi	r31, 0x09	; 9
    4640:	93 83       	std	Z+3, r25	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4642:	80 91 c2 09 	lds	r24, 0x09C2
    4646:	87 ff       	sbrs	r24, 7
    4648:	fc cf       	rjmp	.-8      	; 0x4642 <analogWrite+0x1e>
	SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    464a:	e0 ec       	ldi	r30, 0xC0	; 192
    464c:	f9 e0       	ldi	r31, 0x09	; 9
    464e:	73 83       	std	Z+3, r23	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    4650:	80 91 c2 09 	lds	r24, 0x09C2
    4654:	87 ff       	sbrs	r24, 7
    4656:	fc cf       	rjmp	.-8      	; 0x4650 <analogWrite+0x2c>
	SPID.DATA = (uint8_t)(value & 0xff) ;
    4658:	e0 ec       	ldi	r30, 0xC0	; 192
    465a:	f9 e0       	ldi	r31, 0x09	; 9
    465c:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    465e:	80 91 c2 09 	lds	r24, 0x09C2
    4662:	87 ff       	sbrs	r24, 7
    4664:	fc cf       	rjmp	.-8      	; 0x465e <analogWrite+0x3a>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    4666:	80 e1       	ldi	r24, 0x10	; 16
    4668:	e0 e6       	ldi	r30, 0x60	; 96
    466a:	f6 e0       	ldi	r31, 0x06	; 6
    466c:	85 83       	std	Z+5, r24	; 0x05
    466e:	08 95       	ret

00004670 <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    4670:	a0 e0       	ldi	r26, 0x00	; 0
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	ee e3       	ldi	r30, 0x3E	; 62
    4676:	f3 e2       	ldi	r31, 0x23	; 35
    4678:	0c 94 22 59 	jmp	0xb244	; 0xb244 <__prologue_saves__+0x8>
    467c:	b8 2e       	mov	r11, r24
    467e:	c0 e0       	ldi	r28, 0x00	; 0
    4680:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4682:	00 e2       	ldi	r16, 0x20	; 32
    4684:	17 e0       	ldi	r17, 0x07	; 7
    4686:	66 24       	eor	r6, r6
    4688:	63 94       	inc	r6
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	78 2e       	mov	r7, r24
    468e:	b4 e0       	ldi	r27, 0x04	; 4
    4690:	8b 2e       	mov	r8, r27
    4692:	a8 e0       	ldi	r26, 0x08	; 8
    4694:	9a 2e       	mov	r9, r26
    4696:	f0 e2       	ldi	r31, 0x20	; 32
    4698:	ef 2e       	mov	r14, r31
    469a:	f3 e0       	ldi	r31, 0x03	; 3
    469c:	ff 2e       	mov	r15, r31

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    469e:	c1 2c       	mov	r12, r1
    46a0:	e7 e0       	ldi	r30, 0x07	; 7
    46a2:	de 2e       	mov	r13, r30
    46a4:	70 e2       	ldi	r23, 0x20	; 32
    46a6:	a7 2e       	mov	r10, r23

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    46a8:	f8 01       	movw	r30, r16
    46aa:	67 82       	std	Z+7, r6	; 0x07
    46ac:	77 82       	std	Z+7, r7	; 0x07
    46ae:	87 82       	std	Z+7, r8	; 0x07
    46b0:	97 82       	std	Z+7, r9	; 0x07
    46b2:	88 ee       	ldi	r24, 0xE8	; 232
    46b4:	93 e0       	ldi	r25, 0x03	; 3
    46b6:	f7 01       	movw	r30, r14
    46b8:	31 97       	sbiw	r30, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46be:	d9 f7       	brne	.-10     	; 0x46b6 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    46c0:	8b 2d       	mov	r24, r11
    46c2:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
    46c6:	bc 01       	movw	r22, r24
    46c8:	28 ee       	ldi	r18, 0xE8	; 232
    46ca:	33 e0       	ldi	r19, 0x03	; 3
    46cc:	f7 01       	movw	r30, r14
    46ce:	31 97       	sbiw	r30, 0x01	; 1
    46d0:	f1 f7       	brne	.-4      	; 0x46ce <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46d2:	21 50       	subi	r18, 0x01	; 1
    46d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d6:	d1 f7       	brne	.-12     	; 0x46cc <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    if (k % 2)
    46de:	c0 ff       	sbrs	r28, 0
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    46e2:	f6 01       	movw	r30, r12
    46e4:	a7 82       	std	Z+7, r10	; 0x07
    46e6:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    46e8:	cc 33       	cpi	r28, 0x3C	; 60
    46ea:	d1 05       	cpc	r29, r1
    46ec:	e9 f6       	brne	.-70     	; 0x46a8 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per square wave pulse
  }
}
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	ee e0       	ldi	r30, 0x0E	; 14
    46f4:	0c 94 3e 59 	jmp	0xb27c	; 0xb27c <__epilogue_restores__+0x8>

000046f8 <SystemReset>:

void SystemReset(void) {
    46f8:	0f 93       	push	r16
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	0f 92       	push	r0
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    4704:	8f b7       	in	r24, 0x3f	; 63
    4706:	89 83       	std	Y+1, r24	; 0x01
  cli();
    4708:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    470a:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    470c:	21 e0       	ldi	r18, 0x01	; 1
    470e:	89 e7       	ldi	r24, 0x79	; 121
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	fc 01       	movw	r30, r24
    4714:	08 ed       	ldi	r16, 0xD8	; 216
    4716:	04 bf       	out	0x34, r16	; 52
    4718:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    471e:	0f 90       	pop	r0
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	0f 91       	pop	r16
    4726:	08 95       	ret

00004728 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    4728:	a0 e0       	ldi	r26, 0x00	; 0
    472a:	b0 e0       	ldi	r27, 0x00	; 0
    472c:	ea e9       	ldi	r30, 0x9A	; 154
    472e:	f3 e2       	ldi	r31, 0x23	; 35
    4730:	0c 94 24 59 	jmp	0xb248	; 0xb248 <__prologue_saves__+0xc>
    4734:	98 2e       	mov	r9, r24
    4736:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4738:	40 ea       	ldi	r20, 0xA0	; 160
    473a:	a4 2e       	mov	r10, r20
    473c:	4f e0       	ldi	r20, 0x0F	; 15
    473e:	b4 2e       	mov	r11, r20
    4740:	30 e8       	ldi	r19, 0x80	; 128
    4742:	c3 2e       	mov	r12, r19
    4744:	3e e3       	ldi	r19, 0x3E	; 62
    4746:	d3 2e       	mov	r13, r19

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4748:	e1 2c       	mov	r14, r1
    474a:	27 e0       	ldi	r18, 0x07	; 7
    474c:	f2 2e       	mov	r15, r18
    474e:	90 e2       	ldi	r25, 0x20	; 32
    4750:	89 2e       	mov	r8, r25
    4752:	1d c0       	rjmp	.+58     	; 0x478e <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4754:	14 36       	cpi	r17, 0x64	; 100
    4756:	10 f4       	brcc	.+4      	; 0x475c <test_ADC+0x34>
    4758:	be 01       	movw	r22, r28
    475a:	03 c0       	rjmp	.+6      	; 0x4762 <test_ADC+0x3a>
    475c:	b5 01       	movw	r22, r10
    475e:	6c 1b       	sub	r22, r28
    4760:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    4768:	89 2d       	mov	r24, r9
    476a:	0e 94 a2 22 	call	0x4544	; 0x4544 <analogRead>
    476e:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	0e 94 12 23 	call	0x4624	; 0x4624 <analogWrite>
    4776:	c6 01       	movw	r24, r12
    4778:	01 97       	sbiw	r24, 0x01	; 1
    477a:	f1 f7       	brne	.-4      	; 0x4778 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    477c:	1f 5f       	subi	r17, 0xFF	; 255
    477e:	64 96       	adiw	r28, 0x14	; 20
    4780:	18 3c       	cpi	r17, 0xC8	; 200
    4782:	41 f7       	brne	.-48     	; 0x4754 <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4784:	f7 01       	movw	r30, r14
    4786:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    4788:	0f 5f       	subi	r16, 0xFF	; 255
    478a:	0e 31       	cpi	r16, 0x1E	; 30
    478c:	21 f0       	breq	.+8      	; 0x4796 <test_ADC+0x6e>
    478e:	10 e0       	ldi	r17, 0x00	; 0
    4790:	c0 e0       	ldi	r28, 0x00	; 0
    4792:	d0 e0       	ldi	r29, 0x00	; 0
    4794:	df cf       	rjmp	.-66     	; 0x4754 <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    479a:	ec e0       	ldi	r30, 0x0C	; 12
    479c:	0c 94 40 59 	jmp	0xb280	; 0xb280 <__epilogue_restores__+0xc>

000047a0 <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    47a0:	bc 01       	movw	r22, r24
    47a2:	27 ea       	ldi	r18, 0xA7	; 167
    47a4:	3c e0       	ldi	r19, 0x0C	; 12
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	50 e0       	ldi	r21, 0x00	; 0
    47aa:	08 c0       	rjmp	.+16     	; 0x47bc <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    47ac:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    47ae:	2f 5f       	subi	r18, 0xFF	; 255
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	e4 91       	lpm	r30, Z+
    47b4:	ee 23       	and	r30, r30
    47b6:	d1 f7       	brne	.-12     	; 0x47ac <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    47b8:	4f 5f       	subi	r20, 0xFF	; 255
    47ba:	5f 4f       	sbci	r21, 0xFF	; 255
    47bc:	46 17       	cp	r20, r22
    47be:	57 07       	cpc	r21, r23
    47c0:	21 f0       	breq	.+8      	; 0x47ca <put_rc+0x2a>
    47c2:	f9 01       	movw	r30, r18
    47c4:	84 91       	lpm	r24, Z+
    47c6:	88 23       	and	r24, r24
    47c8:	89 f7       	brne	.-30     	; 0x47ac <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <put_rc+0x2c>
    47cc:	0f 92       	push	r0
    47ce:	83 ea       	ldi	r24, 0xA3	; 163
    47d0:	9c e0       	ldi	r25, 0x0C	; 12
    47d2:	ed b7       	in	r30, 0x3d	; 61
    47d4:	fe b7       	in	r31, 0x3e	; 62
    47d6:	81 83       	std	Z+1, r24	; 0x01
    47d8:	92 83       	std	Z+2, r25	; 0x02
    47da:	23 83       	std	Z+3, r18	; 0x03
    47dc:	34 83       	std	Z+4, r19	; 0x04
    47de:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
}
    47ea:	08 95       	ret

000047ec <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    47ec:	a0 e0       	ldi	r26, 0x00	; 0
    47ee:	b0 e0       	ldi	r27, 0x00	; 0
    47f0:	ec ef       	ldi	r30, 0xFC	; 252
    47f2:	f3 e2       	ldi	r31, 0x23	; 35
    47f4:	0c 94 25 59 	jmp	0xb24a	; 0xb24a <__prologue_saves__+0xe>
    47f8:	5c 01       	movw	r10, r24
    47fa:	6a 01       	movw	r12, r20
    47fc:	7b 01       	movw	r14, r22
    47fe:	92 2e       	mov	r9, r18
    4800:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4802:	89 e9       	ldi	r24, 0x99	; 153
    4804:	9f e0       	ldi	r25, 0x0F	; 15
    4806:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    buff[0] = 'g';
    480a:	87 e6       	ldi	r24, 0x67	; 103
    480c:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    480e:	bb 27       	eor	r27, r27
    4810:	af 2d       	mov	r26, r15
    4812:	9e 2d       	mov	r25, r14
    4814:	8d 2d       	mov	r24, r13
    4816:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4818:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    481a:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    481c:	85 e4       	ldi	r24, 0x45	; 69
    481e:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4820:	c5 01       	movw	r24, r10
    4822:	60 e7       	ldi	r22, 0x70	; 112
    4824:	a8 01       	movw	r20, r16
    4826:	25 e0       	ldi	r18, 0x05	; 5
    4828:	09 2d       	mov	r16, r9
    482a:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    482e:	d5 01       	movw	r26, r10
    4830:	1d 96       	adiw	r26, 0x0d	; 13
    4832:	8c 91       	ld	r24, X
    4834:	1d 97       	sbiw	r26, 0x0d	; 13
    4836:	88 23       	and	r24, r24
    4838:	d1 f7       	brne	.-12     	; 0x482e <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    483a:	1e 96       	adiw	r26, 0x0e	; 14
    483c:	8c 91       	ld	r24, X
    483e:	1e 97       	sbiw	r26, 0x0e	; 14
    4840:	81 30       	cpi	r24, 0x01	; 1
    4842:	b9 f0       	breq	.+46     	; 0x4872 <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4844:	1e 96       	adiw	r26, 0x0e	; 14
    4846:	2c 91       	ld	r18, X
    4848:	00 d0       	rcall	.+0      	; 0x484a <verifyEEPage+0x5e>
    484a:	0f 92       	push	r0
    484c:	ed b7       	in	r30, 0x3d	; 61
    484e:	fe b7       	in	r31, 0x3e	; 62
    4850:	31 96       	adiw	r30, 0x01	; 1
    4852:	8c e7       	ldi	r24, 0x7C	; 124
    4854:	9f e0       	ldi	r25, 0x0F	; 15
    4856:	ad b7       	in	r26, 0x3d	; 61
    4858:	be b7       	in	r27, 0x3e	; 62
    485a:	11 96       	adiw	r26, 0x01	; 1
    485c:	8d 93       	st	X+, r24
    485e:	9c 93       	st	X, r25
    4860:	12 97       	sbiw	r26, 0x02	; 2
    4862:	22 83       	std	Z+2, r18	; 0x02
    4864:	13 82       	std	Z+3, r1	; 0x03
    4866:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	de 01       	movw	r26, r28
    4874:	31 e0       	ldi	r19, 0x01	; 1
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	0d c0       	rjmp	.+26     	; 0x4894 <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    487a:	e5 01       	movw	r28, r10
    487c:	ed 81       	ldd	r30, Y+5	; 0x05
    487e:	fe 81       	ldd	r31, Y+6	; 0x06
    4880:	e2 0f       	add	r30, r18
    4882:	f1 1d       	adc	r31, r1
    4884:	90 81       	ld	r25, Z
    4886:	15 96       	adiw	r26, 0x05	; 5
    4888:	8c 91       	ld	r24, X
    488a:	15 97       	sbiw	r26, 0x05	; 5
    488c:	98 13       	cpse	r25, r24
    488e:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4890:	2f 5f       	subi	r18, 0xFF	; 255
    4892:	11 96       	adiw	r26, 0x01	; 1
    4894:	29 15       	cp	r18, r9
    4896:	88 f3       	brcs	.-30     	; 0x487a <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4898:	83 2f       	mov	r24, r19
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	cd b7       	in	r28, 0x3d	; 61
    489e:	de b7       	in	r29, 0x3e	; 62
    48a0:	eb e0       	ldi	r30, 0x0B	; 11
    48a2:	0c 94 41 59 	jmp	0xb282	; 0xb282 <__epilogue_restores__+0xe>

000048a6 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	e9 e5       	ldi	r30, 0x59	; 89
    48ac:	f4 e2       	ldi	r31, 0x24	; 36
    48ae:	0c 94 25 59 	jmp	0xb24a	; 0xb24a <__prologue_saves__+0xe>
    48b2:	5c 01       	movw	r10, r24
    48b4:	6a 01       	movw	r12, r20
    48b6:	7b 01       	movw	r14, r22
    48b8:	92 2e       	mov	r9, r18
    48ba:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    48bc:	88 eb       	ldi	r24, 0xB8	; 184
    48be:	9f e0       	ldi	r25, 0x0F	; 15
    48c0:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    buff[0] = 'g';
    48c4:	87 e6       	ldi	r24, 0x67	; 103
    48c6:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    48c8:	bb 27       	eor	r27, r27
    48ca:	af 2d       	mov	r26, r15
    48cc:	9e 2d       	mov	r25, r14
    48ce:	8d 2d       	mov	r24, r13
    48d0:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    48d2:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    48d4:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    48d6:	85 e4       	ldi	r24, 0x45	; 69
    48d8:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    48da:	c5 01       	movw	r24, r10
    48dc:	60 e7       	ldi	r22, 0x70	; 112
    48de:	a8 01       	movw	r20, r16
    48e0:	25 e0       	ldi	r18, 0x05	; 5
    48e2:	09 2d       	mov	r16, r9
    48e4:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    48e8:	d5 01       	movw	r26, r10
    48ea:	1d 96       	adiw	r26, 0x0d	; 13
    48ec:	8c 91       	ld	r24, X
    48ee:	1d 97       	sbiw	r26, 0x0d	; 13
    48f0:	88 23       	and	r24, r24
    48f2:	d1 f7       	brne	.-12     	; 0x48e8 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    48f4:	1e 96       	adiw	r26, 0x0e	; 14
    48f6:	8c 91       	ld	r24, X
    48f8:	1e 97       	sbiw	r26, 0x0e	; 14
    48fa:	81 30       	cpi	r24, 0x01	; 1
    48fc:	b9 f0       	breq	.+46     	; 0x492c <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    48fe:	1e 96       	adiw	r26, 0x0e	; 14
    4900:	2c 91       	ld	r18, X
    4902:	00 d0       	rcall	.+0      	; 0x4904 <readEEPage+0x5e>
    4904:	0f 92       	push	r0
    4906:	ed b7       	in	r30, 0x3d	; 61
    4908:	fe b7       	in	r31, 0x3e	; 62
    490a:	31 96       	adiw	r30, 0x01	; 1
    490c:	8b e9       	ldi	r24, 0x9B	; 155
    490e:	9f e0       	ldi	r25, 0x0F	; 15
    4910:	ad b7       	in	r26, 0x3d	; 61
    4912:	be b7       	in	r27, 0x3e	; 62
    4914:	11 96       	adiw	r26, 0x01	; 1
    4916:	8d 93       	st	X+, r24
    4918:	9c 93       	st	X, r25
    491a:	12 97       	sbiw	r26, 0x02	; 2
    491c:	22 83       	std	Z+2, r18	; 0x02
    491e:	13 82       	std	Z+3, r1	; 0x03
    4920:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	de 01       	movw	r26, r28
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0a c0       	rjmp	.+20     	; 0x4946 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4932:	e5 01       	movw	r28, r10
    4934:	ed 81       	ldd	r30, Y+5	; 0x05
    4936:	fe 81       	ldd	r31, Y+6	; 0x06
    4938:	e9 0f       	add	r30, r25
    493a:	f1 1d       	adc	r31, r1
    493c:	80 81       	ld	r24, Z
    493e:	14 96       	adiw	r26, 0x04	; 4
    4940:	8c 93       	st	X, r24
    4942:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4944:	9f 5f       	subi	r25, 0xFF	; 255
    4946:	11 96       	adiw	r26, 0x01	; 1
    4948:	99 15       	cp	r25, r9
    494a:	98 f3       	brcs	.-26     	; 0x4932 <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    494c:	cd b7       	in	r28, 0x3d	; 61
    494e:	de b7       	in	r29, 0x3e	; 62
    4950:	eb e0       	ldi	r30, 0x0B	; 11
    4952:	0c 94 41 59 	jmp	0xb282	; 0xb282 <__epilogue_restores__+0xe>

00004956 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4956:	a0 e0       	ldi	r26, 0x00	; 0
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	e1 eb       	ldi	r30, 0xB1	; 177
    495c:	f4 e2       	ldi	r31, 0x24	; 36
    495e:	0c 94 27 59 	jmp	0xb24e	; 0xb24e <__prologue_saves__+0x12>
    4962:	ec 01       	movw	r28, r24
    4964:	6a 01       	movw	r12, r20
    4966:	7b 01       	movw	r14, r22
    4968:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    496a:	89 ed       	ldi	r24, 0xD9	; 217
    496c:	9f e0       	ldi	r25, 0x0F	; 15
    496e:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    buff[0] = 'B';
    4972:	82 e4       	ldi	r24, 0x42	; 66
    4974:	d8 01       	movw	r26, r16
    4976:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4978:	bb 27       	eor	r27, r27
    497a:	af 2d       	mov	r26, r15
    497c:	9e 2d       	mov	r25, r14
    497e:	8d 2d       	mov	r24, r13
    4980:	f8 01       	movw	r30, r16
    4982:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4984:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    4986:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    4988:	85 e4       	ldi	r24, 0x45	; 69
    498a:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    498c:	f5 e0       	ldi	r31, 0x05	; 5
    498e:	bf 0e       	add	r11, r31
    4990:	ce 01       	movw	r24, r28
    4992:	60 e7       	ldi	r22, 0x70	; 112
    4994:	a8 01       	movw	r20, r16
    4996:	2b 2d       	mov	r18, r11
    4998:	00 e0       	ldi	r16, 0x00	; 0
    499a:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    499e:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a0:	88 23       	and	r24, r24
    49a2:	e9 f7       	brne	.-6      	; 0x499e <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    49a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    49a6:	81 30       	cpi	r24, 0x01	; 1
    49a8:	b1 f0       	breq	.+44     	; 0x49d6 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    49aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <progEEPage+0x58>
    49ae:	0f 92       	push	r0
    49b0:	ed b7       	in	r30, 0x3d	; 61
    49b2:	fe b7       	in	r31, 0x3e	; 62
    49b4:	31 96       	adiw	r30, 0x01	; 1
    49b6:	8a eb       	ldi	r24, 0xBA	; 186
    49b8:	9f e0       	ldi	r25, 0x0F	; 15
    49ba:	ad b7       	in	r26, 0x3d	; 61
    49bc:	be b7       	in	r27, 0x3e	; 62
    49be:	11 96       	adiw	r26, 0x01	; 1
    49c0:	8d 93       	st	X+, r24
    49c2:	9c 93       	st	X, r25
    49c4:	12 97       	sbiw	r26, 0x02	; 2
    49c6:	22 83       	std	Z+2, r18	; 0x02
    49c8:	13 82       	std	Z+3, r1	; 0x03
    49ca:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
    }
}
    49d6:	cd b7       	in	r28, 0x3d	; 61
    49d8:	de b7       	in	r29, 0x3e	; 62
    49da:	e9 e0       	ldi	r30, 0x09	; 9
    49dc:	0c 94 43 59 	jmp	0xb286	; 0xb286 <__epilogue_restores__+0x12>

000049e0 <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    49e0:	a0 e0       	ldi	r26, 0x00	; 0
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	e6 ef       	ldi	r30, 0xF6	; 246
    49e6:	f4 e2       	ldi	r31, 0x24	; 36
    49e8:	0c 94 25 59 	jmp	0xb24a	; 0xb24a <__prologue_saves__+0xe>
    49ec:	5c 01       	movw	r10, r24
    49ee:	6a 01       	movw	r12, r20
    49f0:	7b 01       	movw	r14, r22
    49f2:	92 2e       	mov	r9, r18
    49f4:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    49f6:	88 ef       	ldi	r24, 0xF8	; 248
    49f8:	9f e0       	ldi	r25, 0x0F	; 15
    49fa:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    buff[0] = 'g';
    49fe:	87 e6       	ldi	r24, 0x67	; 103
    4a00:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4a02:	bb 27       	eor	r27, r27
    4a04:	af 2d       	mov	r26, r15
    4a06:	9e 2d       	mov	r25, r14
    4a08:	8d 2d       	mov	r24, r13
    4a0a:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4a0c:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4a0e:	89 2d       	mov	r24, r9
    4a10:	86 95       	lsr	r24
    4a12:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4a14:	86 e4       	ldi	r24, 0x46	; 70
    4a16:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4a18:	c5 01       	movw	r24, r10
    4a1a:	60 e7       	ldi	r22, 0x70	; 112
    4a1c:	a8 01       	movw	r20, r16
    4a1e:	25 e0       	ldi	r18, 0x05	; 5
    4a20:	09 2d       	mov	r16, r9
    4a22:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4a26:	d5 01       	movw	r26, r10
    4a28:	1d 96       	adiw	r26, 0x0d	; 13
    4a2a:	8c 91       	ld	r24, X
    4a2c:	1d 97       	sbiw	r26, 0x0d	; 13
    4a2e:	88 23       	and	r24, r24
    4a30:	d1 f7       	brne	.-12     	; 0x4a26 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4a32:	1e 96       	adiw	r26, 0x0e	; 14
    4a34:	8c 91       	ld	r24, X
    4a36:	1e 97       	sbiw	r26, 0x0e	; 14
    4a38:	81 30       	cpi	r24, 0x01	; 1
    4a3a:	b9 f0       	breq	.+46     	; 0x4a6a <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4a3c:	1e 96       	adiw	r26, 0x0e	; 14
    4a3e:	2c 91       	ld	r18, X
    4a40:	00 d0       	rcall	.+0      	; 0x4a42 <verifyPage+0x62>
    4a42:	0f 92       	push	r0
    4a44:	ed b7       	in	r30, 0x3d	; 61
    4a46:	fe b7       	in	r31, 0x3e	; 62
    4a48:	31 96       	adiw	r30, 0x01	; 1
    4a4a:	8b ed       	ldi	r24, 0xDB	; 219
    4a4c:	9f e0       	ldi	r25, 0x0F	; 15
    4a4e:	ad b7       	in	r26, 0x3d	; 61
    4a50:	be b7       	in	r27, 0x3e	; 62
    4a52:	11 96       	adiw	r26, 0x01	; 1
    4a54:	8d 93       	st	X+, r24
    4a56:	9c 93       	st	X, r25
    4a58:	12 97       	sbiw	r26, 0x02	; 2
    4a5a:	22 83       	std	Z+2, r18	; 0x02
    4a5c:	13 82       	std	Z+3, r1	; 0x03
    4a5e:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	0f 90       	pop	r0
    4a6a:	de 01       	movw	r26, r28
    4a6c:	31 e0       	ldi	r19, 0x01	; 1
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	0d c0       	rjmp	.+26     	; 0x4a8c <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4a72:	e5 01       	movw	r28, r10
    4a74:	ed 81       	ldd	r30, Y+5	; 0x05
    4a76:	fe 81       	ldd	r31, Y+6	; 0x06
    4a78:	e2 0f       	add	r30, r18
    4a7a:	f1 1d       	adc	r31, r1
    4a7c:	90 81       	ld	r25, Z
    4a7e:	15 96       	adiw	r26, 0x05	; 5
    4a80:	8c 91       	ld	r24, X
    4a82:	15 97       	sbiw	r26, 0x05	; 5
    4a84:	98 13       	cpse	r25, r24
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4a88:	2f 5f       	subi	r18, 0xFF	; 255
    4a8a:	11 96       	adiw	r26, 0x01	; 1
    4a8c:	29 15       	cp	r18, r9
    4a8e:	88 f3       	brcs	.-30     	; 0x4a72 <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4a90:	83 2f       	mov	r24, r19
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	eb e0       	ldi	r30, 0x0B	; 11
    4a9a:	0c 94 41 59 	jmp	0xb282	; 0xb282 <__epilogue_restores__+0xe>

00004a9e <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4a9e:	a0 e0       	ldi	r26, 0x00	; 0
    4aa0:	b0 e0       	ldi	r27, 0x00	; 0
    4aa2:	e5 e5       	ldi	r30, 0x55	; 85
    4aa4:	f5 e2       	ldi	r31, 0x25	; 37
    4aa6:	0c 94 25 59 	jmp	0xb24a	; 0xb24a <__prologue_saves__+0xe>
    4aaa:	5c 01       	movw	r10, r24
    4aac:	6a 01       	movw	r12, r20
    4aae:	7b 01       	movw	r14, r22
    4ab0:	92 2e       	mov	r9, r18
    4ab2:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4ab4:	87 e1       	ldi	r24, 0x17	; 23
    4ab6:	90 e1       	ldi	r25, 0x10	; 16
    4ab8:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    buff[0] = 'g';
    4abc:	87 e6       	ldi	r24, 0x67	; 103
    4abe:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4ac0:	bb 27       	eor	r27, r27
    4ac2:	af 2d       	mov	r26, r15
    4ac4:	9e 2d       	mov	r25, r14
    4ac6:	8d 2d       	mov	r24, r13
    4ac8:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4aca:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4acc:	89 2d       	mov	r24, r9
    4ace:	86 95       	lsr	r24
    4ad0:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4ad2:	86 e4       	ldi	r24, 0x46	; 70
    4ad4:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4ad6:	c5 01       	movw	r24, r10
    4ad8:	60 e7       	ldi	r22, 0x70	; 112
    4ada:	a8 01       	movw	r20, r16
    4adc:	25 e0       	ldi	r18, 0x05	; 5
    4ade:	09 2d       	mov	r16, r9
    4ae0:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4ae4:	d5 01       	movw	r26, r10
    4ae6:	1d 96       	adiw	r26, 0x0d	; 13
    4ae8:	8c 91       	ld	r24, X
    4aea:	1d 97       	sbiw	r26, 0x0d	; 13
    4aec:	88 23       	and	r24, r24
    4aee:	d1 f7       	brne	.-12     	; 0x4ae4 <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4af0:	1e 96       	adiw	r26, 0x0e	; 14
    4af2:	8c 91       	ld	r24, X
    4af4:	1e 97       	sbiw	r26, 0x0e	; 14
    4af6:	81 30       	cpi	r24, 0x01	; 1
    4af8:	b9 f0       	breq	.+46     	; 0x4b28 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4afa:	1e 96       	adiw	r26, 0x0e	; 14
    4afc:	2c 91       	ld	r18, X
    4afe:	00 d0       	rcall	.+0      	; 0x4b00 <readPage+0x62>
    4b00:	0f 92       	push	r0
    4b02:	ed b7       	in	r30, 0x3d	; 61
    4b04:	fe b7       	in	r31, 0x3e	; 62
    4b06:	31 96       	adiw	r30, 0x01	; 1
    4b08:	8a ef       	ldi	r24, 0xFA	; 250
    4b0a:	9f e0       	ldi	r25, 0x0F	; 15
    4b0c:	ad b7       	in	r26, 0x3d	; 61
    4b0e:	be b7       	in	r27, 0x3e	; 62
    4b10:	11 96       	adiw	r26, 0x01	; 1
    4b12:	8d 93       	st	X+, r24
    4b14:	9c 93       	st	X, r25
    4b16:	12 97       	sbiw	r26, 0x02	; 2
    4b18:	22 83       	std	Z+2, r18	; 0x02
    4b1a:	13 82       	std	Z+3, r1	; 0x03
    4b1c:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	de 01       	movw	r26, r28
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	0a c0       	rjmp	.+20     	; 0x4b42 <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4b2e:	e5 01       	movw	r28, r10
    4b30:	ed 81       	ldd	r30, Y+5	; 0x05
    4b32:	fe 81       	ldd	r31, Y+6	; 0x06
    4b34:	e9 0f       	add	r30, r25
    4b36:	f1 1d       	adc	r31, r1
    4b38:	80 81       	ld	r24, Z
    4b3a:	14 96       	adiw	r26, 0x04	; 4
    4b3c:	8c 93       	st	X, r24
    4b3e:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4b40:	9f 5f       	subi	r25, 0xFF	; 255
    4b42:	11 96       	adiw	r26, 0x01	; 1
    4b44:	99 15       	cp	r25, r9
    4b46:	98 f3       	brcs	.-26     	; 0x4b2e <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
    4b4c:	eb e0       	ldi	r30, 0x0B	; 11
    4b4e:	0c 94 41 59 	jmp	0xb282	; 0xb282 <__epilogue_restores__+0xe>

00004b52 <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4b52:	a0 e0       	ldi	r26, 0x00	; 0
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	ef ea       	ldi	r30, 0xAF	; 175
    4b58:	f5 e2       	ldi	r31, 0x25	; 37
    4b5a:	0c 94 27 59 	jmp	0xb24e	; 0xb24e <__prologue_saves__+0x12>
    4b5e:	ec 01       	movw	r28, r24
    4b60:	6a 01       	movw	r12, r20
    4b62:	7b 01       	movw	r14, r22
    4b64:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4b66:	87 e3       	ldi	r24, 0x37	; 55
    4b68:	90 e1       	ldi	r25, 0x10	; 16
    4b6a:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    4b6e:	82 e4       	ldi	r24, 0x42	; 66
    4b70:	d8 01       	movw	r26, r16
    4b72:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4b74:	bb 27       	eor	r27, r27
    4b76:	af 2d       	mov	r26, r15
    4b78:	9e 2d       	mov	r25, r14
    4b7a:	8d 2d       	mov	r24, r13
    4b7c:	f8 01       	movw	r30, r16
    4b7e:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4b80:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    4b82:	8b 2d       	mov	r24, r11
    4b84:	86 95       	lsr	r24
    4b86:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    4b88:	86 e4       	ldi	r24, 0x46	; 70
    4b8a:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4b8c:	f5 e0       	ldi	r31, 0x05	; 5
    4b8e:	bf 0e       	add	r11, r31
    4b90:	ce 01       	movw	r24, r28
    4b92:	60 e7       	ldi	r22, 0x70	; 112
    4b94:	a8 01       	movw	r20, r16
    4b96:	2b 2d       	mov	r18, r11
    4b98:	00 e0       	ldi	r16, 0x00	; 0
    4b9a:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba0:	88 23       	and	r24, r24
    4ba2:	e9 f7       	brne	.-6      	; 0x4b9e <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    4ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ba6:	81 30       	cpi	r24, 0x01	; 1
    4ba8:	b1 f0       	breq	.+44     	; 0x4bd6 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    4baa:	2e 85       	ldd	r18, Y+14	; 0x0e
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <progPage+0x5c>
    4bae:	0f 92       	push	r0
    4bb0:	ed b7       	in	r30, 0x3d	; 61
    4bb2:	fe b7       	in	r31, 0x3e	; 62
    4bb4:	31 96       	adiw	r30, 0x01	; 1
    4bb6:	89 e1       	ldi	r24, 0x19	; 25
    4bb8:	90 e1       	ldi	r25, 0x10	; 16
    4bba:	ad b7       	in	r26, 0x3d	; 61
    4bbc:	be b7       	in	r27, 0x3e	; 62
    4bbe:	11 96       	adiw	r26, 0x01	; 1
    4bc0:	8d 93       	st	X+, r24
    4bc2:	9c 93       	st	X, r25
    4bc4:	12 97       	sbiw	r26, 0x02	; 2
    4bc6:	22 83       	std	Z+2, r18	; 0x02
    4bc8:	13 82       	std	Z+3, r1	; 0x03
    4bca:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	0f 90       	pop	r0
    }
}
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
    4bda:	e9 e0       	ldi	r30, 0x09	; 9
    4bdc:	0c 94 43 59 	jmp	0xb286	; 0xb286 <__epilogue_restores__+0x12>

00004be0 <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    4be0:	af e0       	ldi	r26, 0x0F	; 15
    4be2:	b0 e0       	ldi	r27, 0x00	; 0
    4be4:	e6 ef       	ldi	r30, 0xF6	; 246
    4be6:	f5 e2       	ldi	r31, 0x25	; 37
    4be8:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    4bec:	7c 01       	movw	r14, r24
    4bee:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    4bf0:	db 01       	movw	r26, r22
    4bf2:	0d 90       	ld	r0, X+
    4bf4:	00 20       	and	r0, r0
    4bf6:	e9 f7       	brne	.-6      	; 0x4bf2 <ihex_readrec+0x12>
    4bf8:	6d 01       	movw	r12, r26
    4bfa:	08 94       	sec
    4bfc:	c1 08       	sbc	r12, r1
    4bfe:	d1 08       	sbc	r13, r1
    4c00:	c6 1a       	sub	r12, r22
    4c02:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    4c04:	b3 e0       	ldi	r27, 0x03	; 3
    4c06:	cb 16       	cp	r12, r27
    4c08:	d1 04       	cpc	r13, r1
    4c0a:	0c f4       	brge	.+2      	; 0x4c0e <ihex_readrec+0x2e>
    4c0c:	f2 c0       	rjmp	.+484    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4c0e:	fb 01       	movw	r30, r22
    4c10:	81 81       	ldd	r24, Z+1	; 0x01
    4c12:	8b 83       	std	Y+3, r24	; 0x03
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4c18:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	03 96       	adiw	r24, 0x03	; 3
    4c1e:	8c 87       	std	Y+12, r24	; 0x0c
    4c20:	9d 87       	std	Y+13, r25	; 0x0d
    4c22:	ce 01       	movw	r24, r28
    4c24:	03 96       	adiw	r24, 0x03	; 3
    4c26:	be 01       	movw	r22, r28
    4c28:	6f 5f       	subi	r22, 0xFF	; 255
    4c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c2c:	40 e1       	ldi	r20, 0x10	; 16
    4c2e:	50 e0       	ldi	r21, 0x00	; 0
    4c30:	0e 94 cb 5a 	call	0xb596	; 0xb596 <strtoul>
    4c34:	d7 01       	movw	r26, r14
    4c36:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4c38:	e9 81       	ldd	r30, Y+1	; 0x01
    4c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c40:	e8 17       	cp	r30, r24
    4c42:	f9 07       	cpc	r31, r25
    4c44:	09 f4       	brne	.+2      	; 0x4c48 <ihex_readrec+0x68>
    4c46:	d5 c0       	rjmp	.+426    	; 0x4df2 <ihex_readrec+0x212>
    4c48:	80 81       	ld	r24, Z
    4c4a:	88 23       	and	r24, r24
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <ihex_readrec+0x70>
    4c4e:	d1 c0       	rjmp	.+418    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    4c50:	97 e0       	ldi	r25, 0x07	; 7
    4c52:	c9 16       	cp	r12, r25
    4c54:	d1 04       	cpc	r13, r1
    4c56:	0c f4       	brge	.+2      	; 0x4c5a <ihex_readrec+0x7a>
    4c58:	cc c0       	rjmp	.+408    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    4c5a:	d8 01       	movw	r26, r16
    4c5c:	13 96       	adiw	r26, 0x03	; 3
    4c5e:	8c 91       	ld	r24, X
    4c60:	13 97       	sbiw	r26, 0x03	; 3
    4c62:	8b 83       	std	Y+3, r24	; 0x03
    4c64:	14 96       	adiw	r26, 0x04	; 4
    4c66:	8c 91       	ld	r24, X
    4c68:	14 97       	sbiw	r26, 0x04	; 4
    4c6a:	8c 83       	std	Y+4, r24	; 0x04
    4c6c:	15 96       	adiw	r26, 0x05	; 5
    4c6e:	8c 91       	ld	r24, X
    4c70:	15 97       	sbiw	r26, 0x05	; 5
    4c72:	8d 83       	std	Y+5, r24	; 0x05
    4c74:	16 96       	adiw	r26, 0x06	; 6
    4c76:	8c 91       	ld	r24, X
    4c78:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    4c7a:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	03 96       	adiw	r24, 0x03	; 3
    4c80:	be 01       	movw	r22, r28
    4c82:	6f 5f       	subi	r22, 0xFF	; 255
    4c84:	7f 4f       	sbci	r23, 0xFF	; 255
    4c86:	40 e1       	ldi	r20, 0x10	; 16
    4c88:	50 e0       	ldi	r21, 0x00	; 0
    4c8a:	0e 94 cb 5a 	call	0xb596	; 0xb596 <strtoul>
    4c8e:	f7 01       	movw	r30, r14
    4c90:	61 83       	std	Z+1, r22	; 0x01
    4c92:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    4c94:	e9 81       	ldd	r30, Y+1	; 0x01
    4c96:	fa 81       	ldd	r31, Y+2	; 0x02
    4c98:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c9c:	e8 17       	cp	r30, r24
    4c9e:	f9 07       	cpc	r31, r25
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <ihex_readrec+0xc4>
    4ca2:	a7 c0       	rjmp	.+334    	; 0x4df2 <ihex_readrec+0x212>
    4ca4:	80 81       	ld	r24, Z
    4ca6:	88 23       	and	r24, r24
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <ihex_readrec+0xcc>
    4caa:	a3 c0       	rjmp	.+326    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    4cac:	99 e0       	ldi	r25, 0x09	; 9
    4cae:	c9 16       	cp	r12, r25
    4cb0:	d1 04       	cpc	r13, r1
    4cb2:	0c f4       	brge	.+2      	; 0x4cb6 <ihex_readrec+0xd6>
    4cb4:	9e c0       	rjmp	.+316    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4cb6:	d8 01       	movw	r26, r16
    4cb8:	17 96       	adiw	r26, 0x07	; 7
    4cba:	8c 91       	ld	r24, X
    4cbc:	17 97       	sbiw	r26, 0x07	; 7
    4cbe:	8b 83       	std	Y+3, r24	; 0x03
    4cc0:	18 96       	adiw	r26, 0x08	; 8
    4cc2:	8c 91       	ld	r24, X
    4cc4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4cc6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    4cc8:	ce 01       	movw	r24, r28
    4cca:	03 96       	adiw	r24, 0x03	; 3
    4ccc:	be 01       	movw	r22, r28
    4cce:	6f 5f       	subi	r22, 0xFF	; 255
    4cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd2:	40 e1       	ldi	r20, 0x10	; 16
    4cd4:	50 e0       	ldi	r21, 0x00	; 0
    4cd6:	0e 94 cb 5a 	call	0xb596	; 0xb596 <strtoul>
    4cda:	f7 01       	movw	r30, r14
    4cdc:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    4cde:	e9 81       	ldd	r30, Y+1	; 0x01
    4ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ce4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ce6:	e8 17       	cp	r30, r24
    4ce8:	f9 07       	cpc	r31, r25
    4cea:	09 f4       	brne	.+2      	; 0x4cee <ihex_readrec+0x10e>
    4cec:	82 c0       	rjmp	.+260    	; 0x4df2 <ihex_readrec+0x212>
    4cee:	80 81       	ld	r24, Z
    4cf0:	88 23       	and	r24, r24
    4cf2:	09 f0       	breq	.+2      	; 0x4cf6 <ihex_readrec+0x116>
    4cf4:	7e c0       	rjmp	.+252    	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    4cf6:	d7 01       	movw	r26, r14
    4cf8:	11 96       	adiw	r26, 0x01	; 1
    4cfa:	8c 91       	ld	r24, X
    4cfc:	11 97       	sbiw	r26, 0x01	; 1
    4cfe:	12 96       	adiw	r26, 0x02	; 2
    4d00:	9c 91       	ld	r25, X
    4d02:	12 97       	sbiw	r26, 0x02	; 2
    4d04:	7c 90       	ld	r7, X
    4d06:	78 0e       	add	r7, r24
    4d08:	79 0e       	add	r7, r25
    4d0a:	76 0e       	add	r7, r22
    4d0c:	48 01       	movw	r8, r16
    4d0e:	17 01       	movw	r2, r14
    4d10:	44 24       	eor	r4, r4
    4d12:	55 24       	eor	r5, r5
    4d14:	b9 e0       	ldi	r27, 0x09	; 9
    4d16:	ab 2e       	mov	r10, r27
    4d18:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	33 96       	adiw	r30, 0x03	; 3
    4d1e:	ee 87       	std	Y+14, r30	; 0x0e
    4d20:	ff 87       	std	Y+15, r31	; 0x0f
    4d22:	ce 01       	movw	r24, r28
    4d24:	01 96       	adiw	r24, 0x01	; 1
    4d26:	8b 87       	std	Y+11, r24	; 0x0b
    4d28:	69 2e       	mov	r6, r25
    4d2a:	32 c0       	rjmp	.+100    	; 0x4d90 <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    4d2c:	2c 15       	cp	r18, r12
    4d2e:	3d 05       	cpc	r19, r13
    4d30:	0c f0       	brlt	.+2      	; 0x4d34 <ihex_readrec+0x154>
    4d32:	5f c0       	rjmp	.+190    	; 0x4df2 <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    4d34:	d4 01       	movw	r26, r8
    4d36:	19 96       	adiw	r26, 0x09	; 9
    4d38:	8c 91       	ld	r24, X
    4d3a:	19 97       	sbiw	r26, 0x09	; 9
    4d3c:	8b 83       	std	Y+3, r24	; 0x03
    4d3e:	1a 96       	adiw	r26, 0x0a	; 10
    4d40:	8c 91       	ld	r24, X
    4d42:	8c 83       	std	Y+4, r24	; 0x04
    4d44:	e2 e0       	ldi	r30, 0x02	; 2
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	ae 0e       	add	r10, r30
    4d4a:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    4d4c:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    4d4e:	ce 01       	movw	r24, r28
    4d50:	03 96       	adiw	r24, 0x03	; 3
    4d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d54:	76 2d       	mov	r23, r6
    4d56:	40 e1       	ldi	r20, 0x10	; 16
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	0e 94 cb 5a 	call	0xb596	; 0xb596 <strtoul>
    4d5e:	d1 01       	movw	r26, r2
    4d60:	14 96       	adiw	r26, 0x04	; 4
    4d62:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    4d64:	e9 81       	ldd	r30, Y+1	; 0x01
    4d66:	fa 81       	ldd	r31, Y+2	; 0x02
    4d68:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d6c:	e8 17       	cp	r30, r24
    4d6e:	f9 07       	cpc	r31, r25
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <ihex_readrec+0x194>
    4d72:	3f c0       	rjmp	.+126    	; 0x4df2 <ihex_readrec+0x212>
    4d74:	a2 e0       	ldi	r26, 0x02	; 2
    4d76:	b0 e0       	ldi	r27, 0x00	; 0
    4d78:	8a 0e       	add	r8, r26
    4d7a:	9b 1e       	adc	r9, r27
    4d7c:	08 94       	sec
    4d7e:	21 1c       	adc	r2, r1
    4d80:	31 1c       	adc	r3, r1
    4d82:	80 81       	ld	r24, Z
    4d84:	88 23       	and	r24, r24
    4d86:	a9 f5       	brne	.+106    	; 0x4df2 <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    4d88:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    4d8a:	08 94       	sec
    4d8c:	41 1c       	adc	r4, r1
    4d8e:	51 1c       	adc	r5, r1
    4d90:	f7 01       	movw	r30, r14
    4d92:	80 81       	ld	r24, Z
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	95 01       	movw	r18, r10
    4d98:	2f 5f       	subi	r18, 0xFF	; 255
    4d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9c:	48 16       	cp	r4, r24
    4d9e:	59 06       	cpc	r5, r25
    4da0:	2c f2       	brlt	.-118    	; 0x4d2c <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    4da2:	2c 15       	cp	r18, r12
    4da4:	3d 05       	cpc	r19, r13
    4da6:	2c f5       	brge	.+74     	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4da8:	f8 01       	movw	r30, r16
    4daa:	ea 0d       	add	r30, r10
    4dac:	fb 1d       	adc	r31, r11
    4dae:	80 81       	ld	r24, Z
    4db0:	8b 83       	std	Y+3, r24	; 0x03
    4db2:	81 81       	ldd	r24, Z+1	; 0x01
    4db4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4db6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    4db8:	8e 01       	movw	r16, r28
    4dba:	0d 5f       	subi	r16, 0xFD	; 253
    4dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	be 01       	movw	r22, r28
    4dc2:	6f 5f       	subi	r22, 0xFF	; 255
    4dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc6:	40 e1       	ldi	r20, 0x10	; 16
    4dc8:	50 e0       	ldi	r21, 0x00	; 0
    4dca:	0e 94 cb 5a 	call	0xb596	; 0xb596 <strtoul>
    4dce:	84 e0       	ldi	r24, 0x04	; 4
    4dd0:	91 e0       	ldi	r25, 0x01	; 1
    4dd2:	e8 0e       	add	r14, r24
    4dd4:	f9 1e       	adc	r15, r25
    4dd6:	d7 01       	movw	r26, r14
    4dd8:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4dda:	e9 81       	ldd	r30, Y+1	; 0x01
    4ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    4dde:	e0 17       	cp	r30, r16
    4de0:	f1 07       	cpc	r31, r17
    4de2:	39 f0       	breq	.+14     	; 0x4df2 <ihex_readrec+0x212>
    4de4:	80 81       	ld	r24, Z
    4de6:	88 23       	and	r24, r24
    4de8:	21 f4       	brne	.+8      	; 0x4df2 <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    4dea:	71 94       	neg	r7
    4dec:	27 2d       	mov	r18, r7
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	02 c0       	rjmp	.+4      	; 0x4df6 <ihex_readrec+0x216>
    
    return rc;
    4df2:	2f ef       	ldi	r18, 0xFF	; 255
    4df4:	3f ef       	ldi	r19, 0xFF	; 255
    4df6:	c9 01       	movw	r24, r18
    4df8:	2f 96       	adiw	r28, 0x0f	; 15
    4dfa:	e2 e1       	ldi	r30, 0x12	; 18
    4dfc:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00004e00 <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    4e00:	a0 e9       	ldi	r26, 0x90	; 144
    4e02:	b2 e0       	ldi	r27, 0x02	; 2
    4e04:	e6 e0       	ldi	r30, 0x06	; 6
    4e06:	f7 e2       	ldi	r31, 0x27	; 39
    4e08:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    4e0c:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    4e0e:	e8 2e       	mov	r14, r24
    4e10:	ff 24       	eor	r15, r15
    4e12:	f7 01       	movw	r30, r14
    4e14:	e2 5c       	subi	r30, 0xC2	; 194
    4e16:	f8 4d       	sbci	r31, 0xD8	; 216
    4e18:	e0 81       	ld	r30, Z
    if (ch != 0){
    4e1a:	ee 23       	and	r30, r30
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <eeprom_panel+0x20>
    4e1e:	cd c2       	rjmp	.+1434   	; 0x53ba <eeprom_panel+0x5ba>
        
        switch (ch) {
    4e20:	e3 30       	cpi	r30, 0x03	; 3
    4e22:	71 f0       	breq	.+28     	; 0x4e40 <eeprom_panel+0x40>
    4e24:	e4 30       	cpi	r30, 0x04	; 4
    4e26:	89 f0       	breq	.+34     	; 0x4e4a <eeprom_panel+0x4a>
    4e28:	e2 30       	cpi	r30, 0x02	; 2
    4e2a:	29 f4       	brne	.+10     	; 0x4e36 <eeprom_panel+0x36>
    4e2c:	88 e9       	ldi	r24, 0x98	; 152
    4e2e:	88 2e       	mov	r8, r24
    4e30:	89 e2       	ldi	r24, 0x29	; 41
    4e32:	98 2e       	mov	r9, r24
    4e34:	0e c0       	rjmp	.+28     	; 0x4e52 <eeprom_panel+0x52>
    4e36:	1e e7       	ldi	r17, 0x7E	; 126
    4e38:	81 2e       	mov	r8, r17
    4e3a:	16 e2       	ldi	r17, 0x26	; 38
    4e3c:	91 2e       	mov	r9, r17
    4e3e:	09 c0       	rjmp	.+18     	; 0x4e52 <eeprom_panel+0x52>
    4e40:	be e2       	ldi	r27, 0x2E	; 46
    4e42:	8b 2e       	mov	r8, r27
    4e44:	b7 e2       	ldi	r27, 0x27	; 39
    4e46:	9b 2e       	mov	r9, r27
    4e48:	04 c0       	rjmp	.+8      	; 0x4e52 <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    4e4a:	a0 ea       	ldi	r26, 0xA0	; 160
    4e4c:	8a 2e       	mov	r8, r26
    4e4e:	a5 e2       	ldi	r26, 0x25	; 37
    4e50:	9a 2e       	mov	r9, r26
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    4e52:	89 ee       	ldi	r24, 0xE9	; 233
    4e54:	97 e2       	ldi	r25, 0x27	; 39
    4e56:	6f ec       	ldi	r22, 0xCF	; 207
    4e58:	73 e2       	ldi	r23, 0x23	; 35
    4e5a:	41 e0       	ldi	r20, 0x01	; 1
    4e5c:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
    4e60:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    4e62:	88 23       	and	r24, r24
    4e64:	49 f0       	breq	.+18     	; 0x4e78 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    4e66:	86 e8       	ldi	r24, 0x86	; 134
    4e68:	9c e0       	ldi	r25, 0x0C	; 12
    4e6a:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            put_rc(res);
    4e6e:	81 2f       	mov	r24, r17
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <put_rc>
    4e76:	3d c0       	rjmp	.+122    	; 0x4ef2 <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    4e78:	00 d0       	rcall	.+0      	; 0x4e7a <eeprom_panel+0x7a>
    4e7a:	0f 92       	push	r0
    4e7c:	84 e7       	ldi	r24, 0x74	; 116
    4e7e:	9c e0       	ldi	r25, 0x0C	; 12
    4e80:	ad b7       	in	r26, 0x3d	; 61
    4e82:	be b7       	in	r27, 0x3e	; 62
    4e84:	11 96       	adiw	r26, 0x01	; 1
    4e86:	8d 93       	st	X+, r24
    4e88:	9c 93       	st	X, r25
    4e8a:	12 97       	sbiw	r26, 0x02	; 2
    4e8c:	13 96       	adiw	r26, 0x03	; 3
    4e8e:	ed 92       	st	X+, r14
    4e90:	fc 92       	st	X, r15
    4e92:	14 97       	sbiw	r26, 0x04	; 4
    4e94:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                pagebuff[0] = 0x00;
    4e98:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	0f 90       	pop	r0
    4ea4:	0f 90       	pop	r0
    4ea6:	c4 01       	movw	r24, r8
    4ea8:	60 2f       	mov	r22, r16
    4eaa:	ae 01       	movw	r20, r28
    4eac:	4f 5f       	subi	r20, 0xFF	; 255
    4eae:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb0:	22 e0       	ldi	r18, 0x02	; 2
    4eb2:	00 e0       	ldi	r16, 0x00	; 0
    4eb4:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    4eb8:	f4 01       	movw	r30, r8
    4eba:	85 85       	ldd	r24, Z+13	; 0x0d
    4ebc:	88 23       	and	r24, r24
    4ebe:	e1 f7       	brne	.-8      	; 0x4eb8 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    4ec0:	86 85       	ldd	r24, Z+14	; 0x0e
    4ec2:	81 30       	cpi	r24, 0x01	; 1
    4ec4:	b1 f0       	breq	.+44     	; 0x4ef2 <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    4ec6:	26 85       	ldd	r18, Z+14	; 0x0e
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <eeprom_panel+0xca>
    4eca:	0f 92       	push	r0
    4ecc:	ed b7       	in	r30, 0x3d	; 61
    4ece:	fe b7       	in	r31, 0x3e	; 62
    4ed0:	31 96       	adiw	r30, 0x01	; 1
    4ed2:	86 e5       	ldi	r24, 0x56	; 86
    4ed4:	9c e0       	ldi	r25, 0x0C	; 12
    4ed6:	ad b7       	in	r26, 0x3d	; 61
    4ed8:	be b7       	in	r27, 0x3e	; 62
    4eda:	11 96       	adiw	r26, 0x01	; 1
    4edc:	8d 93       	st	X+, r24
    4ede:	9c 93       	st	X, r25
    4ee0:	12 97       	sbiw	r26, 0x02	; 2
    4ee2:	22 83       	std	Z+2, r18	; 0x02
    4ee4:	13 82       	std	Z+3, r1	; 0x03
    4ee6:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	88 e8       	ldi	r24, 0x88	; 136
    4ef4:	93 e1       	ldi	r25, 0x13	; 19
    4ef6:	20 e2       	ldi	r18, 0x20	; 32
    4ef8:	33 e0       	ldi	r19, 0x03	; 3
    4efa:	f9 01       	movw	r30, r18
    4efc:	31 97       	sbiw	r30, 0x01	; 1
    4efe:	f1 f7       	brne	.-4      	; 0x4efc <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f00:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f02:	d9 f7       	brne	.-10     	; 0x4efa <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    4f04:	89 e4       	ldi	r24, 0x49	; 73
    4f06:	9c e0       	ldi	r25, 0x0C	; 12
    4f08:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    4f0c:	0f ef       	ldi	r16, 0xFF	; 255
    4f0e:	1f ef       	ldi	r17, 0xFF	; 255
    4f10:	cc 24       	eor	r12, r12
    4f12:	dd 24       	eor	r13, r13
    4f14:	66 24       	eor	r6, r6
    4f16:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    4f18:	f6 e8       	ldi	r31, 0x86	; 134
    4f1a:	2f 2e       	mov	r2, r31
    4f1c:	31 2c       	mov	r3, r1
    4f1e:	2c 0e       	add	r2, r28
    4f20:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4f22:	e6 e8       	ldi	r30, 0x86	; 134
    4f24:	4e 2e       	mov	r4, r30
    4f26:	e1 e0       	ldi	r30, 0x01	; 1
    4f28:	5e 2e       	mov	r5, r30
    4f2a:	4c 0e       	add	r4, r28
    4f2c:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    4f2e:	f2 01       	movw	r30, r4
    4f30:	34 96       	adiw	r30, 0x04	; 4
    4f32:	c3 57       	subi	r28, 0x73	; 115
    4f34:	dd 4f       	sbci	r29, 0xFD	; 253
    4f36:	e8 83       	st	Y, r30
    4f38:	f9 83       	std	Y+1, r31	; 0x01
    4f3a:	cd 58       	subi	r28, 0x8D	; 141
    4f3c:	d2 40       	sbci	r29, 0x02	; 2
    4f3e:	cb c0       	rjmp	.+406    	; 0x50d6 <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    4f40:	08 94       	sec
    4f42:	61 1c       	adc	r6, r1
    4f44:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    4f46:	f1 01       	movw	r30, r2
    4f48:	01 90       	ld	r0, Z+
    4f4a:	00 20       	and	r0, r0
    4f4c:	e9 f7       	brne	.-6      	; 0x4f48 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    4f4e:	32 97       	sbiw	r30, 0x02	; 2
    4f50:	80 81       	ld	r24, Z
    4f52:	8a 30       	cpi	r24, 0x0A	; 10
    4f54:	09 f4       	brne	.+2      	; 0x4f58 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    4f56:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    4f58:	d1 01       	movw	r26, r2
    4f5a:	8c 91       	ld	r24, X
    4f5c:	8a 33       	cpi	r24, 0x3A	; 58
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <eeprom_panel+0x162>
    4f60:	ba c0       	rjmp	.+372    	; 0x50d6 <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    4f62:	c2 01       	movw	r24, r4
    4f64:	b1 01       	movw	r22, r2
    4f66:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <ihex_readrec>
    4f6a:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    4f6c:	c6 57       	subi	r28, 0x76	; 118
    4f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    4f70:	88 81       	ld	r24, Y
    4f72:	ca 58       	subi	r28, 0x8A	; 138
    4f74:	d2 40       	sbci	r29, 0x02	; 2
    4f76:	f8 16       	cp	r15, r24
    4f78:	19 f1       	breq	.+70     	; 0x4fc0 <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    4f7a:	00 d0       	rcall	.+0      	; 0x4f7c <eeprom_panel+0x17c>
    4f7c:	0f 92       	push	r0
    4f7e:	85 e1       	ldi	r24, 0x15	; 21
    4f80:	9c e0       	ldi	r25, 0x0C	; 12
    4f82:	ed b7       	in	r30, 0x3d	; 61
    4f84:	fe b7       	in	r31, 0x3e	; 62
    4f86:	81 83       	std	Z+1, r24	; 0x01
    4f88:	92 83       	std	Z+2, r25	; 0x02
    4f8a:	63 82       	std	Z+3, r6	; 0x03
    4f8c:	74 82       	std	Z+4, r7	; 0x04
    4f8e:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    4f92:	0f 92       	push	r0
    4f94:	0f 92       	push	r0
    4f96:	ed b7       	in	r30, 0x3d	; 61
    4f98:	fe b7       	in	r31, 0x3e	; 62
    4f9a:	31 96       	adiw	r30, 0x01	; 1
    4f9c:	8a ee       	ldi	r24, 0xEA	; 234
    4f9e:	9b e0       	ldi	r25, 0x0B	; 11
    4fa0:	ad b7       	in	r26, 0x3d	; 61
    4fa2:	be b7       	in	r27, 0x3e	; 62
    4fa4:	11 96       	adiw	r26, 0x01	; 1
    4fa6:	8d 93       	st	X+, r24
    4fa8:	9c 93       	st	X, r25
    4faa:	12 97       	sbiw	r26, 0x02	; 2
    4fac:	c6 57       	subi	r28, 0x76	; 118
    4fae:	dd 4f       	sbci	r29, 0xFD	; 253
    4fb0:	88 81       	ld	r24, Y
    4fb2:	ca 58       	subi	r28, 0x8A	; 138
    4fb4:	d2 40       	sbci	r29, 0x02	; 2
    4fb6:	82 83       	std	Z+2, r24	; 0x02
    4fb8:	13 82       	std	Z+3, r1	; 0x03
    4fba:	f4 82       	std	Z+4, r15	; 0x04
    4fbc:	15 82       	std	Z+5, r1	; 0x05
    4fbe:	82 c0       	rjmp	.+260    	; 0x50c4 <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    4fc0:	d2 01       	movw	r26, r4
    4fc2:	13 96       	adiw	r26, 0x03	; 3
    4fc4:	2c 91       	ld	r18, X
    4fc6:	13 97       	sbiw	r26, 0x03	; 3
    4fc8:	22 23       	and	r18, r18
    4fca:	09 f0       	breq	.+2      	; 0x4fce <eeprom_panel+0x1ce>
    4fcc:	53 c0       	rjmp	.+166    	; 0x5074 <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    4fce:	11 96       	adiw	r26, 0x01	; 1
    4fd0:	ed 90       	ld	r14, X+
    4fd2:	fc 90       	ld	r15, X
    4fd4:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    4fd6:	57 01       	movw	r10, r14
    4fd8:	aa 0c       	add	r10, r10
    4fda:	ab 2c       	mov	r10, r11
    4fdc:	aa 1c       	adc	r10, r10
    4fde:	bb 08       	sbc	r11, r11
    4fe0:	b1 94       	neg	r11
    4fe2:	a0 16       	cp	r10, r16
    4fe4:	b1 06       	cpc	r11, r17
    4fe6:	c1 f0       	breq	.+48     	; 0x5018 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    4fe8:	cd 14       	cp	r12, r13
    4fea:	91 f0       	breq	.+36     	; 0x5010 <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    4fec:	16 95       	lsr	r17
    4fee:	10 2f       	mov	r17, r16
    4ff0:	00 27       	eor	r16, r16
    4ff2:	17 95       	ror	r17
    4ff4:	07 95       	ror	r16
    4ff6:	0c 0d       	add	r16, r12
    4ff8:	11 1d       	adc	r17, r1
    4ffa:	a8 01       	movw	r20, r16
    4ffc:	60 e0       	ldi	r22, 0x00	; 0
    4ffe:	70 e0       	ldi	r23, 0x00	; 0
    5000:	dc 18       	sub	r13, r12
    5002:	c4 01       	movw	r24, r8
    5004:	2d 2d       	mov	r18, r13
    5006:	8e 01       	movw	r16, r28
    5008:	0f 5f       	subi	r16, 0xFF	; 255
    500a:	1f 4f       	sbci	r17, 0xFF	; 255
    500c:	0e 94 ab 24 	call	0x4956	; 0x4956 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5010:	5f e7       	ldi	r21, 0x7F	; 127
    5012:	d5 2e       	mov	r13, r21
    5014:	de 20       	and	r13, r14
    5016:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    5018:	4e 2d       	mov	r20, r14
    501a:	4f 77       	andi	r20, 0x7F	; 127
    501c:	4c 15       	cp	r20, r12
    501e:	08 f4       	brcc	.+2      	; 0x5022 <eeprom_panel+0x222>
    5020:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5022:	f2 01       	movw	r30, r4
    5024:	50 81       	ld	r21, Z
    5026:	25 2f       	mov	r18, r21
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	c3 57       	subi	r28, 0x73	; 115
    502c:	dd 4f       	sbci	r29, 0xFD	; 253
    502e:	a8 81       	ld	r26, Y
    5030:	b9 81       	ldd	r27, Y+1	; 0x01
    5032:	cd 58       	subi	r28, 0x8D	; 141
    5034:	d2 40       	sbci	r29, 0x02	; 2
    5036:	e4 2f       	mov	r30, r20
    5038:	f0 e0       	ldi	r31, 0x00	; 0
    503a:	35 96       	adiw	r30, 0x05	; 5
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	8c 0f       	add	r24, r28
    5042:	9d 1f       	adc	r25, r29
    5044:	e8 0f       	add	r30, r24
    5046:	f9 1f       	adc	r31, r25
    5048:	2c 5f       	subi	r18, 0xFC	; 252
    504a:	3f 4f       	sbci	r19, 0xFF	; 255
    504c:	24 0d       	add	r18, r4
    504e:	35 1d       	adc	r19, r5
    5050:	02 c0       	rjmp	.+4      	; 0x5056 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5052:	8d 91       	ld	r24, X+
    5054:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5056:	a2 17       	cp	r26, r18
    5058:	b3 07       	cpc	r27, r19
    505a:	d9 f7       	brne	.-10     	; 0x5052 <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    505c:	85 2f       	mov	r24, r21
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	84 0f       	add	r24, r20
    5062:	91 1d       	adc	r25, r1
    5064:	2d 2d       	mov	r18, r13
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	28 17       	cp	r18, r24
    506a:	39 07       	cpc	r19, r25
    506c:	9c f5       	brge	.+102    	; 0x50d4 <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    506e:	d4 2e       	mov	r13, r20
    5070:	d5 0e       	add	r13, r21
    5072:	30 c0       	rjmp	.+96     	; 0x50d4 <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    5074:	21 30       	cpi	r18, 0x01	; 1
    5076:	a9 f4       	brne	.+42     	; 0x50a2 <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5078:	cd 14       	cp	r12, r13
    507a:	b9 f1       	breq	.+110    	; 0x50ea <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    507c:	16 95       	lsr	r17
    507e:	10 2f       	mov	r17, r16
    5080:	00 27       	eor	r16, r16
    5082:	17 95       	ror	r17
    5084:	07 95       	ror	r16
    5086:	0c 0d       	add	r16, r12
    5088:	11 1d       	adc	r17, r1
    508a:	a8 01       	movw	r20, r16
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	70 e0       	ldi	r23, 0x00	; 0
    5090:	dc 18       	sub	r13, r12
    5092:	c4 01       	movw	r24, r8
    5094:	2d 2d       	mov	r18, r13
    5096:	8e 01       	movw	r16, r28
    5098:	0f 5f       	subi	r16, 0xFF	; 255
    509a:	1f 4f       	sbci	r17, 0xFF	; 255
    509c:	0e 94 ab 24 	call	0x4956	; 0x4956 <progEEPage>
    50a0:	24 c0       	rjmp	.+72     	; 0x50ea <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    50a2:	00 d0       	rcall	.+0      	; 0x50a4 <eeprom_panel+0x2a4>
    50a4:	00 d0       	rcall	.+0      	; 0x50a6 <eeprom_panel+0x2a6>
    50a6:	ed b7       	in	r30, 0x3d	; 61
    50a8:	fe b7       	in	r31, 0x3e	; 62
    50aa:	31 96       	adiw	r30, 0x01	; 1
    50ac:	88 ea       	ldi	r24, 0xA8	; 168
    50ae:	9b e0       	ldi	r25, 0x0B	; 11
    50b0:	ad b7       	in	r26, 0x3d	; 61
    50b2:	be b7       	in	r27, 0x3e	; 62
    50b4:	11 96       	adiw	r26, 0x01	; 1
    50b6:	8d 93       	st	X+, r24
    50b8:	9c 93       	st	X, r25
    50ba:	12 97       	sbiw	r26, 0x02	; 2
    50bc:	22 83       	std	Z+2, r18	; 0x02
    50be:	13 82       	std	Z+3, r1	; 0x03
    50c0:	64 82       	std	Z+4, r6	; 0x04
    50c2:	75 82       	std	Z+5, r7	; 0x05
    50c4:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    50c8:	ed b7       	in	r30, 0x3d	; 61
    50ca:	fe b7       	in	r31, 0x3e	; 62
    50cc:	36 96       	adiw	r30, 0x06	; 6
    50ce:	ed bf       	out	0x3d, r30	; 61
    50d0:	fe bf       	out	0x3e, r31	; 62
    50d2:	0b c0       	rjmp	.+22     	; 0x50ea <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    50d4:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    50d6:	c1 01       	movw	r24, r2
    50d8:	60 e0       	ldi	r22, 0x00	; 0
    50da:	71 e0       	ldi	r23, 0x01	; 1
    50dc:	49 ee       	ldi	r20, 0xE9	; 233
    50de:	57 e2       	ldi	r21, 0x27	; 39
    50e0:	0e 94 4e 50 	call	0xa09c	; 0xa09c <f_gets>
    50e4:	89 2b       	or	r24, r25
    50e6:	09 f0       	breq	.+2      	; 0x50ea <eeprom_panel+0x2ea>
    50e8:	2b cf       	rjmp	.-426    	; 0x4f40 <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    50ea:	89 ee       	ldi	r24, 0xE9	; 233
    50ec:	97 e2       	ldi	r25, 0x27	; 39
    50ee:	40 e0       	ldi	r20, 0x00	; 0
    50f0:	50 e0       	ldi	r21, 0x00	; 0
    50f2:	60 e0       	ldi	r22, 0x00	; 0
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
    50fa:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    50fc:	88 23       	and	r24, r24
    50fe:	49 f0       	breq	.+18     	; 0x5112 <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    5100:	8a e8       	ldi	r24, 0x8A	; 138
    5102:	9b e0       	ldi	r25, 0x0B	; 11
    5104:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            put_rc(res);
    5108:	81 2f       	mov	r24, r17
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <put_rc>
    5110:	2c c1       	rjmp	.+600    	; 0x536a <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5112:	8d e7       	ldi	r24, 0x7D	; 125
    5114:	9b e0       	ldi	r25, 0x0B	; 11
    5116:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    511a:	cc 24       	eor	r12, r12
    511c:	ca 94       	dec	r12
    511e:	dc 2c       	mov	r13, r12
    5120:	00 e0       	ldi	r16, 0x00	; 0
    5122:	10 e0       	ldi	r17, 0x00	; 0
    5124:	66 24       	eor	r6, r6
    5126:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    5128:	ce 01       	movw	r24, r28
    512a:	8a 57       	subi	r24, 0x7A	; 122
    512c:	9f 4f       	sbci	r25, 0xFF	; 255
    512e:	c1 57       	subi	r28, 0x71	; 113
    5130:	dd 4f       	sbci	r29, 0xFD	; 253
    5132:	88 83       	st	Y, r24
    5134:	99 83       	std	Y+1, r25	; 0x01
    5136:	cf 58       	subi	r28, 0x8F	; 143
    5138:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    513a:	36 e8       	ldi	r19, 0x86	; 134
    513c:	43 2e       	mov	r4, r19
    513e:	31 e0       	ldi	r19, 0x01	; 1
    5140:	53 2e       	mov	r5, r19
    5142:	4c 0e       	add	r4, r28
    5144:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5146:	d2 01       	movw	r26, r4
    5148:	14 96       	adiw	r26, 0x04	; 4
    514a:	c5 57       	subi	r28, 0x75	; 117
    514c:	dd 4f       	sbci	r29, 0xFD	; 253
    514e:	a8 83       	st	Y, r26
    5150:	b9 83       	std	Y+1, r27	; 0x01
    5152:	cb 58       	subi	r28, 0x8B	; 139
    5154:	d2 40       	sbci	r29, 0x02	; 2
    5156:	ff c0       	rjmp	.+510    	; 0x5356 <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    5158:	08 94       	sec
    515a:	61 1c       	adc	r6, r1
    515c:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    515e:	c1 57       	subi	r28, 0x71	; 113
    5160:	dd 4f       	sbci	r29, 0xFD	; 253
    5162:	e8 81       	ld	r30, Y
    5164:	f9 81       	ldd	r31, Y+1	; 0x01
    5166:	cf 58       	subi	r28, 0x8F	; 143
    5168:	d2 40       	sbci	r29, 0x02	; 2
    516a:	01 90       	ld	r0, Z+
    516c:	00 20       	and	r0, r0
    516e:	e9 f7       	brne	.-6      	; 0x516a <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    5170:	32 97       	sbiw	r30, 0x02	; 2
    5172:	80 81       	ld	r24, Z
    5174:	8a 30       	cpi	r24, 0x0A	; 10
    5176:	09 f4       	brne	.+2      	; 0x517a <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    5178:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    517a:	ca 57       	subi	r28, 0x7A	; 122
    517c:	df 4f       	sbci	r29, 0xFF	; 255
    517e:	88 81       	ld	r24, Y
    5180:	c6 58       	subi	r28, 0x86	; 134
    5182:	d0 40       	sbci	r29, 0x00	; 0
    5184:	8a 33       	cpi	r24, 0x3A	; 58
    5186:	09 f0       	breq	.+2      	; 0x518a <eeprom_panel+0x38a>
    5188:	e6 c0       	rjmp	.+460    	; 0x5356 <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    518a:	c2 01       	movw	r24, r4
    518c:	b1 01       	movw	r22, r2
    518e:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <ihex_readrec>
    5192:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    5194:	c6 57       	subi	r28, 0x76	; 118
    5196:	dd 4f       	sbci	r29, 0xFD	; 253
    5198:	88 81       	ld	r24, Y
    519a:	ca 58       	subi	r28, 0x8A	; 138
    519c:	d2 40       	sbci	r29, 0x02	; 2
    519e:	f8 16       	cp	r15, r24
    51a0:	19 f1       	breq	.+70     	; 0x51e8 <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    51a2:	00 d0       	rcall	.+0      	; 0x51a4 <eeprom_panel+0x3a4>
    51a4:	0f 92       	push	r0
    51a6:	8a e4       	ldi	r24, 0x4A	; 74
    51a8:	9b e0       	ldi	r25, 0x0B	; 11
    51aa:	ed b7       	in	r30, 0x3d	; 61
    51ac:	fe b7       	in	r31, 0x3e	; 62
    51ae:	81 83       	std	Z+1, r24	; 0x01
    51b0:	92 83       	std	Z+2, r25	; 0x02
    51b2:	63 82       	std	Z+3, r6	; 0x03
    51b4:	74 82       	std	Z+4, r7	; 0x04
    51b6:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    51ba:	0f 92       	push	r0
    51bc:	0f 92       	push	r0
    51be:	ed b7       	in	r30, 0x3d	; 61
    51c0:	fe b7       	in	r31, 0x3e	; 62
    51c2:	31 96       	adiw	r30, 0x01	; 1
    51c4:	8f e1       	ldi	r24, 0x1F	; 31
    51c6:	9b e0       	ldi	r25, 0x0B	; 11
    51c8:	ad b7       	in	r26, 0x3d	; 61
    51ca:	be b7       	in	r27, 0x3e	; 62
    51cc:	11 96       	adiw	r26, 0x01	; 1
    51ce:	8d 93       	st	X+, r24
    51d0:	9c 93       	st	X, r25
    51d2:	12 97       	sbiw	r26, 0x02	; 2
    51d4:	c6 57       	subi	r28, 0x76	; 118
    51d6:	dd 4f       	sbci	r29, 0xFD	; 253
    51d8:	88 81       	ld	r24, Y
    51da:	ca 58       	subi	r28, 0x8A	; 138
    51dc:	d2 40       	sbci	r29, 0x02	; 2
    51de:	82 83       	std	Z+2, r24	; 0x02
    51e0:	13 82       	std	Z+3, r1	; 0x03
    51e2:	f4 82       	std	Z+4, r15	; 0x04
    51e4:	15 82       	std	Z+5, r1	; 0x05
    51e6:	ae c0       	rjmp	.+348    	; 0x5344 <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    51e8:	d2 01       	movw	r26, r4
    51ea:	13 96       	adiw	r26, 0x03	; 3
    51ec:	2c 91       	ld	r18, X
    51ee:	13 97       	sbiw	r26, 0x03	; 3
    51f0:	22 23       	and	r18, r18
    51f2:	09 f0       	breq	.+2      	; 0x51f6 <eeprom_panel+0x3f6>
    51f4:	65 c0       	rjmp	.+202    	; 0x52c0 <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    51f6:	11 96       	adiw	r26, 0x01	; 1
    51f8:	ed 90       	ld	r14, X+
    51fa:	fc 90       	ld	r15, X
    51fc:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    51fe:	57 01       	movw	r10, r14
    5200:	aa 0c       	add	r10, r10
    5202:	ab 2c       	mov	r10, r11
    5204:	aa 1c       	adc	r10, r10
    5206:	bb 08       	sbc	r11, r11
    5208:	b1 94       	neg	r11
    520a:	ac 14       	cp	r10, r12
    520c:	bd 04       	cpc	r11, r13
    520e:	49 f1       	breq	.+82     	; 0x5262 <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5210:	01 17       	cp	r16, r17
    5212:	21 f1       	breq	.+72     	; 0x525c <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    5214:	a6 01       	movw	r20, r12
    5216:	56 95       	lsr	r21
    5218:	54 2f       	mov	r21, r20
    521a:	44 27       	eor	r20, r20
    521c:	57 95       	ror	r21
    521e:	47 95       	ror	r20
    5220:	40 0f       	add	r20, r16
    5222:	51 1d       	adc	r21, r1
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	10 1b       	sub	r17, r16
    522a:	c4 01       	movw	r24, r8
    522c:	21 2f       	mov	r18, r17
    522e:	8e 01       	movw	r16, r28
    5230:	0f 5f       	subi	r16, 0xFF	; 255
    5232:	1f 4f       	sbci	r17, 0xFF	; 255
    5234:	0e 94 f6 23 	call	0x47ec	; 0x47ec <verifyEEPage>
    5238:	89 2b       	or	r24, r25
    523a:	81 f4       	brne	.+32     	; 0x525c <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    523c:	00 d0       	rcall	.+0      	; 0x523e <eeprom_panel+0x43e>
    523e:	0f 92       	push	r0
    5240:	82 e0       	ldi	r24, 0x02	; 2
    5242:	9b e0       	ldi	r25, 0x0B	; 11
    5244:	ed b7       	in	r30, 0x3d	; 61
    5246:	fe b7       	in	r31, 0x3e	; 62
    5248:	81 83       	std	Z+1, r24	; 0x01
    524a:	92 83       	std	Z+2, r25	; 0x02
    524c:	c3 82       	std	Z+3, r12	; 0x03
    524e:	d4 82       	std	Z+4, r13	; 0x04
    5250:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    5254:	0f 90       	pop	r0
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    525c:	1e 2d       	mov	r17, r14
    525e:	1f 77       	andi	r17, 0x7F	; 127
    5260:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5262:	4e 2d       	mov	r20, r14
    5264:	4f 77       	andi	r20, 0x7F	; 127
    5266:	40 17       	cp	r20, r16
    5268:	08 f4       	brcc	.+2      	; 0x526c <eeprom_panel+0x46c>
    526a:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    526c:	d2 01       	movw	r26, r4
    526e:	5c 91       	ld	r21, X
    5270:	25 2f       	mov	r18, r21
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	c5 57       	subi	r28, 0x75	; 117
    5276:	dd 4f       	sbci	r29, 0xFD	; 253
    5278:	a8 81       	ld	r26, Y
    527a:	b9 81       	ldd	r27, Y+1	; 0x01
    527c:	cb 58       	subi	r28, 0x8B	; 139
    527e:	d2 40       	sbci	r29, 0x02	; 2
    5280:	e4 2f       	mov	r30, r20
    5282:	f0 e0       	ldi	r31, 0x00	; 0
    5284:	35 96       	adiw	r30, 0x05	; 5
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	8c 0f       	add	r24, r28
    528c:	9d 1f       	adc	r25, r29
    528e:	e8 0f       	add	r30, r24
    5290:	f9 1f       	adc	r31, r25
    5292:	2c 5f       	subi	r18, 0xFC	; 252
    5294:	3f 4f       	sbci	r19, 0xFF	; 255
    5296:	24 0d       	add	r18, r4
    5298:	35 1d       	adc	r19, r5
    529a:	02 c0       	rjmp	.+4      	; 0x52a0 <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    529c:	8d 91       	ld	r24, X+
    529e:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    52a0:	a2 17       	cp	r26, r18
    52a2:	b3 07       	cpc	r27, r19
    52a4:	d9 f7       	brne	.-10     	; 0x529c <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    52a6:	85 2f       	mov	r24, r21
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	84 0f       	add	r24, r20
    52ac:	91 1d       	adc	r25, r1
    52ae:	21 2f       	mov	r18, r17
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	28 17       	cp	r18, r24
    52b4:	39 07       	cpc	r19, r25
    52b6:	0c f0       	brlt	.+2      	; 0x52ba <eeprom_panel+0x4ba>
    52b8:	4d c0       	rjmp	.+154    	; 0x5354 <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    52ba:	14 2f       	mov	r17, r20
    52bc:	15 0f       	add	r17, r21
    52be:	4a c0       	rjmp	.+148    	; 0x5354 <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    52c0:	21 30       	cpi	r18, 0x01	; 1
    52c2:	79 f5       	brne	.+94     	; 0x5322 <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    52c4:	01 17       	cp	r16, r17
    52c6:	41 f1       	breq	.+80     	; 0x5318 <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    52c8:	a6 01       	movw	r20, r12
    52ca:	56 95       	lsr	r21
    52cc:	54 2f       	mov	r21, r20
    52ce:	44 27       	eor	r20, r20
    52d0:	57 95       	ror	r21
    52d2:	47 95       	ror	r20
    52d4:	40 0f       	add	r20, r16
    52d6:	51 1d       	adc	r21, r1
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	70 e0       	ldi	r23, 0x00	; 0
    52dc:	10 1b       	sub	r17, r16
    52de:	c4 01       	movw	r24, r8
    52e0:	21 2f       	mov	r18, r17
    52e2:	8e 01       	movw	r16, r28
    52e4:	0f 5f       	subi	r16, 0xFF	; 255
    52e6:	1f 4f       	sbci	r17, 0xFF	; 255
    52e8:	0e 94 f6 23 	call	0x47ec	; 0x47ec <verifyEEPage>
    52ec:	89 2b       	or	r24, r25
    52ee:	a1 f4       	brne	.+40     	; 0x5318 <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    52f0:	00 d0       	rcall	.+0      	; 0x52f2 <eeprom_panel+0x4f2>
    52f2:	0f 92       	push	r0
    52f4:	85 ee       	ldi	r24, 0xE5	; 229
    52f6:	9a e0       	ldi	r25, 0x0A	; 10
    52f8:	ad b7       	in	r26, 0x3d	; 61
    52fa:	be b7       	in	r27, 0x3e	; 62
    52fc:	11 96       	adiw	r26, 0x01	; 1
    52fe:	8d 93       	st	X+, r24
    5300:	9c 93       	st	X, r25
    5302:	12 97       	sbiw	r26, 0x02	; 2
    5304:	13 96       	adiw	r26, 0x03	; 3
    5306:	cd 92       	st	X+, r12
    5308:	dc 92       	st	X, r13
    530a:	14 97       	sbiw	r26, 0x04	; 4
    530c:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5318:	83 ee       	ldi	r24, 0xE3	; 227
    531a:	9a e0       	ldi	r25, 0x0A	; 10
    531c:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    5320:	24 c0       	rjmp	.+72     	; 0x536a <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    5322:	00 d0       	rcall	.+0      	; 0x5324 <eeprom_panel+0x524>
    5324:	00 d0       	rcall	.+0      	; 0x5326 <eeprom_panel+0x526>
    5326:	ed b7       	in	r30, 0x3d	; 61
    5328:	fe b7       	in	r31, 0x3e	; 62
    532a:	31 96       	adiw	r30, 0x01	; 1
    532c:	82 ea       	ldi	r24, 0xA2	; 162
    532e:	9a e0       	ldi	r25, 0x0A	; 10
    5330:	ad b7       	in	r26, 0x3d	; 61
    5332:	be b7       	in	r27, 0x3e	; 62
    5334:	11 96       	adiw	r26, 0x01	; 1
    5336:	8d 93       	st	X+, r24
    5338:	9c 93       	st	X, r25
    533a:	12 97       	sbiw	r26, 0x02	; 2
    533c:	22 83       	std	Z+2, r18	; 0x02
    533e:	13 82       	std	Z+3, r1	; 0x03
    5340:	64 82       	std	Z+4, r6	; 0x04
    5342:	75 82       	std	Z+5, r7	; 0x05
    5344:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    5348:	ed b7       	in	r30, 0x3d	; 61
    534a:	fe b7       	in	r31, 0x3e	; 62
    534c:	36 96       	adiw	r30, 0x06	; 6
    534e:	ed bf       	out	0x3d, r30	; 61
    5350:	fe bf       	out	0x3e, r31	; 62
    5352:	0b c0       	rjmp	.+22     	; 0x536a <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    5354:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    5356:	c1 01       	movw	r24, r2
    5358:	60 e0       	ldi	r22, 0x00	; 0
    535a:	71 e0       	ldi	r23, 0x01	; 1
    535c:	49 ee       	ldi	r20, 0xE9	; 233
    535e:	57 e2       	ldi	r21, 0x27	; 39
    5360:	0e 94 4e 50 	call	0xa09c	; 0xa09c <f_gets>
    5364:	89 2b       	or	r24, r25
    5366:	09 f0       	breq	.+2      	; 0x536a <eeprom_panel+0x56a>
    5368:	f7 ce       	rjmp	.-530    	; 0x5158 <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    536a:	85 e4       	ldi	r24, 0x45	; 69
    536c:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    536e:	c4 01       	movw	r24, r8
    5370:	60 e7       	ldi	r22, 0x70	; 112
    5372:	ae 01       	movw	r20, r28
    5374:	4f 5f       	subi	r20, 0xFF	; 255
    5376:	5f 4f       	sbci	r21, 0xFF	; 255
    5378:	21 e0       	ldi	r18, 0x01	; 1
    537a:	00 e0       	ldi	r16, 0x00	; 0
    537c:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    5380:	d4 01       	movw	r26, r8
    5382:	1d 96       	adiw	r26, 0x0d	; 13
    5384:	8c 91       	ld	r24, X
    5386:	1d 97       	sbiw	r26, 0x0d	; 13
    5388:	88 23       	and	r24, r24
    538a:	d1 f7       	brne	.-12     	; 0x5380 <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    538c:	1e 96       	adiw	r26, 0x0e	; 14
    538e:	8c 91       	ld	r24, X
    5390:	1e 97       	sbiw	r26, 0x0e	; 14
    5392:	81 30       	cpi	r24, 0x01	; 1
    5394:	11 f1       	breq	.+68     	; 0x53da <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    5396:	1e 96       	adiw	r26, 0x0e	; 14
    5398:	2c 91       	ld	r18, X
    539a:	00 d0       	rcall	.+0      	; 0x539c <eeprom_panel+0x59c>
    539c:	0f 92       	push	r0
    539e:	ed b7       	in	r30, 0x3d	; 61
    53a0:	fe b7       	in	r31, 0x3e	; 62
    53a2:	31 96       	adiw	r30, 0x01	; 1
    53a4:	87 e8       	ldi	r24, 0x87	; 135
    53a6:	9a e0       	ldi	r25, 0x0A	; 10
    53a8:	ad b7       	in	r26, 0x3d	; 61
    53aa:	be b7       	in	r27, 0x3e	; 62
    53ac:	11 96       	adiw	r26, 0x01	; 1
    53ae:	8d 93       	st	X+, r24
    53b0:	9c 93       	st	X, r25
    53b2:	12 97       	sbiw	r26, 0x02	; 2
    53b4:	22 83       	std	Z+2, r18	; 0x02
    53b6:	13 82       	std	Z+3, r1	; 0x03
    53b8:	0a c0       	rjmp	.+20     	; 0x53ce <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    53ba:	00 d0       	rcall	.+0      	; 0x53bc <eeprom_panel+0x5bc>
    53bc:	0f 92       	push	r0
    53be:	8c e6       	ldi	r24, 0x6C	; 108
    53c0:	9a e0       	ldi	r25, 0x0A	; 10
    53c2:	ed b7       	in	r30, 0x3d	; 61
    53c4:	fe b7       	in	r31, 0x3e	; 62
    53c6:	81 83       	std	Z+1, r24	; 0x01
    53c8:	92 83       	std	Z+2, r25	; 0x02
    53ca:	e3 82       	std	Z+3, r14	; 0x03
    53cc:	f4 82       	std	Z+4, r15	; 0x04
    53ce:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    53d2:	0f 90       	pop	r0
    53d4:	0f 90       	pop	r0
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    }
    
};
    53da:	c0 57       	subi	r28, 0x70	; 112
    53dc:	dd 4f       	sbci	r29, 0xFD	; 253
    53de:	e2 e1       	ldi	r30, 0x12	; 18
    53e0:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

000053e4 <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    53e4:	a0 e9       	ldi	r26, 0x90	; 144
    53e6:	b2 e0       	ldi	r27, 0x02	; 2
    53e8:	e8 ef       	ldi	r30, 0xF8	; 248
    53ea:	f9 e2       	ldi	r31, 0x29	; 41
    53ec:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    53f0:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    53f2:	e8 2e       	mov	r14, r24
    53f4:	ff 24       	eor	r15, r15
    53f6:	f7 01       	movw	r30, r14
    53f8:	e2 5c       	subi	r30, 0xC2	; 194
    53fa:	f8 4d       	sbci	r31, 0xD8	; 216
    53fc:	e0 81       	ld	r30, Z
    if (ch != 0){
    53fe:	ee 23       	and	r30, r30
    5400:	09 f4       	brne	.+2      	; 0x5404 <flash_panel+0x20>
    5402:	e1 c2       	rjmp	.+1474   	; 0x59c6 <flash_panel+0x5e2>
        
        switch (ch) {
    5404:	e3 30       	cpi	r30, 0x03	; 3
    5406:	71 f0       	breq	.+28     	; 0x5424 <flash_panel+0x40>
    5408:	e4 30       	cpi	r30, 0x04	; 4
    540a:	89 f0       	breq	.+34     	; 0x542e <flash_panel+0x4a>
    540c:	e2 30       	cpi	r30, 0x02	; 2
    540e:	29 f4       	brne	.+10     	; 0x541a <flash_panel+0x36>
    5410:	98 e9       	ldi	r25, 0x98	; 152
    5412:	89 2e       	mov	r8, r25
    5414:	99 e2       	ldi	r25, 0x29	; 41
    5416:	99 2e       	mov	r9, r25
    5418:	0e c0       	rjmp	.+28     	; 0x5436 <flash_panel+0x52>
    541a:	8e e7       	ldi	r24, 0x7E	; 126
    541c:	88 2e       	mov	r8, r24
    541e:	86 e2       	ldi	r24, 0x26	; 38
    5420:	98 2e       	mov	r9, r24
    5422:	09 c0       	rjmp	.+18     	; 0x5436 <flash_panel+0x52>
    5424:	1e e2       	ldi	r17, 0x2E	; 46
    5426:	81 2e       	mov	r8, r17
    5428:	17 e2       	ldi	r17, 0x27	; 39
    542a:	91 2e       	mov	r9, r17
    542c:	04 c0       	rjmp	.+8      	; 0x5436 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    542e:	b0 ea       	ldi	r27, 0xA0	; 160
    5430:	8b 2e       	mov	r8, r27
    5432:	b5 e2       	ldi	r27, 0x25	; 37
    5434:	9b 2e       	mov	r9, r27
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    5436:	89 ec       	ldi	r24, 0xC9	; 201
    5438:	97 e2       	ldi	r25, 0x27	; 39
    543a:	6a ed       	ldi	r22, 0xDA	; 218
    543c:	73 e2       	ldi	r23, 0x23	; 35
    543e:	41 e0       	ldi	r20, 0x01	; 1
    5440:	0e 94 8d 4d 	call	0x9b1a	; 0x9b1a <f_open>
    5444:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5446:	88 23       	and	r24, r24
    5448:	49 f0       	breq	.+18     	; 0x545c <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    544a:	80 e6       	ldi	r24, 0x60	; 96
    544c:	9f e0       	ldi	r25, 0x0F	; 15
    544e:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            put_rc(res);
    5452:	81 2f       	mov	r24, r17
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <put_rc>
    545a:	51 c0       	rjmp	.+162    	; 0x54fe <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    545c:	07 ff       	sbrs	r16, 7
    545e:	12 c0       	rjmp	.+36     	; 0x5484 <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    5460:	84 e0       	ldi	r24, 0x04	; 4
    5462:	e0 e6       	ldi	r30, 0x60	; 96
    5464:	f6 e0       	ldi	r31, 0x06	; 6
    5466:	86 83       	std	Z+6, r24	; 0x06
    5468:	84 e6       	ldi	r24, 0x64	; 100
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	20 e2       	ldi	r18, 0x20	; 32
    546e:	33 e0       	ldi	r19, 0x03	; 3
    5470:	f9 01       	movw	r30, r18
    5472:	31 97       	sbiw	r30, 0x01	; 1
    5474:	f1 f7       	brne	.-4      	; 0x5472 <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5476:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5478:	d9 f7       	brne	.-10     	; 0x5470 <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    547a:	84 e0       	ldi	r24, 0x04	; 4
    547c:	e0 e6       	ldi	r30, 0x60	; 96
    547e:	f6 e0       	ldi	r31, 0x06	; 6
    5480:	85 83       	std	Z+5, r24	; 0x05
    5482:	3d c0       	rjmp	.+122    	; 0x54fe <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    5484:	00 d0       	rcall	.+0      	; 0x5486 <flash_panel+0xa2>
    5486:	0f 92       	push	r0
    5488:	8f e4       	ldi	r24, 0x4F	; 79
    548a:	9f e0       	ldi	r25, 0x0F	; 15
    548c:	ad b7       	in	r26, 0x3d	; 61
    548e:	be b7       	in	r27, 0x3e	; 62
    5490:	11 96       	adiw	r26, 0x01	; 1
    5492:	8d 93       	st	X+, r24
    5494:	9c 93       	st	X, r25
    5496:	12 97       	sbiw	r26, 0x02	; 2
    5498:	13 96       	adiw	r26, 0x03	; 3
    549a:	ed 92       	st	X+, r14
    549c:	fc 92       	st	X, r15
    549e:	14 97       	sbiw	r26, 0x04	; 4
    54a0:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                pagebuff[0] = 0x00;
    54a4:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    54aa:	0f 90       	pop	r0
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	0f 90       	pop	r0
    54b2:	c4 01       	movw	r24, r8
    54b4:	60 2f       	mov	r22, r16
    54b6:	ae 01       	movw	r20, r28
    54b8:	4f 5f       	subi	r20, 0xFF	; 255
    54ba:	5f 4f       	sbci	r21, 0xFF	; 255
    54bc:	22 e0       	ldi	r18, 0x02	; 2
    54be:	00 e0       	ldi	r16, 0x00	; 0
    54c0:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    54c4:	f4 01       	movw	r30, r8
    54c6:	85 85       	ldd	r24, Z+13	; 0x0d
    54c8:	88 23       	and	r24, r24
    54ca:	e1 f7       	brne	.-8      	; 0x54c4 <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    54cc:	86 85       	ldd	r24, Z+14	; 0x0e
    54ce:	81 30       	cpi	r24, 0x01	; 1
    54d0:	b1 f0       	breq	.+44     	; 0x54fe <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    54d2:	26 85       	ldd	r18, Z+14	; 0x0e
    54d4:	00 d0       	rcall	.+0      	; 0x54d6 <flash_panel+0xf2>
    54d6:	0f 92       	push	r0
    54d8:	ed b7       	in	r30, 0x3d	; 61
    54da:	fe b7       	in	r31, 0x3e	; 62
    54dc:	31 96       	adiw	r30, 0x01	; 1
    54de:	81 e3       	ldi	r24, 0x31	; 49
    54e0:	9f e0       	ldi	r25, 0x0F	; 15
    54e2:	ad b7       	in	r26, 0x3d	; 61
    54e4:	be b7       	in	r27, 0x3e	; 62
    54e6:	11 96       	adiw	r26, 0x01	; 1
    54e8:	8d 93       	st	X+, r24
    54ea:	9c 93       	st	X, r25
    54ec:	12 97       	sbiw	r26, 0x02	; 2
    54ee:	22 83       	std	Z+2, r18	; 0x02
    54f0:	13 82       	std	Z+3, r1	; 0x03
    54f2:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    54f6:	0f 90       	pop	r0
    54f8:	0f 90       	pop	r0
    54fa:	0f 90       	pop	r0
    54fc:	0f 90       	pop	r0
    54fe:	88 e8       	ldi	r24, 0x88	; 136
    5500:	93 e1       	ldi	r25, 0x13	; 19
    5502:	20 e2       	ldi	r18, 0x20	; 32
    5504:	33 e0       	ldi	r19, 0x03	; 3
    5506:	f9 01       	movw	r30, r18
    5508:	31 97       	sbiw	r30, 0x01	; 1
    550a:	f1 f7       	brne	.-4      	; 0x5508 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    550c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550e:	d9 f7       	brne	.-10     	; 0x5506 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    5510:	84 e2       	ldi	r24, 0x24	; 36
    5512:	9f e0       	ldi	r25, 0x0F	; 15
    5514:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    5518:	0f ef       	ldi	r16, 0xFF	; 255
    551a:	1f ef       	ldi	r17, 0xFF	; 255
    551c:	cc 24       	eor	r12, r12
    551e:	dd 24       	eor	r13, r13
    5520:	66 24       	eor	r6, r6
    5522:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5524:	a6 e8       	ldi	r26, 0x86	; 134
    5526:	2a 2e       	mov	r2, r26
    5528:	31 2c       	mov	r3, r1
    552a:	2c 0e       	add	r2, r28
    552c:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    552e:	f6 e8       	ldi	r31, 0x86	; 134
    5530:	4f 2e       	mov	r4, r31
    5532:	f1 e0       	ldi	r31, 0x01	; 1
    5534:	5f 2e       	mov	r5, r31
    5536:	4c 0e       	add	r4, r28
    5538:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    553a:	f2 01       	movw	r30, r4
    553c:	34 96       	adiw	r30, 0x04	; 4
    553e:	c3 57       	subi	r28, 0x73	; 115
    5540:	dd 4f       	sbci	r29, 0xFD	; 253
    5542:	e8 83       	st	Y, r30
    5544:	f9 83       	std	Y+1, r31	; 0x01
    5546:	cd 58       	subi	r28, 0x8D	; 141
    5548:	d2 40       	sbci	r29, 0x02	; 2
    554a:	cb c0       	rjmp	.+406    	; 0x56e2 <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    554c:	08 94       	sec
    554e:	61 1c       	adc	r6, r1
    5550:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    5552:	f1 01       	movw	r30, r2
    5554:	01 90       	ld	r0, Z+
    5556:	00 20       	and	r0, r0
    5558:	e9 f7       	brne	.-6      	; 0x5554 <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    555a:	32 97       	sbiw	r30, 0x02	; 2
    555c:	80 81       	ld	r24, Z
    555e:	8a 30       	cpi	r24, 0x0A	; 10
    5560:	09 f4       	brne	.+2      	; 0x5564 <flash_panel+0x180>
                flashBuff[--len] = 0;
    5562:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    5564:	d1 01       	movw	r26, r2
    5566:	8c 91       	ld	r24, X
    5568:	8a 33       	cpi	r24, 0x3A	; 58
    556a:	09 f0       	breq	.+2      	; 0x556e <flash_panel+0x18a>
    556c:	ba c0       	rjmp	.+372    	; 0x56e2 <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    556e:	c2 01       	movw	r24, r4
    5570:	b1 01       	movw	r22, r2
    5572:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <ihex_readrec>
    5576:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5578:	c6 57       	subi	r28, 0x76	; 118
    557a:	dd 4f       	sbci	r29, 0xFD	; 253
    557c:	88 81       	ld	r24, Y
    557e:	ca 58       	subi	r28, 0x8A	; 138
    5580:	d2 40       	sbci	r29, 0x02	; 2
    5582:	f8 16       	cp	r15, r24
    5584:	19 f1       	breq	.+70     	; 0x55cc <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    5586:	00 d0       	rcall	.+0      	; 0x5588 <flash_panel+0x1a4>
    5588:	0f 92       	push	r0
    558a:	81 ef       	ldi	r24, 0xF1	; 241
    558c:	9e e0       	ldi	r25, 0x0E	; 14
    558e:	ed b7       	in	r30, 0x3d	; 61
    5590:	fe b7       	in	r31, 0x3e	; 62
    5592:	81 83       	std	Z+1, r24	; 0x01
    5594:	92 83       	std	Z+2, r25	; 0x02
    5596:	63 82       	std	Z+3, r6	; 0x03
    5598:	74 82       	std	Z+4, r7	; 0x04
    559a:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    559e:	0f 92       	push	r0
    55a0:	0f 92       	push	r0
    55a2:	ed b7       	in	r30, 0x3d	; 61
    55a4:	fe b7       	in	r31, 0x3e	; 62
    55a6:	31 96       	adiw	r30, 0x01	; 1
    55a8:	86 ec       	ldi	r24, 0xC6	; 198
    55aa:	9e e0       	ldi	r25, 0x0E	; 14
    55ac:	ad b7       	in	r26, 0x3d	; 61
    55ae:	be b7       	in	r27, 0x3e	; 62
    55b0:	11 96       	adiw	r26, 0x01	; 1
    55b2:	8d 93       	st	X+, r24
    55b4:	9c 93       	st	X, r25
    55b6:	12 97       	sbiw	r26, 0x02	; 2
    55b8:	c6 57       	subi	r28, 0x76	; 118
    55ba:	dd 4f       	sbci	r29, 0xFD	; 253
    55bc:	88 81       	ld	r24, Y
    55be:	ca 58       	subi	r28, 0x8A	; 138
    55c0:	d2 40       	sbci	r29, 0x02	; 2
    55c2:	82 83       	std	Z+2, r24	; 0x02
    55c4:	13 82       	std	Z+3, r1	; 0x03
    55c6:	f4 82       	std	Z+4, r15	; 0x04
    55c8:	15 82       	std	Z+5, r1	; 0x05
    55ca:	82 c0       	rjmp	.+260    	; 0x56d0 <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    55cc:	d2 01       	movw	r26, r4
    55ce:	13 96       	adiw	r26, 0x03	; 3
    55d0:	2c 91       	ld	r18, X
    55d2:	13 97       	sbiw	r26, 0x03	; 3
    55d4:	22 23       	and	r18, r18
    55d6:	09 f0       	breq	.+2      	; 0x55da <flash_panel+0x1f6>
    55d8:	53 c0       	rjmp	.+166    	; 0x5680 <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    55da:	11 96       	adiw	r26, 0x01	; 1
    55dc:	ed 90       	ld	r14, X+
    55de:	fc 90       	ld	r15, X
    55e0:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    55e2:	57 01       	movw	r10, r14
    55e4:	aa 0c       	add	r10, r10
    55e6:	ab 2c       	mov	r10, r11
    55e8:	aa 1c       	adc	r10, r10
    55ea:	bb 08       	sbc	r11, r11
    55ec:	b1 94       	neg	r11
    55ee:	a0 16       	cp	r10, r16
    55f0:	b1 06       	cpc	r11, r17
    55f2:	c1 f0       	breq	.+48     	; 0x5624 <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    55f4:	cd 14       	cp	r12, r13
    55f6:	91 f0       	breq	.+36     	; 0x561c <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    55f8:	16 95       	lsr	r17
    55fa:	10 2f       	mov	r17, r16
    55fc:	00 27       	eor	r16, r16
    55fe:	17 95       	ror	r17
    5600:	07 95       	ror	r16
    5602:	0c 0d       	add	r16, r12
    5604:	11 1d       	adc	r17, r1
    5606:	a8 01       	movw	r20, r16
    5608:	60 e0       	ldi	r22, 0x00	; 0
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	dc 18       	sub	r13, r12
    560e:	c4 01       	movw	r24, r8
    5610:	2d 2d       	mov	r18, r13
    5612:	8e 01       	movw	r16, r28
    5614:	0f 5f       	subi	r16, 0xFF	; 255
    5616:	1f 4f       	sbci	r17, 0xFF	; 255
    5618:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    561c:	6f e7       	ldi	r22, 0x7F	; 127
    561e:	d6 2e       	mov	r13, r22
    5620:	de 20       	and	r13, r14
    5622:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    5624:	4e 2d       	mov	r20, r14
    5626:	4f 77       	andi	r20, 0x7F	; 127
    5628:	4c 15       	cp	r20, r12
    562a:	08 f4       	brcc	.+2      	; 0x562e <flash_panel+0x24a>
    562c:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    562e:	f2 01       	movw	r30, r4
    5630:	50 81       	ld	r21, Z
    5632:	25 2f       	mov	r18, r21
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	c3 57       	subi	r28, 0x73	; 115
    5638:	dd 4f       	sbci	r29, 0xFD	; 253
    563a:	a8 81       	ld	r26, Y
    563c:	b9 81       	ldd	r27, Y+1	; 0x01
    563e:	cd 58       	subi	r28, 0x8D	; 141
    5640:	d2 40       	sbci	r29, 0x02	; 2
    5642:	e4 2f       	mov	r30, r20
    5644:	f0 e0       	ldi	r31, 0x00	; 0
    5646:	35 96       	adiw	r30, 0x05	; 5
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	8c 0f       	add	r24, r28
    564e:	9d 1f       	adc	r25, r29
    5650:	e8 0f       	add	r30, r24
    5652:	f9 1f       	adc	r31, r25
    5654:	2c 5f       	subi	r18, 0xFC	; 252
    5656:	3f 4f       	sbci	r19, 0xFF	; 255
    5658:	24 0d       	add	r18, r4
    565a:	35 1d       	adc	r19, r5
    565c:	02 c0       	rjmp	.+4      	; 0x5662 <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    565e:	8d 91       	ld	r24, X+
    5660:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5662:	a2 17       	cp	r26, r18
    5664:	b3 07       	cpc	r27, r19
    5666:	d9 f7       	brne	.-10     	; 0x565e <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    5668:	85 2f       	mov	r24, r21
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	84 0f       	add	r24, r20
    566e:	91 1d       	adc	r25, r1
    5670:	2d 2d       	mov	r18, r13
    5672:	30 e0       	ldi	r19, 0x00	; 0
    5674:	28 17       	cp	r18, r24
    5676:	39 07       	cpc	r19, r25
    5678:	9c f5       	brge	.+102    	; 0x56e0 <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    567a:	d4 2e       	mov	r13, r20
    567c:	d5 0e       	add	r13, r21
    567e:	30 c0       	rjmp	.+96     	; 0x56e0 <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    5680:	21 30       	cpi	r18, 0x01	; 1
    5682:	a9 f4       	brne	.+42     	; 0x56ae <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5684:	cd 14       	cp	r12, r13
    5686:	b9 f1       	breq	.+110    	; 0x56f6 <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    5688:	16 95       	lsr	r17
    568a:	10 2f       	mov	r17, r16
    568c:	00 27       	eor	r16, r16
    568e:	17 95       	ror	r17
    5690:	07 95       	ror	r16
    5692:	0c 0d       	add	r16, r12
    5694:	11 1d       	adc	r17, r1
    5696:	a8 01       	movw	r20, r16
    5698:	60 e0       	ldi	r22, 0x00	; 0
    569a:	70 e0       	ldi	r23, 0x00	; 0
    569c:	dc 18       	sub	r13, r12
    569e:	c4 01       	movw	r24, r8
    56a0:	2d 2d       	mov	r18, r13
    56a2:	8e 01       	movw	r16, r28
    56a4:	0f 5f       	subi	r16, 0xFF	; 255
    56a6:	1f 4f       	sbci	r17, 0xFF	; 255
    56a8:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <progPage>
    56ac:	24 c0       	rjmp	.+72     	; 0x56f6 <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    56ae:	00 d0       	rcall	.+0      	; 0x56b0 <flash_panel+0x2cc>
    56b0:	00 d0       	rcall	.+0      	; 0x56b2 <flash_panel+0x2ce>
    56b2:	ed b7       	in	r30, 0x3d	; 61
    56b4:	fe b7       	in	r31, 0x3e	; 62
    56b6:	31 96       	adiw	r30, 0x01	; 1
    56b8:	86 e8       	ldi	r24, 0x86	; 134
    56ba:	9e e0       	ldi	r25, 0x0E	; 14
    56bc:	ad b7       	in	r26, 0x3d	; 61
    56be:	be b7       	in	r27, 0x3e	; 62
    56c0:	11 96       	adiw	r26, 0x01	; 1
    56c2:	8d 93       	st	X+, r24
    56c4:	9c 93       	st	X, r25
    56c6:	12 97       	sbiw	r26, 0x02	; 2
    56c8:	22 83       	std	Z+2, r18	; 0x02
    56ca:	13 82       	std	Z+3, r1	; 0x03
    56cc:	64 82       	std	Z+4, r6	; 0x04
    56ce:	75 82       	std	Z+5, r7	; 0x05
    56d0:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    56d4:	ed b7       	in	r30, 0x3d	; 61
    56d6:	fe b7       	in	r31, 0x3e	; 62
    56d8:	36 96       	adiw	r30, 0x06	; 6
    56da:	ed bf       	out	0x3d, r30	; 61
    56dc:	fe bf       	out	0x3e, r31	; 62
    56de:	0b c0       	rjmp	.+22     	; 0x56f6 <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    56e0:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    56e2:	c1 01       	movw	r24, r2
    56e4:	60 e0       	ldi	r22, 0x00	; 0
    56e6:	71 e0       	ldi	r23, 0x01	; 1
    56e8:	49 ec       	ldi	r20, 0xC9	; 201
    56ea:	57 e2       	ldi	r21, 0x27	; 39
    56ec:	0e 94 4e 50 	call	0xa09c	; 0xa09c <f_gets>
    56f0:	89 2b       	or	r24, r25
    56f2:	09 f0       	breq	.+2      	; 0x56f6 <flash_panel+0x312>
    56f4:	2b cf       	rjmp	.-426    	; 0x554c <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    56f6:	89 ec       	ldi	r24, 0xC9	; 201
    56f8:	97 e2       	ldi	r25, 0x27	; 39
    56fa:	40 e0       	ldi	r20, 0x00	; 0
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	60 e0       	ldi	r22, 0x00	; 0
    5700:	70 e0       	ldi	r23, 0x00	; 0
    5702:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <f_lseek>
    5706:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5708:	88 23       	and	r24, r24
    570a:	49 f0       	breq	.+18     	; 0x571e <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    570c:	89 e6       	ldi	r24, 0x69	; 105
    570e:	9e e0       	ldi	r25, 0x0E	; 14
    5710:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
            put_rc(res);
    5714:	81 2f       	mov	r24, r17
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <put_rc>
    571c:	2c c1       	rjmp	.+600    	; 0x5976 <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    571e:	8c e5       	ldi	r24, 0x5C	; 92
    5720:	9e e0       	ldi	r25, 0x0E	; 14
    5722:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    5726:	cc 24       	eor	r12, r12
    5728:	ca 94       	dec	r12
    572a:	dc 2c       	mov	r13, r12
    572c:	00 e0       	ldi	r16, 0x00	; 0
    572e:	10 e0       	ldi	r17, 0x00	; 0
    5730:	66 24       	eor	r6, r6
    5732:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    5734:	ce 01       	movw	r24, r28
    5736:	8a 57       	subi	r24, 0x7A	; 122
    5738:	9f 4f       	sbci	r25, 0xFF	; 255
    573a:	c1 57       	subi	r28, 0x71	; 113
    573c:	dd 4f       	sbci	r29, 0xFD	; 253
    573e:	88 83       	st	Y, r24
    5740:	99 83       	std	Y+1, r25	; 0x01
    5742:	cf 58       	subi	r28, 0x8F	; 143
    5744:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5746:	46 e8       	ldi	r20, 0x86	; 134
    5748:	44 2e       	mov	r4, r20
    574a:	41 e0       	ldi	r20, 0x01	; 1
    574c:	54 2e       	mov	r5, r20
    574e:	4c 0e       	add	r4, r28
    5750:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5752:	d2 01       	movw	r26, r4
    5754:	14 96       	adiw	r26, 0x04	; 4
    5756:	c5 57       	subi	r28, 0x75	; 117
    5758:	dd 4f       	sbci	r29, 0xFD	; 253
    575a:	a8 83       	st	Y, r26
    575c:	b9 83       	std	Y+1, r27	; 0x01
    575e:	cb 58       	subi	r28, 0x8B	; 139
    5760:	d2 40       	sbci	r29, 0x02	; 2
    5762:	ff c0       	rjmp	.+510    	; 0x5962 <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    5764:	08 94       	sec
    5766:	61 1c       	adc	r6, r1
    5768:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    576a:	c1 57       	subi	r28, 0x71	; 113
    576c:	dd 4f       	sbci	r29, 0xFD	; 253
    576e:	e8 81       	ld	r30, Y
    5770:	f9 81       	ldd	r31, Y+1	; 0x01
    5772:	cf 58       	subi	r28, 0x8F	; 143
    5774:	d2 40       	sbci	r29, 0x02	; 2
    5776:	01 90       	ld	r0, Z+
    5778:	00 20       	and	r0, r0
    577a:	e9 f7       	brne	.-6      	; 0x5776 <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    577c:	32 97       	sbiw	r30, 0x02	; 2
    577e:	80 81       	ld	r24, Z
    5780:	8a 30       	cpi	r24, 0x0A	; 10
    5782:	09 f4       	brne	.+2      	; 0x5786 <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    5784:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    5786:	ca 57       	subi	r28, 0x7A	; 122
    5788:	df 4f       	sbci	r29, 0xFF	; 255
    578a:	88 81       	ld	r24, Y
    578c:	c6 58       	subi	r28, 0x86	; 134
    578e:	d0 40       	sbci	r29, 0x00	; 0
    5790:	8a 33       	cpi	r24, 0x3A	; 58
    5792:	09 f0       	breq	.+2      	; 0x5796 <flash_panel+0x3b2>
    5794:	e6 c0       	rjmp	.+460    	; 0x5962 <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5796:	c2 01       	movw	r24, r4
    5798:	b1 01       	movw	r22, r2
    579a:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <ihex_readrec>
    579e:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    57a0:	c6 57       	subi	r28, 0x76	; 118
    57a2:	dd 4f       	sbci	r29, 0xFD	; 253
    57a4:	88 81       	ld	r24, Y
    57a6:	ca 58       	subi	r28, 0x8A	; 138
    57a8:	d2 40       	sbci	r29, 0x02	; 2
    57aa:	f8 16       	cp	r15, r24
    57ac:	19 f1       	breq	.+70     	; 0x57f4 <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    57ae:	00 d0       	rcall	.+0      	; 0x57b0 <flash_panel+0x3cc>
    57b0:	0f 92       	push	r0
    57b2:	8a e2       	ldi	r24, 0x2A	; 42
    57b4:	9e e0       	ldi	r25, 0x0E	; 14
    57b6:	ed b7       	in	r30, 0x3d	; 61
    57b8:	fe b7       	in	r31, 0x3e	; 62
    57ba:	81 83       	std	Z+1, r24	; 0x01
    57bc:	92 83       	std	Z+2, r25	; 0x02
    57be:	63 82       	std	Z+3, r6	; 0x03
    57c0:	74 82       	std	Z+4, r7	; 0x04
    57c2:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    57c6:	0f 92       	push	r0
    57c8:	0f 92       	push	r0
    57ca:	ed b7       	in	r30, 0x3d	; 61
    57cc:	fe b7       	in	r31, 0x3e	; 62
    57ce:	31 96       	adiw	r30, 0x01	; 1
    57d0:	8f ef       	ldi	r24, 0xFF	; 255
    57d2:	9d e0       	ldi	r25, 0x0D	; 13
    57d4:	ad b7       	in	r26, 0x3d	; 61
    57d6:	be b7       	in	r27, 0x3e	; 62
    57d8:	11 96       	adiw	r26, 0x01	; 1
    57da:	8d 93       	st	X+, r24
    57dc:	9c 93       	st	X, r25
    57de:	12 97       	sbiw	r26, 0x02	; 2
    57e0:	c6 57       	subi	r28, 0x76	; 118
    57e2:	dd 4f       	sbci	r29, 0xFD	; 253
    57e4:	88 81       	ld	r24, Y
    57e6:	ca 58       	subi	r28, 0x8A	; 138
    57e8:	d2 40       	sbci	r29, 0x02	; 2
    57ea:	82 83       	std	Z+2, r24	; 0x02
    57ec:	13 82       	std	Z+3, r1	; 0x03
    57ee:	f4 82       	std	Z+4, r15	; 0x04
    57f0:	15 82       	std	Z+5, r1	; 0x05
    57f2:	ae c0       	rjmp	.+348    	; 0x5950 <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    57f4:	d2 01       	movw	r26, r4
    57f6:	13 96       	adiw	r26, 0x03	; 3
    57f8:	2c 91       	ld	r18, X
    57fa:	13 97       	sbiw	r26, 0x03	; 3
    57fc:	22 23       	and	r18, r18
    57fe:	09 f0       	breq	.+2      	; 0x5802 <flash_panel+0x41e>
    5800:	65 c0       	rjmp	.+202    	; 0x58cc <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    5802:	11 96       	adiw	r26, 0x01	; 1
    5804:	ed 90       	ld	r14, X+
    5806:	fc 90       	ld	r15, X
    5808:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    580a:	57 01       	movw	r10, r14
    580c:	aa 0c       	add	r10, r10
    580e:	ab 2c       	mov	r10, r11
    5810:	aa 1c       	adc	r10, r10
    5812:	bb 08       	sbc	r11, r11
    5814:	b1 94       	neg	r11
    5816:	ac 14       	cp	r10, r12
    5818:	bd 04       	cpc	r11, r13
    581a:	49 f1       	breq	.+82     	; 0x586e <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    581c:	01 17       	cp	r16, r17
    581e:	21 f1       	breq	.+72     	; 0x5868 <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5820:	a6 01       	movw	r20, r12
    5822:	56 95       	lsr	r21
    5824:	54 2f       	mov	r21, r20
    5826:	44 27       	eor	r20, r20
    5828:	57 95       	ror	r21
    582a:	47 95       	ror	r20
    582c:	40 0f       	add	r20, r16
    582e:	51 1d       	adc	r21, r1
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	70 e0       	ldi	r23, 0x00	; 0
    5834:	10 1b       	sub	r17, r16
    5836:	c4 01       	movw	r24, r8
    5838:	21 2f       	mov	r18, r17
    583a:	8e 01       	movw	r16, r28
    583c:	0f 5f       	subi	r16, 0xFF	; 255
    583e:	1f 4f       	sbci	r17, 0xFF	; 255
    5840:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <verifyPage>
    5844:	89 2b       	or	r24, r25
    5846:	81 f4       	brne	.+32     	; 0x5868 <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5848:	00 d0       	rcall	.+0      	; 0x584a <flash_panel+0x466>
    584a:	0f 92       	push	r0
    584c:	82 ee       	ldi	r24, 0xE2	; 226
    584e:	9d e0       	ldi	r25, 0x0D	; 13
    5850:	ed b7       	in	r30, 0x3d	; 61
    5852:	fe b7       	in	r31, 0x3e	; 62
    5854:	81 83       	std	Z+1, r24	; 0x01
    5856:	92 83       	std	Z+2, r25	; 0x02
    5858:	c3 82       	std	Z+3, r12	; 0x03
    585a:	d4 82       	std	Z+4, r13	; 0x04
    585c:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    5860:	0f 90       	pop	r0
    5862:	0f 90       	pop	r0
    5864:	0f 90       	pop	r0
    5866:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5868:	1e 2d       	mov	r17, r14
    586a:	1f 77       	andi	r17, 0x7F	; 127
    586c:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    586e:	4e 2d       	mov	r20, r14
    5870:	4f 77       	andi	r20, 0x7F	; 127
    5872:	40 17       	cp	r20, r16
    5874:	08 f4       	brcc	.+2      	; 0x5878 <flash_panel+0x494>
    5876:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5878:	d2 01       	movw	r26, r4
    587a:	5c 91       	ld	r21, X
    587c:	25 2f       	mov	r18, r21
    587e:	30 e0       	ldi	r19, 0x00	; 0
    5880:	c5 57       	subi	r28, 0x75	; 117
    5882:	dd 4f       	sbci	r29, 0xFD	; 253
    5884:	a8 81       	ld	r26, Y
    5886:	b9 81       	ldd	r27, Y+1	; 0x01
    5888:	cb 58       	subi	r28, 0x8B	; 139
    588a:	d2 40       	sbci	r29, 0x02	; 2
    588c:	e4 2f       	mov	r30, r20
    588e:	f0 e0       	ldi	r31, 0x00	; 0
    5890:	35 96       	adiw	r30, 0x05	; 5
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	8c 0f       	add	r24, r28
    5898:	9d 1f       	adc	r25, r29
    589a:	e8 0f       	add	r30, r24
    589c:	f9 1f       	adc	r31, r25
    589e:	2c 5f       	subi	r18, 0xFC	; 252
    58a0:	3f 4f       	sbci	r19, 0xFF	; 255
    58a2:	24 0d       	add	r18, r4
    58a4:	35 1d       	adc	r19, r5
    58a6:	02 c0       	rjmp	.+4      	; 0x58ac <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    58a8:	8d 91       	ld	r24, X+
    58aa:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    58ac:	a2 17       	cp	r26, r18
    58ae:	b3 07       	cpc	r27, r19
    58b0:	d9 f7       	brne	.-10     	; 0x58a8 <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    58b2:	85 2f       	mov	r24, r21
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	84 0f       	add	r24, r20
    58b8:	91 1d       	adc	r25, r1
    58ba:	21 2f       	mov	r18, r17
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	28 17       	cp	r18, r24
    58c0:	39 07       	cpc	r19, r25
    58c2:	0c f0       	brlt	.+2      	; 0x58c6 <flash_panel+0x4e2>
    58c4:	4d c0       	rjmp	.+154    	; 0x5960 <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    58c6:	14 2f       	mov	r17, r20
    58c8:	15 0f       	add	r17, r21
    58ca:	4a c0       	rjmp	.+148    	; 0x5960 <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    58cc:	21 30       	cpi	r18, 0x01	; 1
    58ce:	79 f5       	brne	.+94     	; 0x592e <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    58d0:	01 17       	cp	r16, r17
    58d2:	41 f1       	breq	.+80     	; 0x5924 <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    58d4:	a6 01       	movw	r20, r12
    58d6:	56 95       	lsr	r21
    58d8:	54 2f       	mov	r21, r20
    58da:	44 27       	eor	r20, r20
    58dc:	57 95       	ror	r21
    58de:	47 95       	ror	r20
    58e0:	40 0f       	add	r20, r16
    58e2:	51 1d       	adc	r21, r1
    58e4:	60 e0       	ldi	r22, 0x00	; 0
    58e6:	70 e0       	ldi	r23, 0x00	; 0
    58e8:	10 1b       	sub	r17, r16
    58ea:	c4 01       	movw	r24, r8
    58ec:	21 2f       	mov	r18, r17
    58ee:	8e 01       	movw	r16, r28
    58f0:	0f 5f       	subi	r16, 0xFF	; 255
    58f2:	1f 4f       	sbci	r17, 0xFF	; 255
    58f4:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <verifyPage>
    58f8:	89 2b       	or	r24, r25
    58fa:	a1 f4       	brne	.+40     	; 0x5924 <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    58fc:	00 d0       	rcall	.+0      	; 0x58fe <flash_panel+0x51a>
    58fe:	0f 92       	push	r0
    5900:	85 ec       	ldi	r24, 0xC5	; 197
    5902:	9d e0       	ldi	r25, 0x0D	; 13
    5904:	ad b7       	in	r26, 0x3d	; 61
    5906:	be b7       	in	r27, 0x3e	; 62
    5908:	11 96       	adiw	r26, 0x01	; 1
    590a:	8d 93       	st	X+, r24
    590c:	9c 93       	st	X, r25
    590e:	12 97       	sbiw	r26, 0x02	; 2
    5910:	13 96       	adiw	r26, 0x03	; 3
    5912:	cd 92       	st	X+, r12
    5914:	dc 92       	st	X, r13
    5916:	14 97       	sbiw	r26, 0x04	; 4
    5918:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    591c:	0f 90       	pop	r0
    591e:	0f 90       	pop	r0
    5920:	0f 90       	pop	r0
    5922:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5924:	83 ec       	ldi	r24, 0xC3	; 195
    5926:	9d e0       	ldi	r25, 0x0D	; 13
    5928:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <xputs>
    592c:	24 c0       	rjmp	.+72     	; 0x5976 <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    592e:	00 d0       	rcall	.+0      	; 0x5930 <flash_panel+0x54c>
    5930:	00 d0       	rcall	.+0      	; 0x5932 <flash_panel+0x54e>
    5932:	ed b7       	in	r30, 0x3d	; 61
    5934:	fe b7       	in	r31, 0x3e	; 62
    5936:	31 96       	adiw	r30, 0x01	; 1
    5938:	83 e8       	ldi	r24, 0x83	; 131
    593a:	9d e0       	ldi	r25, 0x0D	; 13
    593c:	ad b7       	in	r26, 0x3d	; 61
    593e:	be b7       	in	r27, 0x3e	; 62
    5940:	11 96       	adiw	r26, 0x01	; 1
    5942:	8d 93       	st	X+, r24
    5944:	9c 93       	st	X, r25
    5946:	12 97       	sbiw	r26, 0x02	; 2
    5948:	22 83       	std	Z+2, r18	; 0x02
    594a:	13 82       	std	Z+3, r1	; 0x03
    594c:	64 82       	std	Z+4, r6	; 0x04
    594e:	75 82       	std	Z+5, r7	; 0x05
    5950:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    5954:	ed b7       	in	r30, 0x3d	; 61
    5956:	fe b7       	in	r31, 0x3e	; 62
    5958:	36 96       	adiw	r30, 0x06	; 6
    595a:	ed bf       	out	0x3d, r30	; 61
    595c:	fe bf       	out	0x3e, r31	; 62
    595e:	0b c0       	rjmp	.+22     	; 0x5976 <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    5960:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5962:	c1 01       	movw	r24, r2
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	71 e0       	ldi	r23, 0x01	; 1
    5968:	49 ec       	ldi	r20, 0xC9	; 201
    596a:	57 e2       	ldi	r21, 0x27	; 39
    596c:	0e 94 4e 50 	call	0xa09c	; 0xa09c <f_gets>
    5970:	89 2b       	or	r24, r25
    5972:	09 f0       	breq	.+2      	; 0x5976 <flash_panel+0x592>
    5974:	f7 ce       	rjmp	.-530    	; 0x5764 <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5976:	85 e4       	ldi	r24, 0x45	; 69
    5978:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    597a:	c4 01       	movw	r24, r8
    597c:	60 e7       	ldi	r22, 0x70	; 112
    597e:	ae 01       	movw	r20, r28
    5980:	4f 5f       	subi	r20, 0xFF	; 255
    5982:	5f 4f       	sbci	r21, 0xFF	; 255
    5984:	21 e0       	ldi	r18, 0x01	; 1
    5986:	00 e0       	ldi	r16, 0x00	; 0
    5988:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    598c:	d4 01       	movw	r26, r8
    598e:	1d 96       	adiw	r26, 0x0d	; 13
    5990:	8c 91       	ld	r24, X
    5992:	1d 97       	sbiw	r26, 0x0d	; 13
    5994:	88 23       	and	r24, r24
    5996:	d1 f7       	brne	.-12     	; 0x598c <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    5998:	1e 96       	adiw	r26, 0x0e	; 14
    599a:	8c 91       	ld	r24, X
    599c:	1e 97       	sbiw	r26, 0x0e	; 14
    599e:	81 30       	cpi	r24, 0x01	; 1
    59a0:	11 f1       	breq	.+68     	; 0x59e6 <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    59a2:	1e 96       	adiw	r26, 0x0e	; 14
    59a4:	2c 91       	ld	r18, X
    59a6:	00 d0       	rcall	.+0      	; 0x59a8 <flash_panel+0x5c4>
    59a8:	0f 92       	push	r0
    59aa:	ed b7       	in	r30, 0x3d	; 61
    59ac:	fe b7       	in	r31, 0x3e	; 62
    59ae:	31 96       	adiw	r30, 0x01	; 1
    59b0:	88 e6       	ldi	r24, 0x68	; 104
    59b2:	9d e0       	ldi	r25, 0x0D	; 13
    59b4:	ad b7       	in	r26, 0x3d	; 61
    59b6:	be b7       	in	r27, 0x3e	; 62
    59b8:	11 96       	adiw	r26, 0x01	; 1
    59ba:	8d 93       	st	X+, r24
    59bc:	9c 93       	st	X, r25
    59be:	12 97       	sbiw	r26, 0x02	; 2
    59c0:	22 83       	std	Z+2, r18	; 0x02
    59c2:	13 82       	std	Z+3, r1	; 0x03
    59c4:	0a c0       	rjmp	.+20     	; 0x59da <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    59c6:	00 d0       	rcall	.+0      	; 0x59c8 <flash_panel+0x5e4>
    59c8:	0f 92       	push	r0
    59ca:	8d e4       	ldi	r24, 0x4D	; 77
    59cc:	9d e0       	ldi	r25, 0x0D	; 13
    59ce:	ed b7       	in	r30, 0x3d	; 61
    59d0:	fe b7       	in	r31, 0x3e	; 62
    59d2:	81 83       	std	Z+1, r24	; 0x01
    59d4:	92 83       	std	Z+2, r25	; 0x02
    59d6:	e3 82       	std	Z+3, r14	; 0x03
    59d8:	f4 82       	std	Z+4, r15	; 0x04
    59da:	0e 94 e2 57 	call	0xafc4	; 0xafc4 <xprintf>
    59de:	0f 90       	pop	r0
    59e0:	0f 90       	pop	r0
    59e2:	0f 90       	pop	r0
    59e4:	0f 90       	pop	r0
    }
};
    59e6:	c0 57       	subi	r28, 0x70	; 112
    59e8:	dd 4f       	sbci	r29, 0xFD	; 253
    59ea:	e2 e1       	ldi	r30, 0x12	; 18
    59ec:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

000059f0 <init_all>:
#include "utils.h"

void init_all()
{ 
    59f0:	0f 93       	push	r16
    59f2:	df 93       	push	r29
    59f4:	cf 93       	push	r28
    59f6:	0f 92       	push	r0
    59f8:	cd b7       	in	r28, 0x3d	; 61
    59fa:	de b7       	in	r29, 0x3e	; 62
  ledWrite(LED0, ON);
    59fc:	80 e0       	ldi	r24, 0x00	; 0
    59fe:	61 e0       	ldi	r22, 0x01	; 1
    5a00:	0e 94 db 21 	call	0x43b6	; 0x43b6 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    5a04:	e0 e4       	ldi	r30, 0x40	; 64
    5a06:	f6 e0       	ldi	r31, 0x06	; 6
    5a08:	88 e0       	ldi	r24, 0x08	; 8
    5a0a:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5a0c:	84 e0       	ldi	r24, 0x04	; 4
    5a0e:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    5a10:	80 e1       	ldi	r24, 0x10	; 16
    5a12:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    5a14:	90 e2       	ldi	r25, 0x20	; 32
    5a16:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    5a18:	20 e8       	ldi	r18, 0x80	; 128
    5a1a:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5a1c:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5a1e:	e0 e6       	ldi	r30, 0x60	; 96
    5a20:	f6 e0       	ldi	r31, 0x06	; 6
    5a22:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    5a24:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5a26:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    5a28:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    5a2a:	80 eb       	ldi	r24, 0xB0	; 176
    5a2c:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    5a30:	e0 e8       	ldi	r30, 0x80	; 128
    5a32:	f6 e0       	ldi	r31, 0x06	; 6
    5a34:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5a36:	e0 ee       	ldi	r30, 0xE0	; 224
    5a38:	f6 e0       	ldi	r31, 0x06	; 6
    5a3a:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5a3c:	80 e4       	ldi	r24, 0x40	; 64
    5a3e:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    5a40:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    5a42:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    5a44:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    5a46:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    5a48:	80 ef       	ldi	r24, 0xF0	; 240
    5a4a:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5a4e:	e0 e0       	ldi	r30, 0x00	; 0
    5a50:	f7 e0       	ldi	r31, 0x07	; 7
    5a52:	84 83       	std	Z+4, r24	; 0x04
/*
  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
*/
  // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	60 e0       	ldi	r22, 0x00	; 0
    5a58:	0e 94 28 22 	call	0x4450	; 0x4450 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	60 e0       	ldi	r22, 0x00	; 0
    5a60:	0e 94 28 22 	call	0x4450	; 0x4450 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger laser
    5a64:	82 e0       	ldi	r24, 0x02	; 2
    5a66:	60 e0       	ldi	r22, 0x00	; 0
    5a68:	0e 94 28 22 	call	0x4450	; 0x4450 <digitalMode>
  digitalMode(3, OUTPUT);     //used to trigger camera
    5a6c:	83 e0       	ldi	r24, 0x03	; 3
    5a6e:	60 e0       	ldi	r22, 0x00	; 0
    5a70:	0e 94 28 22 	call	0x4450	; 0x4450 <digitalMode>
  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    5a74:	e0 e5       	ldi	r30, 0x50	; 80
    5a76:	f0 e0       	ldi	r31, 0x00	; 0
    5a78:	87 e4       	ldi	r24, 0x47	; 71
    5a7a:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    5a7c:	84 ec       	ldi	r24, 0xC4	; 196
    5a7e:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    5a80:	88 e1       	ldi	r24, 0x18	; 24
    5a82:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    5a86:	80 91 51 00 	lds	r24, 0x0051
    5a8a:	84 ff       	sbrs	r24, 4
    5a8c:	fc cf       	rjmp	.-8      	; 0x5a86 <init_all+0x96>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5a8e:	8f b7       	in	r24, 0x3f	; 63
    5a90:	89 83       	std	Y+1, r24	; 0x01
  cli();
    5a92:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    5a94:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    5a96:	24 e0       	ldi	r18, 0x04	; 4
    5a98:	80 e4       	ldi	r24, 0x40	; 64
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	08 ed       	ldi	r16, 0xD8	; 216
    5aa0:	04 bf       	out	0x34, r16	; 52
    5aa2:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    5aa4:	89 81       	ldd	r24, Y+1	; 0x01
    5aa6:	8f bf       	out	0x3f, r24	; 63
    5aa8:	88 ee       	ldi	r24, 0xE8	; 232
    5aaa:	93 e0       	ldi	r25, 0x03	; 3
    5aac:	20 e2       	ldi	r18, 0x20	; 32
    5aae:	33 e0       	ldi	r19, 0x03	; 3
    5ab0:	f9 01       	movw	r30, r18
    5ab2:	31 97       	sbiw	r30, 0x01	; 1
    5ab4:	f1 f7       	brne	.-4      	; 0x5ab2 <init_all+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ab6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab8:	d9 f7       	brne	.-10     	; 0x5ab0 <init_all+0xc0>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    5aba:	e0 e4       	ldi	r30, 0x40	; 64
    5abc:	fa e0       	ldi	r31, 0x0A	; 10
    5abe:	84 e0       	ldi	r24, 0x04	; 4
    5ac0:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    5ac4:	8f e3       	ldi	r24, 0x3F	; 63
    5ac6:	9c e9       	ldi	r25, 0x9C	; 156
    5ac8:	86 a3       	std	Z+38, r24	; 0x26
    5aca:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    5acc:	82 e0       	ldi	r24, 0x02	; 2
    5ace:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5ad0:	88 e5       	ldi	r24, 0x58	; 88
    5ad2:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: -5V-+5v range on ch 0,1 0-10V on ch 2, 3
  PORTC.OUTCLR = PIN4_bm;
    5ad6:	80 e1       	ldi	r24, 0x10	; 16
    5ad8:	e0 e4       	ldi	r30, 0x40	; 64
    5ada:	f6 e0       	ldi	r31, 0x06	; 6
    5adc:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xab;
    5ade:	8b ea       	ldi	r24, 0xAB	; 171
    5ae0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ae2:	f8 e0       	ldi	r31, 0x08	; 8
    5ae4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5ae6:	80 91 c2 08 	lds	r24, 0x08C2
    5aea:	87 ff       	sbrs	r24, 7
    5aec:	fc cf       	rjmp	.-8      	; 0x5ae6 <init_all+0xf6>
  SPIC.DATA = 0xe0;
    5aee:	80 ee       	ldi	r24, 0xE0	; 224
    5af0:	e0 ec       	ldi	r30, 0xC0	; 192
    5af2:	f8 e0       	ldi	r31, 0x08	; 8
    5af4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5af6:	80 91 c2 08 	lds	r24, 0x08C2
    5afa:	87 ff       	sbrs	r24, 7
    5afc:	fc cf       	rjmp	.-8      	; 0x5af6 <init_all+0x106>
  PORTC.OUTSET = PIN4_bm;
    5afe:	e0 e4       	ldi	r30, 0x40	; 64
    5b00:	f6 e0       	ldi	r31, 0x06	; 6
    5b02:	80 e1       	ldi	r24, 0x10	; 16
    5b04:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10v range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    5b06:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    5b08:	8f ed       	ldi	r24, 0xDF	; 223
    5b0a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b0c:	f8 e0       	ldi	r31, 0x08	; 8
    5b0e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b10:	80 91 c2 08 	lds	r24, 0x08C2
    5b14:	87 ff       	sbrs	r24, 7
    5b16:	fc cf       	rjmp	.-8      	; 0x5b10 <init_all+0x120>
  SPIC.DATA = 0xe0;
    5b18:	80 ee       	ldi	r24, 0xE0	; 224
    5b1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b1c:	f8 e0       	ldi	r31, 0x08	; 8
    5b1e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b20:	80 91 c2 08 	lds	r24, 0x08C2
    5b24:	87 ff       	sbrs	r24, 7
    5b26:	fc cf       	rjmp	.-8      	; 0x5b20 <init_all+0x130>
  PORTC.OUTSET = PIN4_bm;
    5b28:	e0 e4       	ldi	r30, 0x40	; 64
    5b2a:	f6 e0       	ldi	r31, 0x06	; 6
    5b2c:	80 e1       	ldi	r24, 0x10	; 16
    5b2e:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    5b30:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    5b32:	80 ee       	ldi	r24, 0xE0	; 224
    5b34:	e0 ec       	ldi	r30, 0xC0	; 192
    5b36:	f8 e0       	ldi	r31, 0x08	; 8
    5b38:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b3a:	80 91 c2 08 	lds	r24, 0x08C2
    5b3e:	87 ff       	sbrs	r24, 7
    5b40:	fc cf       	rjmp	.-8      	; 0x5b3a <init_all+0x14a>
  SPIC.DATA = 0x00;
    5b42:	e0 ec       	ldi	r30, 0xC0	; 192
    5b44:	f8 e0       	ldi	r31, 0x08	; 8
    5b46:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b48:	80 91 c2 08 	lds	r24, 0x08C2
    5b4c:	87 ff       	sbrs	r24, 7
    5b4e:	fc cf       	rjmp	.-8      	; 0x5b48 <init_all+0x158>
  PORTC.OUTSET = PIN4_bm;
    5b50:	e0 e4       	ldi	r30, 0x40	; 64
    5b52:	f6 e0       	ldi	r31, 0x06	; 6
    5b54:	80 e1       	ldi	r24, 0x10	; 16
    5b56:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    5b58:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    5b5a:	80 e8       	ldi	r24, 0x80	; 128
    5b5c:	e0 ec       	ldi	r30, 0xC0	; 192
    5b5e:	f8 e0       	ldi	r31, 0x08	; 8
    5b60:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b62:	80 91 c2 08 	lds	r24, 0x08C2
    5b66:	87 ff       	sbrs	r24, 7
    5b68:	fc cf       	rjmp	.-8      	; 0x5b62 <init_all+0x172>
  SPIC.DATA = 0x10;
    5b6a:	80 e1       	ldi	r24, 0x10	; 16
    5b6c:	e0 ec       	ldi	r30, 0xC0	; 192
    5b6e:	f8 e0       	ldi	r31, 0x08	; 8
    5b70:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5b72:	80 91 c2 08 	lds	r24, 0x08C2
    5b76:	87 ff       	sbrs	r24, 7
    5b78:	fc cf       	rjmp	.-8      	; 0x5b72 <init_all+0x182>
  PORTC.OUTSET = PIN4_bm;
    5b7a:	90 e1       	ldi	r25, 0x10	; 16
    5b7c:	e0 e4       	ldi	r30, 0x40	; 64
    5b7e:	f6 e0       	ldi	r31, 0x06	; 6
    5b80:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5b82:	88 e5       	ldi	r24, 0x58	; 88
    5b84:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    5b88:	e0 e6       	ldi	r30, 0x60	; 96
    5b8a:	f6 e0       	ldi	r31, 0x06	; 6
    5b8c:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    5b8e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b90:	f9 e0       	ldi	r31, 0x09	; 9
    5b92:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5b94:	80 91 c2 09 	lds	r24, 0x09C2
    5b98:	87 ff       	sbrs	r24, 7
    5b9a:	fc cf       	rjmp	.-8      	; 0x5b94 <init_all+0x1a4>
  SPID.DATA = 0x00;
    5b9c:	e0 ec       	ldi	r30, 0xC0	; 192
    5b9e:	f9 e0       	ldi	r31, 0x09	; 9
    5ba0:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5ba2:	80 91 c2 09 	lds	r24, 0x09C2
    5ba6:	87 ff       	sbrs	r24, 7
    5ba8:	fc cf       	rjmp	.-8      	; 0x5ba2 <init_all+0x1b2>
  SPID.DATA = 0x1f;
    5baa:	8f e1       	ldi	r24, 0x1F	; 31
    5bac:	e0 ec       	ldi	r30, 0xC0	; 192
    5bae:	f9 e0       	ldi	r31, 0x09	; 9
    5bb0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5bb2:	80 91 c2 09 	lds	r24, 0x09C2
    5bb6:	87 ff       	sbrs	r24, 7
    5bb8:	fc cf       	rjmp	.-8      	; 0x5bb2 <init_all+0x1c2>
  PORTD.OUTSET = PIN4_bm;
    5bba:	e0 e6       	ldi	r30, 0x60	; 96
    5bbc:	f6 e0       	ldi	r31, 0x06	; 6
    5bbe:	80 e1       	ldi	r24, 0x10	; 16
    5bc0:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    5bc2:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    5bc4:	8c e0       	ldi	r24, 0x0C	; 12
    5bc6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc8:	f9 e0       	ldi	r31, 0x09	; 9
    5bca:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    5bcc:	80 91 c2 09 	lds	r24, 0x09C2
    5bd0:	87 ff       	sbrs	r24, 7
    5bd2:	fc cf       	rjmp	.-8      	; 0x5bcc <init_all+0x1dc>
  SPID.DATA = 0x00;
    5bd4:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd6:	f9 e0       	ldi	r31, 0x09	; 9
    5bd8:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5bda:	80 91 c2 09 	lds	r24, 0x09C2
    5bde:	87 ff       	sbrs	r24, 7
    5be0:	fc cf       	rjmp	.-8      	; 0x5bda <init_all+0x1ea>
   SPID.DATA = 0x04;
    5be2:	84 e0       	ldi	r24, 0x04	; 4
    5be4:	e0 ec       	ldi	r30, 0xC0	; 192
    5be6:	f9 e0       	ldi	r31, 0x09	; 9
    5be8:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5bea:	80 91 c2 09 	lds	r24, 0x09C2
    5bee:	87 ff       	sbrs	r24, 7
    5bf0:	fc cf       	rjmp	.-8      	; 0x5bea <init_all+0x1fa>
  PORTD.OUTSET = PIN4_bm;
    5bf2:	80 e1       	ldi	r24, 0x10	; 16
    5bf4:	e0 e6       	ldi	r30, 0x60	; 96
    5bf6:	f6 e0       	ldi	r31, 0x06	; 6
    5bf8:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    5bfa:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <uart_init>
  
  //initialize timer
  timer_init();
    5bfe:	0e 94 29 56 	call	0xac52	; 0xac52 <timer_init>
  
  Handler_Init();
    5c02:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    5c06:	87 e0       	ldi	r24, 0x07	; 7
    5c08:	e0 ea       	ldi	r30, 0xA0	; 160
    5c0a:	f0 e0       	ldi	r31, 0x00	; 0
    5c0c:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5c0e:	78 94       	sei
}
    5c10:	0f 90       	pop	r0
    5c12:	cf 91       	pop	r28
    5c14:	df 91       	pop	r29
    5c16:	0f 91       	pop	r16
    5c18:	08 95       	ret

00005c1a <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    5c1a:	10 92 66 25 	sts	0x2566, r1
    5c1e:	10 92 67 25 	sts	0x2567, r1
  rxfifo.idx_w = 0;
    5c22:	10 92 64 25 	sts	0x2564, r1
    5c26:	10 92 65 25 	sts	0x2565, r1
  rxfifo.count = 0;
    5c2a:	10 92 68 25 	sts	0x2568, r1
    5c2e:	10 92 69 25 	sts	0x2569, r1
  txfifo.idx_r = 0;
    5c32:	10 92 22 25 	sts	0x2522, r1
  txfifo.idx_w = 0;
    5c36:	10 92 21 25 	sts	0x2521, r1
  txfifo.count = 0;
    5c3a:	10 92 23 25 	sts	0x2523, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    5c3e:	e0 ea       	ldi	r30, 0xA0	; 160
    5c40:	f8 e0       	ldi	r31, 0x08	; 8
    5c42:	8b e4       	ldi	r24, 0x4B	; 75
    5c44:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    5c46:	80 ea       	ldi	r24, 0xA0	; 160
    5c48:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    5c4a:	80 e1       	ldi	r24, 0x10	; 16
    5c4c:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    5c4e:	83 e0       	ldi	r24, 0x03	; 3
    5c50:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    5c52:	88 e1       	ldi	r24, 0x18	; 24
    5c54:	84 83       	std	Z+4, r24	; 0x04
}
    5c56:	08 95       	ret

00005c58 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5c58:	20 91 68 25 	lds	r18, 0x2568
    5c5c:	30 91 69 25 	lds	r19, 0x2569
}
    5c60:	c9 01       	movw	r24, r18
    5c62:	08 95       	ret

00005c64 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    5c64:	20 91 66 25 	lds	r18, 0x2566
    5c68:	30 91 67 25 	lds	r19, 0x2567
  while(rxfifo.count == 0);
    5c6c:	80 91 68 25 	lds	r24, 0x2568
    5c70:	90 91 69 25 	lds	r25, 0x2569
    5c74:	89 2b       	or	r24, r25
    5c76:	d1 f3       	breq	.-12     	; 0x5c6c <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    5c78:	e0 91 6c 25 	lds	r30, 0x256C
    5c7c:	f0 91 6d 25 	lds	r31, 0x256D
    5c80:	e2 0f       	add	r30, r18
    5c82:	f3 1f       	adc	r31, r19
    5c84:	e0 81       	ld	r30, Z
    5c86:	2f 5f       	subi	r18, 0xFF	; 255
    5c88:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    5c8a:	f8 94       	cli
  rxfifo.count--;
    5c8c:	80 91 68 25 	lds	r24, 0x2568
    5c90:	90 91 69 25 	lds	r25, 0x2569
    5c94:	01 97       	sbiw	r24, 0x01	; 1
    5c96:	80 93 68 25 	sts	0x2568, r24
    5c9a:	90 93 69 25 	sts	0x2569, r25
  sei();
    5c9e:	78 94       	sei
  if(i >= rxfifo.size)
    5ca0:	80 91 6a 25 	lds	r24, 0x256A
    5ca4:	90 91 6b 25 	lds	r25, 0x256B
    5ca8:	28 17       	cp	r18, r24
    5caa:	39 07       	cpc	r19, r25
    5cac:	10 f0       	brcs	.+4      	; 0x5cb2 <uart_get+0x4e>
    5cae:	20 e0       	ldi	r18, 0x00	; 0
    5cb0:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    5cb2:	20 93 66 25 	sts	0x2566, r18
    5cb6:	30 93 67 25 	sts	0x2567, r19

  return d;
}
    5cba:	8e 2f       	mov	r24, r30
    5cbc:	08 95       	ret

00005cbe <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    5cbe:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    5cc0:	90 91 21 25 	lds	r25, 0x2521
  while(txfifo.count >= sizeof(txfifo.buff));
    5cc4:	80 91 23 25 	lds	r24, 0x2523
    5cc8:	80 34       	cpi	r24, 0x40	; 64
    5cca:	e0 f7       	brcc	.-8      	; 0x5cc4 <uart_put+0x6>
  txfifo.buff[i++] = d;
    5ccc:	e9 2f       	mov	r30, r25
    5cce:	f0 e0       	ldi	r31, 0x00	; 0
    5cd0:	ef 5d       	subi	r30, 0xDF	; 223
    5cd2:	fa 4d       	sbci	r31, 0xDA	; 218
    5cd4:	23 83       	std	Z+3, r18	; 0x03
    5cd6:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    5cd8:	f8 94       	cli
  txfifo.count++;
    5cda:	80 91 23 25 	lds	r24, 0x2523
    5cde:	8f 5f       	subi	r24, 0xFF	; 255
    5ce0:	80 93 23 25 	sts	0x2523, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    5ce4:	81 e1       	ldi	r24, 0x11	; 17
    5ce6:	e0 ea       	ldi	r30, 0xA0	; 160
    5ce8:	f8 e0       	ldi	r31, 0x08	; 8
    5cea:	83 83       	std	Z+3, r24	; 0x03

  sei();
    5cec:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    5cee:	90 34       	cpi	r25, 0x40	; 64
    5cf0:	08 f0       	brcs	.+2      	; 0x5cf4 <uart_put+0x36>
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    5cf4:	90 93 21 25 	sts	0x2521, r25
}
    5cf8:	08 95       	ret

00005cfa <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    5cfa:	cf 93       	push	r28
    5cfc:	df 93       	push	r29
    5cfe:	ec 01       	movw	r28, r24
    5d00:	03 c0       	rjmp	.+6      	; 0x5d08 <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    5d02:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <uart_put>
    s++;
    5d06:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    5d08:	fe 01       	movw	r30, r28
    5d0a:	84 91       	lpm	r24, Z+
    5d0c:	88 23       	and	r24, r24
    5d0e:	c9 f7       	brne	.-14     	; 0x5d02 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    5d10:	df 91       	pop	r29
    5d12:	cf 91       	pop	r28
    5d14:	08 95       	ret

00005d16 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    5d16:	8d e0       	ldi	r24, 0x0D	; 13
    5d18:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <uart_put>
  uart_put(LF);
    5d1c:	8a e0       	ldi	r24, 0x0A	; 10
    5d1e:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <uart_put>
}
    5d22:	08 95       	ret

00005d24 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    5d24:	cf 92       	push	r12
    5d26:	df 92       	push	r13
    5d28:	ff 92       	push	r15
    5d2a:	0f 93       	push	r16
    5d2c:	1f 93       	push	r17
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
    5d32:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5d34:	80 91 68 25 	lds	r24, 0x2568
    5d38:	90 91 69 25 	lds	r25, 0x2569
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    5d3c:	89 2b       	or	r24, r25
    5d3e:	11 f4       	brne	.+4      	; 0x5d44 <fill_Rx_buffer+0x20>
    5d40:	ff 24       	eor	r15, r15
    5d42:	3c c0       	rjmp	.+120    	; 0x5dbc <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    5d44:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <uart_get>
    5d48:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    5d4a:	82 e3       	ldi	r24, 0x32	; 50
    5d4c:	f8 16       	cp	r15, r24
    5d4e:	29 f0       	breq	.+10     	; 0x5d5a <fill_Rx_buffer+0x36>
    5d50:	c0 e0       	ldi	r28, 0x00	; 0
    5d52:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5d54:	0f 2d       	mov	r16, r15
    5d56:	10 e0       	ldi	r17, 0x00	; 0
    5d58:	2e c0       	rjmp	.+92     	; 0x5db6 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    5d5a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <uart_get>
    5d5e:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    5d60:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    5d64:	38 2f       	mov	r19, r24
    5d66:	20 e0       	ldi	r18, 0x00	; 0
    5d68:	c9 01       	movw	r24, r18
    5d6a:	81 0f       	add	r24, r17
    5d6c:	91 1d       	adc	r25, r1
    5d6e:	8c 01       	movw	r16, r24
    5d70:	c0 e0       	ldi	r28, 0x00	; 0
    5d72:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    5d74:	09 5f       	subi	r16, 0xF9	; 249
    5d76:	1f 4f       	sbci	r17, 0xFF	; 255
    5d78:	0d c0       	rjmp	.+26     	; 0x5d94 <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5d7a:	80 91 68 25 	lds	r24, 0x2568
    5d7e:	90 91 69 25 	lds	r25, 0x2569

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    5d82:	89 2b       	or	r24, r25
    5d84:	d1 f3       	breq	.-12     	; 0x5d7a <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    5d86:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <uart_get>
    5d8a:	f6 01       	movw	r30, r12
    5d8c:	ec 0f       	add	r30, r28
    5d8e:	fd 1f       	adc	r31, r29
    5d90:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    5d92:	21 96       	adiw	r28, 0x01	; 1
    5d94:	c0 17       	cp	r28, r16
    5d96:	d1 07       	cpc	r29, r17
    5d98:	80 f3       	brcs	.-32     	; 0x5d7a <fill_Rx_buffer+0x56>
    5d9a:	10 c0       	rjmp	.+32     	; 0x5dbc <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    5d9c:	80 91 68 25 	lds	r24, 0x2568
    5da0:	90 91 69 25 	lds	r25, 0x2569
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    5da4:	89 2b       	or	r24, r25
    5da6:	d1 f3       	breq	.-12     	; 0x5d9c <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    5da8:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <uart_get>
    5dac:	f6 01       	movw	r30, r12
    5dae:	ec 0f       	add	r30, r28
    5db0:	fd 1f       	adc	r31, r29
    5db2:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    5db4:	21 96       	adiw	r28, 0x01	; 1
    5db6:	c0 17       	cp	r28, r16
    5db8:	d1 07       	cpc	r29, r17
    5dba:	80 f3       	brcs	.-32     	; 0x5d9c <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    5dbc:	8f 2d       	mov	r24, r15
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	ff 90       	pop	r15
    5dca:	df 90       	pop	r13
    5dcc:	cf 90       	pop	r12
    5dce:	08 95       	ret

00005dd0 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    5dd0:	ff 92       	push	r15
    5dd2:	0f 93       	push	r16
    5dd4:	1f 93       	push	r17
    5dd6:	cf 93       	push	r28
    5dd8:	df 93       	push	r29
    5dda:	18 2f       	mov	r17, r24
    5ddc:	09 2f       	mov	r16, r25
    5dde:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    5de0:	86 2f       	mov	r24, r22
    5de2:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <uart_put>
    5de6:	21 2f       	mov	r18, r17
    5de8:	30 2f       	mov	r19, r16
    5dea:	c9 01       	movw	r24, r18
    5dec:	ec 01       	movw	r28, r24
    5dee:	10 e0       	ldi	r17, 0x00	; 0
    5df0:	04 c0       	rjmp	.+8      	; 0x5dfa <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    5df2:	89 91       	ld	r24, Y+
    5df4:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    5df8:	1f 5f       	subi	r17, 0xFF	; 255
    5dfa:	1f 15       	cp	r17, r15
    5dfc:	d0 f3       	brcs	.-12     	; 0x5df2 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	e5 e0       	ldi	r30, 0x05	; 5
    5e04:	0c 94 47 59 	jmp	0xb28e	; 0xb28e <__epilogue_restores__+0x1a>

00005e08 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    5e08:	1f 92       	push	r1
    5e0a:	0f 92       	push	r0
    5e0c:	0f b6       	in	r0, 0x3f	; 63
    5e0e:	0f 92       	push	r0
    5e10:	08 b6       	in	r0, 0x38	; 56
    5e12:	0f 92       	push	r0
    5e14:	0b b6       	in	r0, 0x3b	; 59
    5e16:	0f 92       	push	r0
    5e18:	11 24       	eor	r1, r1
    5e1a:	18 be       	out	0x38, r1	; 56
    5e1c:	1b be       	out	0x3b, r1	; 59
    5e1e:	2f 93       	push	r18
    5e20:	3f 93       	push	r19
    5e22:	4f 93       	push	r20
    5e24:	8f 93       	push	r24
    5e26:	9f 93       	push	r25
    5e28:	ef 93       	push	r30
    5e2a:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    5e2c:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    5e30:	20 91 68 25 	lds	r18, 0x2568
    5e34:	30 91 69 25 	lds	r19, 0x2569
  if(n < rxfifo.size) {
    5e38:	80 91 6a 25 	lds	r24, 0x256A
    5e3c:	90 91 6b 25 	lds	r25, 0x256B
    5e40:	28 17       	cp	r18, r24
    5e42:	39 07       	cpc	r19, r25
    5e44:	08 f5       	brcc	.+66     	; 0x5e88 <__vector_25+0x80>
    rxfifo.count = ++n;
    5e46:	2f 5f       	subi	r18, 0xFF	; 255
    5e48:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4a:	20 93 68 25 	sts	0x2568, r18
    5e4e:	30 93 69 25 	sts	0x2569, r19
    i = rxfifo.idx_w;
    5e52:	80 91 64 25 	lds	r24, 0x2564
    5e56:	90 91 65 25 	lds	r25, 0x2565
    *(rxfifo.PRxBuff + i++) = d;
    5e5a:	e0 91 6c 25 	lds	r30, 0x256C
    5e5e:	f0 91 6d 25 	lds	r31, 0x256D
    5e62:	e8 0f       	add	r30, r24
    5e64:	f9 1f       	adc	r31, r25
    5e66:	40 83       	st	Z, r20
    5e68:	9c 01       	movw	r18, r24
    5e6a:	2f 5f       	subi	r18, 0xFF	; 255
    5e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    5e6e:	80 91 6a 25 	lds	r24, 0x256A
    5e72:	90 91 6b 25 	lds	r25, 0x256B
    5e76:	28 17       	cp	r18, r24
    5e78:	39 07       	cpc	r19, r25
    5e7a:	10 f0       	brcs	.+4      	; 0x5e80 <__vector_25+0x78>
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    5e80:	20 93 64 25 	sts	0x2564, r18
    5e84:	30 93 65 25 	sts	0x2565, r19
  }
}
    5e88:	ff 91       	pop	r31
    5e8a:	ef 91       	pop	r30
    5e8c:	9f 91       	pop	r25
    5e8e:	8f 91       	pop	r24
    5e90:	4f 91       	pop	r20
    5e92:	3f 91       	pop	r19
    5e94:	2f 91       	pop	r18
    5e96:	0f 90       	pop	r0
    5e98:	0b be       	out	0x3b, r0	; 59
    5e9a:	0f 90       	pop	r0
    5e9c:	08 be       	out	0x38, r0	; 56
    5e9e:	0f 90       	pop	r0
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	0f 90       	pop	r0
    5ea4:	1f 90       	pop	r1
    5ea6:	18 95       	reti

00005ea8 <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    5ea8:	1f 92       	push	r1
    5eaa:	0f 92       	push	r0
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	0f 92       	push	r0
    5eb0:	08 b6       	in	r0, 0x38	; 56
    5eb2:	0f 92       	push	r0
    5eb4:	0b b6       	in	r0, 0x3b	; 59
    5eb6:	0f 92       	push	r0
    5eb8:	11 24       	eor	r1, r1
    5eba:	18 be       	out	0x38, r1	; 56
    5ebc:	1b be       	out	0x3b, r1	; 59
    5ebe:	2f 93       	push	r18
    5ec0:	8f 93       	push	r24
    5ec2:	9f 93       	push	r25
    5ec4:	ef 93       	push	r30
    5ec6:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    5ec8:	80 91 23 25 	lds	r24, 0x2523
  if(n) {
    5ecc:	88 23       	and	r24, r24
    5ece:	a9 f0       	breq	.+42     	; 0x5efa <__vector_26+0x52>
    txfifo.count = --n;
    5ed0:	28 2f       	mov	r18, r24
    5ed2:	21 50       	subi	r18, 0x01	; 1
    5ed4:	20 93 23 25 	sts	0x2523, r18
    i = txfifo.idx_r;
    5ed8:	80 91 22 25 	lds	r24, 0x2522
    USARTC0.DATA = txfifo.buff[i++];
    5edc:	e8 2f       	mov	r30, r24
    5ede:	f0 e0       	ldi	r31, 0x00	; 0
    5ee0:	ef 5d       	subi	r30, 0xDF	; 223
    5ee2:	fa 4d       	sbci	r31, 0xDA	; 218
    5ee4:	93 81       	ldd	r25, Z+3	; 0x03
    5ee6:	90 93 a0 08 	sts	0x08A0, r25
    5eea:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    5eec:	80 34       	cpi	r24, 0x40	; 64
    5eee:	08 f0       	brcs	.+2      	; 0x5ef2 <__vector_26+0x4a>
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    5ef2:	80 93 22 25 	sts	0x2522, r24
  }
  if(n == 0)
    5ef6:	22 23       	and	r18, r18
    5ef8:	21 f4       	brne	.+8      	; 0x5f02 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    5efa:	80 e1       	ldi	r24, 0x10	; 16
    5efc:	e0 ea       	ldi	r30, 0xA0	; 160
    5efe:	f8 e0       	ldi	r31, 0x08	; 8
    5f00:	83 83       	std	Z+3, r24	; 0x03
}
    5f02:	ff 91       	pop	r31
    5f04:	ef 91       	pop	r30
    5f06:	9f 91       	pop	r25
    5f08:	8f 91       	pop	r24
    5f0a:	2f 91       	pop	r18
    5f0c:	0f 90       	pop	r0
    5f0e:	0b be       	out	0x3b, r0	; 59
    5f10:	0f 90       	pop	r0
    5f12:	08 be       	out	0x38, r0	; 56
    5f14:	0f 90       	pop	r0
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	0f 90       	pop	r0
    5f1a:	1f 90       	pop	r1
    5f1c:	18 95       	reti

00005f1e <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    5f1e:	80 91 6c 25 	lds	r24, 0x256C
    5f22:	90 91 6d 25 	lds	r25, 0x256D
    5f26:	0e 94 08 5a 	call	0xb410	; 0xb410 <free>

}
    5f2a:	08 95       	ret

00005f2c <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    5f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f2e:	59 f4       	brne	.+22     	; 0x5f46 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    5f30:	80 e4       	ldi	r24, 0x40	; 64
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    5f38:	80 93 6c 25 	sts	0x256C, r24
    5f3c:	90 93 6d 25 	sts	0x256D, r25
 rxfifo.size = 64;
    5f40:	80 e4       	ldi	r24, 0x40	; 64
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	0a c0       	rjmp	.+20     	; 0x5f5a <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    5f46:	8e e0       	ldi	r24, 0x0E	; 14
    5f48:	96 e0       	ldi	r25, 0x06	; 6
    5f4a:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    5f4e:	80 93 6c 25 	sts	0x256C, r24
    5f52:	90 93 6d 25 	sts	0x256D, r25
 rxfifo.size = 1550;
    5f56:	8e e0       	ldi	r24, 0x0E	; 14
    5f58:	96 e0       	ldi	r25, 0x06	; 6
    5f5a:	80 93 6a 25 	sts	0x256A, r24
    5f5e:	90 93 6b 25 	sts	0x256B, r25
    5f62:	08 95       	ret

00005f64 <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    5f64:	10 92 e7 2b 	sts	0x2BE7, r1
    5f68:	10 92 e8 2b 	sts	0x2BE8, r1
    5f6c:	10 92 e9 2b 	sts	0x2BE9, r1
    5f70:	10 92 ea 2b 	sts	0x2BEA, r1
    5f74:	10 92 eb 2b 	sts	0x2BEB, r1
    5f78:	10 92 ec 2b 	sts	0x2BEC, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    5f7c:	e0 e0       	ldi	r30, 0x00	; 0
    5f7e:	fa e0       	ldi	r31, 0x0A	; 10
    5f80:	82 e0       	ldi	r24, 0x02	; 2
    5f82:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    5f84:	8f ef       	ldi	r24, 0xFF	; 255
    5f86:	91 e0       	ldi	r25, 0x01	; 1
    5f88:	86 a3       	std	Z+38, r24	; 0x26
    5f8a:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    5f8c:	83 e0       	ldi	r24, 0x03	; 3
    5f8e:	86 83       	std	Z+6, r24	; 0x06
}
    5f90:	08 95       	ret

00005f92 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    5f92:	1f 92       	push	r1
    5f94:	0f 92       	push	r0
    5f96:	0f b6       	in	r0, 0x3f	; 63
    5f98:	0f 92       	push	r0
    5f9a:	08 b6       	in	r0, 0x38	; 56
    5f9c:	0f 92       	push	r0
    5f9e:	09 b6       	in	r0, 0x39	; 57
    5fa0:	0f 92       	push	r0
    5fa2:	0a b6       	in	r0, 0x3a	; 58
    5fa4:	0f 92       	push	r0
    5fa6:	0b b6       	in	r0, 0x3b	; 59
    5fa8:	0f 92       	push	r0
    5faa:	11 24       	eor	r1, r1
    5fac:	18 be       	out	0x38, r1	; 56
    5fae:	19 be       	out	0x39, r1	; 57
    5fb0:	1a be       	out	0x3a, r1	; 58
    5fb2:	1b be       	out	0x3b, r1	; 59
    5fb4:	ef 92       	push	r14
    5fb6:	ff 92       	push	r15
    5fb8:	0f 93       	push	r16
    5fba:	1f 93       	push	r17
    5fbc:	2f 93       	push	r18
    5fbe:	3f 93       	push	r19
    5fc0:	4f 93       	push	r20
    5fc2:	5f 93       	push	r21
    5fc4:	6f 93       	push	r22
    5fc6:	7f 93       	push	r23
    5fc8:	8f 93       	push	r24
    5fca:	9f 93       	push	r25
    5fcc:	af 93       	push	r26
    5fce:	bf 93       	push	r27
    5fd0:	cf 93       	push	r28
    5fd2:	df 93       	push	r29
    5fd4:	ef 93       	push	r30
    5fd6:	ff 93       	push	r31
    5fd8:	9d ee       	ldi	r25, 0xED	; 237
    5fda:	e9 2e       	mov	r14, r25
    5fdc:	9b e2       	ldi	r25, 0x2B	; 43
    5fde:	f9 2e       	mov	r15, r25
    5fe0:	0b ed       	ldi	r16, 0xDB	; 219
    5fe2:	1b e2       	ldi	r17, 0x2B	; 43
    5fe4:	c0 e0       	ldi	r28, 0x00	; 0
    5fe6:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    5fe8:	fe 01       	movw	r30, r28
    5fea:	e9 51       	subi	r30, 0x19	; 25
    5fec:	f4 4d       	sbci	r31, 0xD4	; 212
    5fee:	80 81       	ld	r24, Z
    5ff0:	81 30       	cpi	r24, 0x01	; 1
    5ff2:	39 f5       	brne	.+78     	; 0x6042 <__vector_47+0xb0>
     {
       count[lcv]--;			
    5ff4:	fe 01       	movw	r30, r28
    5ff6:	ee 0f       	add	r30, r30
    5ff8:	ff 1f       	adc	r31, r31
    5ffa:	ee 0f       	add	r30, r30
    5ffc:	ff 1f       	adc	r31, r31
    5ffe:	eb 5f       	subi	r30, 0xFB	; 251
    6000:	f3 4d       	sbci	r31, 0xD3	; 211
    6002:	80 81       	ld	r24, Z
    6004:	91 81       	ldd	r25, Z+1	; 0x01
    6006:	a2 81       	ldd	r26, Z+2	; 0x02
    6008:	b3 81       	ldd	r27, Z+3	; 0x03
    600a:	01 97       	sbiw	r24, 0x01	; 1
    600c:	a1 09       	sbc	r26, r1
    600e:	b1 09       	sbc	r27, r1
    6010:	80 83       	st	Z, r24
    6012:	91 83       	std	Z+1, r25	; 0x01
    6014:	a2 83       	std	Z+2, r26	; 0x02
    6016:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    6018:	80 81       	ld	r24, Z
    601a:	91 81       	ldd	r25, Z+1	; 0x01
    601c:	a2 81       	ldd	r26, Z+2	; 0x02
    601e:	b3 81       	ldd	r27, Z+3	; 0x03
    6020:	00 97       	sbiw	r24, 0x00	; 0
    6022:	a1 05       	cpc	r26, r1
    6024:	b1 05       	cpc	r27, r1
    6026:	69 f4       	brne	.+26     	; 0x6042 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    6028:	d7 01       	movw	r26, r14
    602a:	2d 91       	ld	r18, X+
    602c:	3d 91       	ld	r19, X+
    602e:	4d 91       	ld	r20, X+
    6030:	5c 91       	ld	r21, X
    6032:	20 83       	st	Z, r18
    6034:	31 83       	std	Z+1, r19	; 0x01
    6036:	42 83       	std	Z+2, r20	; 0x02
    6038:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    603a:	d8 01       	movw	r26, r16
    603c:	ed 91       	ld	r30, X+
    603e:	fc 91       	ld	r31, X
    6040:	19 95       	eicall
    6042:	21 96       	adiw	r28, 0x01	; 1
    6044:	84 e0       	ldi	r24, 0x04	; 4
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	e8 0e       	add	r14, r24
    604a:	f9 1e       	adc	r15, r25
    604c:	0e 5f       	subi	r16, 0xFE	; 254
    604e:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    6050:	c6 30       	cpi	r28, 0x06	; 6
    6052:	d1 05       	cpc	r29, r1
    6054:	49 f6       	brne	.-110    	; 0x5fe8 <__vector_47+0x56>
     }
   }



}
    6056:	ff 91       	pop	r31
    6058:	ef 91       	pop	r30
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	bf 91       	pop	r27
    6060:	af 91       	pop	r26
    6062:	9f 91       	pop	r25
    6064:	8f 91       	pop	r24
    6066:	7f 91       	pop	r23
    6068:	6f 91       	pop	r22
    606a:	5f 91       	pop	r21
    606c:	4f 91       	pop	r20
    606e:	3f 91       	pop	r19
    6070:	2f 91       	pop	r18
    6072:	1f 91       	pop	r17
    6074:	0f 91       	pop	r16
    6076:	ff 90       	pop	r15
    6078:	ef 90       	pop	r14
    607a:	0f 90       	pop	r0
    607c:	0b be       	out	0x3b, r0	; 59
    607e:	0f 90       	pop	r0
    6080:	0a be       	out	0x3a, r0	; 58
    6082:	0f 90       	pop	r0
    6084:	09 be       	out	0x39, r0	; 57
    6086:	0f 90       	pop	r0
    6088:	08 be       	out	0x38, r0	; 56
    608a:	0f 90       	pop	r0
    608c:	0f be       	out	0x3f, r0	; 63
    608e:	0f 90       	pop	r0
    6090:	1f 90       	pop	r1
    6092:	18 95       	reti

00006094 <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    6094:	0f 93       	push	r16
    6096:	cf 93       	push	r28
    6098:	df 93       	push	r29
    609a:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    609c:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    609e:	fd 01       	movw	r30, r26
    60a0:	ee 0f       	add	r30, r30
    60a2:	ff 1f       	adc	r31, r31
    60a4:	e5 52       	subi	r30, 0x25	; 37
    60a6:	f4 4d       	sbci	r31, 0xD4	; 212
    60a8:	80 83       	st	Z, r24
    60aa:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    60ac:	fd 01       	movw	r30, r26
    60ae:	ee 0f       	add	r30, r30
    60b0:	ff 1f       	adc	r31, r31
    60b2:	ee 0f       	add	r30, r30
    60b4:	ff 1f       	adc	r31, r31
    60b6:	cf 01       	movw	r24, r30
    60b8:	83 51       	subi	r24, 0x13	; 19
    60ba:	94 4d       	sbci	r25, 0xD4	; 212
    60bc:	ec 01       	movw	r28, r24
    60be:	48 83       	st	Y, r20
    60c0:	59 83       	std	Y+1, r21	; 0x01
    60c2:	6a 83       	std	Y+2, r22	; 0x02
    60c4:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    60c6:	eb 5f       	subi	r30, 0xFB	; 251
    60c8:	f3 4d       	sbci	r31, 0xD3	; 211
    60ca:	40 83       	st	Z, r20
    60cc:	51 83       	std	Z+1, r21	; 0x01
    60ce:	62 83       	std	Z+2, r22	; 0x02
    60d0:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    60d2:	a9 51       	subi	r26, 0x19	; 25
    60d4:	b4 4d       	sbci	r27, 0xD4	; 212
    60d6:	0c 93       	st	X, r16
}
    60d8:	df 91       	pop	r29
    60da:	cf 91       	pop	r28
    60dc:	0f 91       	pop	r16
    60de:	08 95       	ret

000060e0 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    60e0:	0f 93       	push	r16
    60e2:	cf 93       	push	r28
    60e4:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    60e6:	c2 2f       	mov	r28, r18
    60e8:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    60ea:	fe 01       	movw	r30, r28
    60ec:	ee 0f       	add	r30, r30
    60ee:	ff 1f       	adc	r31, r31
    60f0:	e5 52       	subi	r30, 0x25	; 37
    60f2:	f4 4d       	sbci	r31, 0xD4	; 212
    60f4:	80 83       	st	Z, r24
    60f6:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    60f8:	ce 01       	movw	r24, r28
    60fa:	88 0f       	add	r24, r24
    60fc:	99 1f       	adc	r25, r25
    60fe:	88 0f       	add	r24, r24
    6100:	99 1f       	adc	r25, r25
    6102:	fc 01       	movw	r30, r24
    6104:	e3 51       	subi	r30, 0x13	; 19
    6106:	f4 4d       	sbci	r31, 0xD4	; 212
    6108:	40 83       	st	Z, r20
    610a:	51 83       	std	Z+1, r21	; 0x01
    610c:	62 83       	std	Z+2, r22	; 0x02
    610e:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    6110:	fc 01       	movw	r30, r24
    6112:	eb 5f       	subi	r30, 0xFB	; 251
    6114:	f3 4d       	sbci	r31, 0xD3	; 211
    6116:	80 81       	ld	r24, Z
    6118:	91 81       	ldd	r25, Z+1	; 0x01
    611a:	a2 81       	ldd	r26, Z+2	; 0x02
    611c:	b3 81       	ldd	r27, Z+3	; 0x03
    611e:	48 17       	cp	r20, r24
    6120:	59 07       	cpc	r21, r25
    6122:	6a 07       	cpc	r22, r26
    6124:	7b 07       	cpc	r23, r27
    6126:	20 f4       	brcc	.+8      	; 0x6130 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    6128:	40 83       	st	Z, r20
    612a:	51 83       	std	Z+1, r21	; 0x01
    612c:	62 83       	std	Z+2, r22	; 0x02
    612e:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    6130:	c9 51       	subi	r28, 0x19	; 25
    6132:	d4 4d       	sbci	r29, 0xD4	; 212
    6134:	08 83       	st	Y, r16
}
    6136:	df 91       	pop	r29
    6138:	cf 91       	pop	r28
    613a:	0f 91       	pop	r16
    613c:	08 95       	ret

0000613e <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    613e:	dc 01       	movw	r26, r24
    6140:	fb 01       	movw	r30, r22
	twi->interface = module;
    6142:	6d 93       	st	X+, r22
    6144:	7c 93       	st	X, r23
    6146:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    6148:	48 63       	ori	r20, 0x38	; 56
    614a:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    614c:	ed 91       	ld	r30, X+
    614e:	fc 91       	ld	r31, X
    6150:	11 97       	sbiw	r26, 0x01	; 1
    6152:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    6154:	ed 91       	ld	r30, X+
    6156:	fc 91       	ld	r31, X
    6158:	81 e0       	ldi	r24, 0x01	; 1
    615a:	84 83       	std	Z+4, r24	; 0x04
}
    615c:	08 95       	ret

0000615e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    615e:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    6160:	01 90       	ld	r0, Z+
    6162:	f0 81       	ld	r31, Z
    6164:	e0 2d       	mov	r30, r0
    6166:	24 81       	ldd	r18, Z+4	; 0x04
    6168:	30 e0       	ldi	r19, 0x00	; 0
    616a:	23 70       	andi	r18, 0x03	; 3
    616c:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    616e:	c9 01       	movw	r24, r18
    6170:	08 95       	ret

00006172 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    6172:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    6174:	85 85       	ldd	r24, Z+13	; 0x0d
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	88 23       	and	r24, r24
    617a:	09 f4       	brne	.+2      	; 0x617e <TWI_MasterReady+0xc>
    617c:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    617e:	89 2f       	mov	r24, r25
    6180:	08 95       	ret

00006182 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    6182:	0f 93       	push	r16
    6184:	cf 93       	push	r28
    6186:	df 93       	push	r29
    6188:	dc 01       	movw	r26, r24
    618a:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    618c:	17 96       	adiw	r26, 0x07	; 7
    618e:	8c 91       	ld	r24, X
    6190:	17 97       	sbiw	r26, 0x07	; 7
    6192:	82 17       	cp	r24, r18
    6194:	08 f4       	brcc	.+2      	; 0x6198 <TWI_MasterWriteRead+0x16>
    6196:	48 c0       	rjmp	.+144    	; 0x6228 <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    6198:	18 96       	adiw	r26, 0x08	; 8
    619a:	8c 91       	ld	r24, X
    619c:	18 97       	sbiw	r26, 0x08	; 8
    619e:	80 17       	cp	r24, r16
    61a0:	08 f4       	brcc	.+2      	; 0x61a4 <TWI_MasterWriteRead+0x22>
    61a2:	42 c0       	rjmp	.+132    	; 0x6228 <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    61a4:	1d 96       	adiw	r26, 0x0d	; 13
    61a6:	8c 91       	ld	r24, X
    61a8:	1d 97       	sbiw	r26, 0x0d	; 13
    61aa:	88 23       	and	r24, r24
    61ac:	e9 f5       	brne	.+122    	; 0x6228 <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	1d 96       	adiw	r26, 0x0d	; 13
    61b2:	8c 93       	st	X, r24
    61b4:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    61b6:	1e 96       	adiw	r26, 0x0e	; 14
    61b8:	1c 92       	st	X, r1
    61ba:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    61bc:	66 0f       	add	r22, r22
    61be:	12 96       	adiw	r26, 0x02	; 2
    61c0:	6c 93       	st	X, r22
    61c2:	12 97       	sbiw	r26, 0x02	; 2
    61c4:	ea 01       	movw	r28, r20
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	09 c0       	rjmp	.+18     	; 0x61dc <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    61ca:	13 96       	adiw	r26, 0x03	; 3
    61cc:	ed 91       	ld	r30, X+
    61ce:	fc 91       	ld	r31, X
    61d0:	14 97       	sbiw	r26, 0x04	; 4
    61d2:	e9 0f       	add	r30, r25
    61d4:	f1 1d       	adc	r31, r1
    61d6:	89 91       	ld	r24, Y+
    61d8:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    61da:	9f 5f       	subi	r25, 0xFF	; 255
    61dc:	97 17       	cp	r25, r23
    61de:	a8 f3       	brcs	.-22     	; 0x61ca <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    61e0:	19 96       	adiw	r26, 0x09	; 9
    61e2:	7c 93       	st	X, r23
    61e4:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    61e6:	1a 96       	adiw	r26, 0x0a	; 10
    61e8:	0c 93       	st	X, r16
    61ea:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    61ec:	1b 96       	adiw	r26, 0x0b	; 11
    61ee:	1c 92       	st	X, r1
    61f0:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    61f2:	1c 96       	adiw	r26, 0x0c	; 12
    61f4:	1c 92       	st	X, r1
    61f6:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    61f8:	19 96       	adiw	r26, 0x09	; 9
    61fa:	8c 91       	ld	r24, X
    61fc:	19 97       	sbiw	r26, 0x09	; 9
    61fe:	88 23       	and	r24, r24
    6200:	29 f0       	breq	.+10     	; 0x620c <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    6202:	12 96       	adiw	r26, 0x02	; 2
    6204:	8c 91       	ld	r24, X
    6206:	12 97       	sbiw	r26, 0x02	; 2
    6208:	8e 7f       	andi	r24, 0xFE	; 254
    620a:	09 c0       	rjmp	.+18     	; 0x621e <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    620c:	1a 96       	adiw	r26, 0x0a	; 10
    620e:	8c 91       	ld	r24, X
    6210:	1a 97       	sbiw	r26, 0x0a	; 10
    6212:	88 23       	and	r24, r24
    6214:	39 f0       	breq	.+14     	; 0x6224 <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    6216:	12 96       	adiw	r26, 0x02	; 2
    6218:	8c 91       	ld	r24, X
    621a:	12 97       	sbiw	r26, 0x02	; 2
    621c:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    621e:	ed 91       	ld	r30, X+
    6220:	fc 91       	ld	r31, X
    6222:	86 83       	std	Z+6, r24	; 0x06
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	01 c0       	rjmp	.+2      	; 0x622a <TWI_MasterWriteRead+0xa8>
    6228:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	0f 91       	pop	r16
    6230:	08 95       	ret

00006232 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    6232:	0f 93       	push	r16
    6234:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	50 e0       	ldi	r21, 0x00	; 0
    623a:	20 e0       	ldi	r18, 0x00	; 0
    623c:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
	return twi_status;
}
    6240:	0f 91       	pop	r16
    6242:	08 95       	ret

00006244 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    6244:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    6246:	00 e0       	ldi	r16, 0x00	; 0
    6248:	0e 94 c1 30 	call	0x6182	; 0x6182 <TWI_MasterWriteRead>
	return twi_status;
}
    624c:	0f 91       	pop	r16
    624e:	08 95       	ret

00006250 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    6250:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6252:	ed 91       	ld	r30, X+
    6254:	fc 91       	ld	r31, X
    6256:	11 97       	sbiw	r26, 0x01	; 1
    6258:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    625a:	92 ff       	sbrs	r25, 2
    625c:	02 c0       	rjmp	.+4      	; 0x6262 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    625e:	84 e0       	ldi	r24, 0x04	; 4
    6260:	01 c0       	rjmp	.+2      	; 0x6264 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    6262:	83 e0       	ldi	r24, 0x03	; 3
    6264:	1e 96       	adiw	r26, 0x0e	; 14
    6266:	8c 93       	st	X, r24
    6268:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    626a:	ed 91       	ld	r30, X+
    626c:	fc 91       	ld	r31, X
    626e:	11 97       	sbiw	r26, 0x01	; 1
    6270:	98 60       	ori	r25, 0x08	; 8
    6272:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    6274:	1d 96       	adiw	r26, 0x0d	; 13
    6276:	1c 92       	st	X, r1
}
    6278:	08 95       	ret

0000627a <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    627a:	cf 93       	push	r28
    627c:	df 93       	push	r29
    627e:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    6280:	19 96       	adiw	r26, 0x09	; 9
    6282:	9c 91       	ld	r25, X
    6284:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    6286:	1a 96       	adiw	r26, 0x0a	; 10
    6288:	2c 91       	ld	r18, X
    628a:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    628c:	cd 91       	ld	r28, X+
    628e:	dc 91       	ld	r29, X
    6290:	11 97       	sbiw	r26, 0x01	; 1
    6292:	8c 81       	ldd	r24, Y+4	; 0x04
    6294:	84 ff       	sbrs	r24, 4
    6296:	04 c0       	rjmp	.+8      	; 0x62a0 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6298:	83 e0       	ldi	r24, 0x03	; 3
    629a:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    629c:	85 e0       	ldi	r24, 0x05	; 5
    629e:	24 c0       	rjmp	.+72     	; 0x62e8 <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    62a0:	1b 96       	adiw	r26, 0x0b	; 11
    62a2:	8c 91       	ld	r24, X
    62a4:	1b 97       	sbiw	r26, 0x0b	; 11
    62a6:	89 17       	cp	r24, r25
    62a8:	90 f4       	brcc	.+36     	; 0x62ce <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    62aa:	1b 96       	adiw	r26, 0x0b	; 11
    62ac:	8c 91       	ld	r24, X
    62ae:	1b 97       	sbiw	r26, 0x0b	; 11
    62b0:	13 96       	adiw	r26, 0x03	; 3
    62b2:	ed 91       	ld	r30, X+
    62b4:	fc 91       	ld	r31, X
    62b6:	14 97       	sbiw	r26, 0x04	; 4
    62b8:	e8 0f       	add	r30, r24
    62ba:	f1 1d       	adc	r31, r1
    62bc:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    62be:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    62c0:	1b 96       	adiw	r26, 0x0b	; 11
    62c2:	8c 91       	ld	r24, X
    62c4:	1b 97       	sbiw	r26, 0x0b	; 11
    62c6:	8f 5f       	subi	r24, 0xFF	; 255
    62c8:	1b 96       	adiw	r26, 0x0b	; 11
    62ca:	8c 93       	st	X, r24
    62cc:	12 c0       	rjmp	.+36     	; 0x62f2 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    62ce:	1c 96       	adiw	r26, 0x0c	; 12
    62d0:	8c 91       	ld	r24, X
    62d2:	1c 97       	sbiw	r26, 0x0c	; 12
    62d4:	82 17       	cp	r24, r18
    62d6:	28 f4       	brcc	.+10     	; 0x62e2 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    62d8:	12 96       	adiw	r26, 0x02	; 2
    62da:	8c 91       	ld	r24, X
    62dc:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    62de:	8e 83       	std	Y+6, r24	; 0x06
    62e0:	08 c0       	rjmp	.+16     	; 0x62f2 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    62e2:	83 e0       	ldi	r24, 0x03	; 3
    62e4:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    62e6:	81 e0       	ldi	r24, 0x01	; 1
    62e8:	1e 96       	adiw	r26, 0x0e	; 14
    62ea:	8c 93       	st	X, r24
    62ec:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    62ee:	1d 96       	adiw	r26, 0x0d	; 13
    62f0:	1c 92       	st	X, r1
	}
}
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    62f8:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    62fa:	1c 96       	adiw	r26, 0x0c	; 12
    62fc:	9c 91       	ld	r25, X
    62fe:	1c 97       	sbiw	r26, 0x0c	; 12
    6300:	18 96       	adiw	r26, 0x08	; 8
    6302:	8c 91       	ld	r24, X
    6304:	18 97       	sbiw	r26, 0x08	; 8
    6306:	ed 91       	ld	r30, X+
    6308:	fc 91       	ld	r31, X
    630a:	11 97       	sbiw	r26, 0x01	; 1
    630c:	98 17       	cp	r25, r24
    630e:	98 f4       	brcc	.+38     	; 0x6336 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    6310:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    6312:	1c 96       	adiw	r26, 0x0c	; 12
    6314:	8c 91       	ld	r24, X
    6316:	1c 97       	sbiw	r26, 0x0c	; 12
    6318:	15 96       	adiw	r26, 0x05	; 5
    631a:	ed 91       	ld	r30, X+
    631c:	fc 91       	ld	r31, X
    631e:	16 97       	sbiw	r26, 0x06	; 6
    6320:	e8 0f       	add	r30, r24
    6322:	f1 1d       	adc	r31, r1
    6324:	90 83       	st	Z, r25
    twi->bytesRead++;
    6326:	1c 96       	adiw	r26, 0x0c	; 12
    6328:	8c 91       	ld	r24, X
    632a:	1c 97       	sbiw	r26, 0x0c	; 12
    632c:	8f 5f       	subi	r24, 0xFF	; 255
    632e:	1c 96       	adiw	r26, 0x0c	; 12
    6330:	8c 93       	st	X, r24
    6332:	1c 97       	sbiw	r26, 0x0c	; 12
    6334:	09 c0       	rjmp	.+18     	; 0x6348 <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6336:	83 e0       	ldi	r24, 0x03	; 3
    6338:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    633a:	82 e0       	ldi	r24, 0x02	; 2
    633c:	1e 96       	adiw	r26, 0x0e	; 14
    633e:	8c 93       	st	X, r24
    6340:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6342:	1d 96       	adiw	r26, 0x0d	; 13
    6344:	1c 92       	st	X, r1
    6346:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    6348:	1a 96       	adiw	r26, 0x0a	; 10
    634a:	9c 91       	ld	r25, X
    634c:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    634e:	1c 96       	adiw	r26, 0x0c	; 12
    6350:	8c 91       	ld	r24, X
    6352:	1c 97       	sbiw	r26, 0x0c	; 12
    6354:	ed 91       	ld	r30, X+
    6356:	fc 91       	ld	r31, X
    6358:	11 97       	sbiw	r26, 0x01	; 1
    635a:	89 17       	cp	r24, r25
    635c:	18 f4       	brcc	.+6      	; 0x6364 <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    635e:	82 e0       	ldi	r24, 0x02	; 2
    6360:	83 83       	std	Z+3, r24	; 0x03
    6362:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    6364:	87 e0       	ldi	r24, 0x07	; 7
    6366:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	1e 96       	adiw	r26, 0x0e	; 14
    636c:	8c 93       	st	X, r24
    636e:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6370:	1d 96       	adiw	r26, 0x0d	; 13
    6372:	1c 92       	st	X, r1
    6374:	08 95       	ret

00006376 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    6376:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6378:	ed 91       	ld	r30, X+
    637a:	fc 91       	ld	r31, X
    637c:	11 97       	sbiw	r26, 0x01	; 1
    637e:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    6380:	24 2f       	mov	r18, r20
    6382:	30 e0       	ldi	r19, 0x00	; 0
    6384:	c9 01       	movw	r24, r18
    6386:	8c 70       	andi	r24, 0x0C	; 12
    6388:	90 70       	andi	r25, 0x00	; 0
    638a:	89 2b       	or	r24, r25
    638c:	21 f0       	breq	.+8      	; 0x6396 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    638e:	cd 01       	movw	r24, r26
    6390:	0e 94 28 31 	call	0x6250	; 0x6250 <TWI_MasterArbitrationLostBusErrorHandler>
    6394:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    6396:	46 ff       	sbrs	r20, 6
    6398:	04 c0       	rjmp	.+8      	; 0x63a2 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    639a:	cd 01       	movw	r24, r26
    639c:	0e 94 3d 31 	call	0x627a	; 0x627a <TWI_MasterWriteHandler>
    63a0:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    63a2:	47 ff       	sbrs	r20, 7
    63a4:	04 c0       	rjmp	.+8      	; 0x63ae <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    63a6:	cd 01       	movw	r24, r26
    63a8:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <TWI_MasterReadHandler>
    63ac:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    63ae:	86 e0       	ldi	r24, 0x06	; 6
    63b0:	1e 96       	adiw	r26, 0x0e	; 14
    63b2:	8c 93       	st	X, r24
    63b4:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    63b6:	1d 96       	adiw	r26, 0x0d	; 13
    63b8:	1c 92       	st	X, r1
    63ba:	08 95       	ret

000063bc <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    63bc:	0f 93       	push	r16
    63be:	1f 93       	push	r17
    63c0:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    63c2:	fc 01       	movw	r30, r24
    63c4:	85 81       	ldd	r24, Z+5	; 0x05
    63c6:	96 81       	ldd	r25, Z+6	; 0x06
    63c8:	0e 94 08 5a 	call	0xb410	; 0xb410 <free>
 free(twi->PwriteData);
    63cc:	f8 01       	movw	r30, r16
    63ce:	83 81       	ldd	r24, Z+3	; 0x03
    63d0:	94 81       	ldd	r25, Z+4	; 0x04
    63d2:	0e 94 08 5a 	call	0xb410	; 0xb410 <free>
}
    63d6:	1f 91       	pop	r17
    63d8:	0f 91       	pop	r16
    63da:	08 95       	ret

000063dc <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    63e2:	6f 3f       	cpi	r22, 0xFF	; 255
    63e4:	79 f4       	brne	.+30     	; 0x6404 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    63e6:	88 e8       	ldi	r24, 0x88	; 136
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    63ee:	8d 83       	std	Y+5, r24	; 0x05
    63f0:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    63f2:	88 e8       	ldi	r24, 0x88	; 136
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    63fa:	8b 83       	std	Y+3, r24	; 0x03
    63fc:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    63fe:	88 e8       	ldi	r24, 0x88	; 136
    6400:	8f 83       	std	Y+7, r24	; 0x07
    6402:	0f c0       	rjmp	.+30     	; 0x6422 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    6404:	8e e1       	ldi	r24, 0x1E	; 30
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    640c:	8d 83       	std	Y+5, r24	; 0x05
    640e:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    6410:	82 e3       	ldi	r24, 0x32	; 50
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <malloc>
    6418:	8b 83       	std	Y+3, r24	; 0x03
    641a:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    641c:	84 e6       	ldi	r24, 0x64	; 100
    641e:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    6420:	82 e3       	ldi	r24, 0x32	; 50
    6422:	88 87       	std	Y+8, r24	; 0x08
 }
}
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	08 95       	ret

0000642a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    642a:	0f 93       	push	r16
    642c:	1f 93       	push	r17
    642e:	cf 93       	push	r28
    6430:	df 93       	push	r29
    6432:	fc 01       	movw	r30, r24
    6434:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    6436:	eb 01       	movw	r28, r22
    6438:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    643a:	86 85       	ldd	r24, Z+14	; 0x0e
    643c:	97 85       	ldd	r25, Z+15	; 0x0f
    643e:	a0 89       	ldd	r26, Z+16	; 0x10
    6440:	b1 89       	ldd	r27, Z+17	; 0x11
    6442:	00 97       	sbiw	r24, 0x00	; 0
    6444:	a1 05       	cpc	r26, r1
    6446:	b1 05       	cpc	r27, r1
    6448:	09 f4       	brne	.+2      	; 0x644c <get_fileinfo+0x22>
    644a:	63 c0       	rjmp	.+198    	; 0x6512 <get_fileinfo+0xe8>
		dir = dj->dir;
    644c:	22 89       	ldd	r18, Z+18	; 0x12
    644e:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    6450:	d9 01       	movw	r26, r18
    6452:	1c 96       	adiw	r26, 0x0c	; 12
    6454:	9c 91       	ld	r25, X
    6456:	40 e0       	ldi	r20, 0x00	; 0
    6458:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    645a:	69 2f       	mov	r22, r25
    645c:	70 e0       	ldi	r23, 0x00	; 0
    645e:	68 70       	andi	r22, 0x08	; 8
    6460:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    6462:	f9 01       	movw	r30, r18
    6464:	e4 0f       	add	r30, r20
    6466:	f5 1f       	adc	r31, r21
    6468:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    646a:	e0 32       	cpi	r30, 0x20	; 32
    646c:	89 f0       	breq	.+34     	; 0x6490 <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    646e:	e5 30       	cpi	r30, 0x05	; 5
    6470:	09 f4       	brne	.+2      	; 0x6474 <get_fileinfo+0x4a>
    6472:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    6474:	61 15       	cp	r22, r1
    6476:	71 05       	cpc	r23, r1
    6478:	29 f0       	breq	.+10     	; 0x6484 <get_fileinfo+0x5a>
    647a:	8e 2f       	mov	r24, r30
    647c:	81 54       	subi	r24, 0x41	; 65
    647e:	8a 31       	cpi	r24, 0x1A	; 26
    6480:	08 f4       	brcc	.+2      	; 0x6484 <get_fileinfo+0x5a>
    6482:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    6484:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    6486:	4f 5f       	subi	r20, 0xFF	; 255
    6488:	5f 4f       	sbci	r21, 0xFF	; 255
    648a:	48 30       	cpi	r20, 0x08	; 8
    648c:	51 05       	cpc	r21, r1
    648e:	49 f7       	brne	.-46     	; 0x6462 <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    6490:	f9 01       	movw	r30, r18
    6492:	80 85       	ldd	r24, Z+8	; 0x08
    6494:	80 32       	cpi	r24, 0x20	; 32
    6496:	11 f4       	brne	.+4      	; 0x649c <get_fileinfo+0x72>
    6498:	fe 01       	movw	r30, r28
    649a:	1d c0       	rjmp	.+58     	; 0x64d6 <get_fileinfo+0xac>
			*p++ = '.';
    649c:	fe 01       	movw	r30, r28
    649e:	8e e2       	ldi	r24, 0x2E	; 46
    64a0:	81 93       	st	Z+, r24
    64a2:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    64a4:	49 2f       	mov	r20, r25
    64a6:	50 e0       	ldi	r21, 0x00	; 0
    64a8:	40 71       	andi	r20, 0x10	; 16
    64aa:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    64ac:	be 01       	movw	r22, r28
    64ae:	6c 5f       	subi	r22, 0xFC	; 252
    64b0:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    64b2:	18 96       	adiw	r26, 0x08	; 8
    64b4:	9c 91       	ld	r25, X
    64b6:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    64b8:	90 32       	cpi	r25, 0x20	; 32
    64ba:	69 f0       	breq	.+26     	; 0x64d6 <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    64bc:	41 15       	cp	r20, r1
    64be:	51 05       	cpc	r21, r1
    64c0:	29 f0       	breq	.+10     	; 0x64cc <get_fileinfo+0xa2>
    64c2:	89 2f       	mov	r24, r25
    64c4:	81 54       	subi	r24, 0x41	; 65
    64c6:	8a 31       	cpi	r24, 0x1A	; 26
    64c8:	08 f4       	brcc	.+2      	; 0x64cc <get_fileinfo+0xa2>
    64ca:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    64cc:	91 93       	st	Z+, r25
    64ce:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    64d0:	e6 17       	cp	r30, r22
    64d2:	f7 07       	cpc	r31, r23
    64d4:	71 f7       	brne	.-36     	; 0x64b2 <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    64d6:	d9 01       	movw	r26, r18
    64d8:	1b 96       	adiw	r26, 0x0b	; 11
    64da:	8c 91       	ld	r24, X
    64dc:	1b 97       	sbiw	r26, 0x0b	; 11
    64de:	e8 01       	movw	r28, r16
    64e0:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    64e2:	5c 96       	adiw	r26, 0x1c	; 28
    64e4:	8d 91       	ld	r24, X+
    64e6:	9d 91       	ld	r25, X+
    64e8:	0d 90       	ld	r0, X+
    64ea:	bc 91       	ld	r27, X
    64ec:	a0 2d       	mov	r26, r0
    64ee:	88 83       	st	Y, r24
    64f0:	99 83       	std	Y+1, r25	; 0x01
    64f2:	aa 83       	std	Y+2, r26	; 0x02
    64f4:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    64f6:	d9 01       	movw	r26, r18
    64f8:	58 96       	adiw	r26, 0x18	; 24
    64fa:	8d 91       	ld	r24, X+
    64fc:	9c 91       	ld	r25, X
    64fe:	59 97       	sbiw	r26, 0x19	; 25
    6500:	8c 83       	std	Y+4, r24	; 0x04
    6502:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    6504:	56 96       	adiw	r26, 0x16	; 22
    6506:	8d 91       	ld	r24, X+
    6508:	9c 91       	ld	r25, X
    650a:	57 97       	sbiw	r26, 0x17	; 23
    650c:	8e 83       	std	Y+6, r24	; 0x06
    650e:	9f 83       	std	Y+7, r25	; 0x07
    6510:	ef 01       	movw	r28, r30
	}
	*p = 0;
    6512:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	1f 91       	pop	r17
    651a:	0f 91       	pop	r16
    651c:	08 95       	ret

0000651e <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    651e:	cf 93       	push	r28
    6520:	df 93       	push	r29
    6522:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    6524:	82 30       	cpi	r24, 0x02	; 2
    6526:	18 f0       	brcs	.+6      	; 0x652e <f_mount+0x10>
    6528:	2b e0       	ldi	r18, 0x0B	; 11
    652a:	30 e0       	ldi	r19, 0x00	; 0
    652c:	18 c0       	rjmp	.+48     	; 0x655e <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    652e:	a8 2f       	mov	r26, r24
    6530:	b0 e0       	ldi	r27, 0x00	; 0
    6532:	fd 01       	movw	r30, r26
    6534:	ee 0f       	add	r30, r30
    6536:	ff 1f       	adc	r31, r31
    6538:	e2 59       	subi	r30, 0x92	; 146
    653a:	fa 4d       	sbci	r31, 0xDA	; 218
    653c:	01 90       	ld	r0, Z+
    653e:	f0 81       	ld	r31, Z
    6540:	e0 2d       	mov	r30, r0

	if (rfs) {
    6542:	30 97       	sbiw	r30, 0x00	; 0
    6544:	09 f0       	breq	.+2      	; 0x6548 <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    6546:	10 82       	st	Z, r1
	}

	if (fs) {
    6548:	20 97       	sbiw	r28, 0x00	; 0
    654a:	09 f0       	breq	.+2      	; 0x654e <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    654c:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    654e:	aa 0f       	add	r26, r26
    6550:	bb 1f       	adc	r27, r27
    6552:	a2 59       	subi	r26, 0x92	; 146
    6554:	ba 4d       	sbci	r27, 0xDA	; 218
    6556:	cd 93       	st	X+, r28
    6558:	dc 93       	st	X, r29
    655a:	20 e0       	ldi	r18, 0x00	; 0
    655c:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    655e:	c9 01       	movw	r24, r18
    6560:	df 91       	pop	r29
    6562:	cf 91       	pop	r28
    6564:	08 95       	ret

00006566 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6566:	82 30       	cpi	r24, 0x02	; 2
    6568:	18 f0       	brcs	.+6      	; 0x6570 <f_chdrive+0xa>
    656a:	2b e0       	ldi	r18, 0x0B	; 11
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	04 c0       	rjmp	.+8      	; 0x6578 <f_chdrive+0x12>

	Drive = drv;
    6570:	80 93 74 25 	sts	0x2574, r24
    6574:	20 e0       	ldi	r18, 0x00	; 0
    6576:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6578:	c9 01       	movw	r24, r18
    657a:	08 95       	ret

0000657c <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    657c:	a5 e2       	ldi	r26, 0x25	; 37
    657e:	b0 e0       	ldi	r27, 0x00	; 0
    6580:	e4 ec       	ldi	r30, 0xC4	; 196
    6582:	f2 e3       	ldi	r31, 0x32	; 50
    6584:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    6588:	38 2e       	mov	r3, r24
    658a:	26 2e       	mov	r2, r22
    658c:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    658e:	21 e0       	ldi	r18, 0x01	; 1
    6590:	28 17       	cp	r18, r24
    6592:	18 f4       	brcc	.+6      	; 0x659a <f_mkfs+0x1e>
    6594:	2b e0       	ldi	r18, 0x0B	; 11
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	58 c4       	rjmp	.+2224   	; 0x6e4a <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    659a:	31 e0       	ldi	r19, 0x01	; 1
    659c:	36 17       	cp	r19, r22
    659e:	08 f4       	brcc	.+2      	; 0x65a2 <f_mkfs+0x26>
    65a0:	4f c4       	rjmp	.+2206   	; 0x6e40 <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    65a2:	e8 2f       	mov	r30, r24
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	ee 0f       	add	r30, r30
    65a8:	ff 1f       	adc	r31, r31
    65aa:	e2 59       	subi	r30, 0x92	; 146
    65ac:	fa 4d       	sbci	r31, 0xDA	; 218
    65ae:	80 80       	ld	r8, Z
    65b0:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    65b2:	81 14       	cp	r8, r1
    65b4:	91 04       	cpc	r9, r1
    65b6:	19 f4       	brne	.+6      	; 0x65be <f_mkfs+0x42>
    65b8:	2c e0       	ldi	r18, 0x0C	; 12
    65ba:	30 e0       	ldi	r19, 0x00	; 0
    65bc:	46 c4       	rjmp	.+2188   	; 0x6e4a <f_mkfs+0x8ce>
	fs->fs_type = 0;
    65be:	d4 01       	movw	r26, r8
    65c0:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    65c2:	0e 94 f7 54 	call	0xa9ee	; 0xa9ee <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    65c6:	80 ff       	sbrs	r24, 0
    65c8:	03 c0       	rjmp	.+6      	; 0x65d0 <f_mkfs+0x54>
    65ca:	23 e0       	ldi	r18, 0x03	; 3
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	3d c4       	rjmp	.+2170   	; 0x6e4a <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    65d0:	82 ff       	sbrs	r24, 2
    65d2:	03 c0       	rjmp	.+6      	; 0x65da <f_mkfs+0x5e>
    65d4:	2a e0       	ldi	r18, 0x0A	; 10
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	38 c4       	rjmp	.+2160   	; 0x6e4a <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    65da:	83 2d       	mov	r24, r3
    65dc:	61 e0       	ldi	r22, 0x01	; 1
    65de:	ae 01       	movw	r20, r28
    65e0:	4f 5f       	subi	r20, 0xFF	; 255
    65e2:	5f 4f       	sbci	r21, 0xFF	; 255
    65e4:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <disk_ioctl>
    65e8:	89 2b       	or	r24, r25
    65ea:	09 f0       	breq	.+2      	; 0x65ee <f_mkfs+0x72>
    65ec:	29 c4       	rjmp	.+2130   	; 0x6e40 <f_mkfs+0x8c4>
    65ee:	89 81       	ldd	r24, Y+1	; 0x01
    65f0:	9a 81       	ldd	r25, Y+2	; 0x02
    65f2:	ab 81       	ldd	r26, Y+3	; 0x03
    65f4:	bc 81       	ldd	r27, Y+4	; 0x04
    65f6:	80 3d       	cpi	r24, 0xD0	; 208
    65f8:	e7 e0       	ldi	r30, 0x07	; 7
    65fa:	9e 07       	cpc	r25, r30
    65fc:	e0 e0       	ldi	r30, 0x00	; 0
    65fe:	ae 07       	cpc	r26, r30
    6600:	e0 e0       	ldi	r30, 0x00	; 0
    6602:	be 07       	cpc	r27, r30
    6604:	08 f4       	brcc	.+2      	; 0x6608 <f_mkfs+0x8c>
    6606:	1c c4       	rjmp	.+2104   	; 0x6e40 <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    6608:	81 50       	subi	r24, 0x01	; 1
    660a:	90 40       	sbci	r25, 0x00	; 0
    660c:	a0 4d       	sbci	r26, 0xD0	; 208
    660e:	b7 40       	sbci	r27, 0x07	; 7
    6610:	40 f0       	brcs	.+16     	; 0x6622 <f_mkfs+0xa6>
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	a0 ed       	ldi	r26, 0xD0	; 208
    6618:	b7 e0       	ldi	r27, 0x07	; 7
    661a:	89 83       	std	Y+1, r24	; 0x01
    661c:	9a 83       	std	Y+2, r25	; 0x02
    661e:	ab 83       	std	Y+3, r26	; 0x03
    6620:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    6622:	22 20       	and	r2, r2
    6624:	29 f0       	breq	.+10     	; 0x6630 <f_mkfs+0xb4>
    6626:	1b 8e       	std	Y+27, r1	; 0x1b
    6628:	1c 8e       	std	Y+28, r1	; 0x1c
    662a:	1d 8e       	std	Y+29, r1	; 0x1d
    662c:	1e 8e       	std	Y+30, r1	; 0x1e
    662e:	08 c0       	rjmp	.+16     	; 0x6640 <f_mkfs+0xc4>
    6630:	2f e3       	ldi	r18, 0x3F	; 63
    6632:	30 e0       	ldi	r19, 0x00	; 0
    6634:	40 e0       	ldi	r20, 0x00	; 0
    6636:	50 e0       	ldi	r21, 0x00	; 0
    6638:	2b 8f       	std	Y+27, r18	; 0x1b
    663a:	3c 8f       	std	Y+28, r19	; 0x1c
    663c:	4d 8f       	std	Y+29, r20	; 0x1d
    663e:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    6640:	a9 80       	ldd	r10, Y+1	; 0x01
    6642:	ba 80       	ldd	r11, Y+2	; 0x02
    6644:	cb 80       	ldd	r12, Y+3	; 0x03
    6646:	dc 80       	ldd	r13, Y+4	; 0x04
    6648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    664a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    664c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    664e:	be 8d       	ldd	r27, Y+30	; 0x1e
    6650:	a8 1a       	sub	r10, r24
    6652:	b9 0a       	sbc	r11, r25
    6654:	ca 0a       	sbc	r12, r26
    6656:	db 0a       	sbc	r13, r27
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	92 e0       	ldi	r25, 0x02	; 2
    665c:	a0 e0       	ldi	r26, 0x00	; 0
    665e:	b0 e0       	ldi	r27, 0x00	; 0
    6660:	20 e0       	ldi	r18, 0x00	; 0
    6662:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    6664:	a8 01       	movw	r20, r16
    6666:	60 e0       	ldi	r22, 0x00	; 0
    6668:	70 e0       	ldi	r23, 0x00	; 0
    666a:	09 c0       	rjmp	.+18     	; 0x667e <f_mkfs+0x102>
    666c:	88 0f       	add	r24, r24
    666e:	99 1f       	adc	r25, r25
    6670:	aa 1f       	adc	r26, r26
    6672:	bb 1f       	adc	r27, r27
    6674:	2f 5f       	subi	r18, 0xFF	; 255
    6676:	3f 4f       	sbci	r19, 0xFF	; 255
    6678:	27 30       	cpi	r18, 0x07	; 7
    667a:	31 05       	cpc	r19, r1
    667c:	31 f0       	breq	.+12     	; 0x668a <f_mkfs+0x10e>
    667e:	84 17       	cp	r24, r20
    6680:	95 07       	cpc	r25, r21
    6682:	a6 07       	cpc	r26, r22
    6684:	b7 07       	cpc	r27, r23
    6686:	91 f7       	brne	.-28     	; 0x666c <f_mkfs+0xf0>
    6688:	05 c0       	rjmp	.+10     	; 0x6694 <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    668a:	84 17       	cp	r24, r20
    668c:	95 07       	cpc	r25, r21
    668e:	a6 07       	cpc	r26, r22
    6690:	b7 07       	cpc	r27, r23
    6692:	19 f4       	brne	.+6      	; 0x669a <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    6694:	01 15       	cp	r16, r1
    6696:	11 05       	cpc	r17, r1
    6698:	11 f5       	brne	.+68     	; 0x66de <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    669a:	ee e2       	ldi	r30, 0x2E	; 46
    669c:	f4 e2       	ldi	r31, 0x24	; 36
    669e:	20 e0       	ldi	r18, 0x00	; 0
    66a0:	30 e0       	ldi	r19, 0x00	; 0
    66a2:	40 e0       	ldi	r20, 0x00	; 0
    66a4:	50 e0       	ldi	r21, 0x00	; 0
    66a6:	81 91       	ld	r24, Z+
    66a8:	91 91       	ld	r25, Z+
    66aa:	a1 91       	ld	r26, Z+
    66ac:	b1 91       	ld	r27, Z+
    66ae:	b9 01       	movw	r22, r18
    66b0:	14 2f       	mov	r17, r20
    66b2:	05 2f       	mov	r16, r21
    66b4:	2f 5f       	subi	r18, 0xFF	; 255
    66b6:	3f 4f       	sbci	r19, 0xFF	; 255
    66b8:	4f 4f       	sbci	r20, 0xFF	; 255
    66ba:	5f 4f       	sbci	r21, 0xFF	; 255
    66bc:	a8 16       	cp	r10, r24
    66be:	b9 06       	cpc	r11, r25
    66c0:	ca 06       	cpc	r12, r26
    66c2:	db 06       	cpc	r13, r27
    66c4:	80 f3       	brcs	.-32     	; 0x66a6 <f_mkfs+0x12a>
    66c6:	cb 01       	movw	r24, r22
    66c8:	6d 83       	std	Y+5, r22	; 0x05
    66ca:	9e 83       	std	Y+6, r25	; 0x06
    66cc:	1f 83       	std	Y+7, r17	; 0x07
    66ce:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    66d0:	fb 01       	movw	r30, r22
    66d2:	ee 0f       	add	r30, r30
    66d4:	ff 1f       	adc	r31, r31
    66d6:	e8 5e       	subi	r30, 0xE8	; 232
    66d8:	fb 4d       	sbci	r31, 0xDB	; 219
    66da:	00 81       	ld	r16, Z
    66dc:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    66de:	92 e0       	ldi	r25, 0x02	; 2
    66e0:	00 30       	cpi	r16, 0x00	; 0
    66e2:	19 07       	cpc	r17, r25
    66e4:	10 f4       	brcc	.+4      	; 0x66ea <f_mkfs+0x16e>
    66e6:	00 e0       	ldi	r16, 0x00	; 0
    66e8:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    66ea:	d8 01       	movw	r26, r16
    66ec:	ab 2f       	mov	r26, r27
    66ee:	bb 27       	eor	r27, r27
    66f0:	a6 95       	lsr	r26
    66f2:	ad 8b       	std	Y+21, r26	; 0x15
    66f4:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    66f6:	9d 01       	movw	r18, r26
    66f8:	40 e0       	ldi	r20, 0x00	; 0
    66fa:	50 e0       	ldi	r21, 0x00	; 0
    66fc:	29 8b       	std	Y+17, r18	; 0x11
    66fe:	3a 8b       	std	Y+18, r19	; 0x12
    6700:	4b 8b       	std	Y+19, r20	; 0x13
    6702:	5c 8b       	std	Y+20, r21	; 0x14
    6704:	c6 01       	movw	r24, r12
    6706:	b5 01       	movw	r22, r10
    6708:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    670c:	c9 01       	movw	r24, r18
    670e:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    6710:	85 3f       	cpi	r24, 0xF5	; 245
    6712:	5f e0       	ldi	r21, 0x0F	; 15
    6714:	95 07       	cpc	r25, r21
    6716:	50 e0       	ldi	r21, 0x00	; 0
    6718:	a5 07       	cpc	r26, r21
    671a:	50 e0       	ldi	r21, 0x00	; 0
    671c:	b5 07       	cpc	r27, r21
    671e:	08 f4       	brcc	.+2      	; 0x6722 <f_mkfs+0x1a6>
    6720:	99 c3       	rjmp	.+1842   	; 0x6e54 <f_mkfs+0x8d8>
    6722:	22 2d       	mov	r18, r2
    6724:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    6726:	85 3f       	cpi	r24, 0xF5	; 245
    6728:	ef ef       	ldi	r30, 0xFF	; 255
    672a:	9e 07       	cpc	r25, r30
    672c:	e0 e0       	ldi	r30, 0x00	; 0
    672e:	ae 07       	cpc	r26, r30
    6730:	e0 e0       	ldi	r30, 0x00	; 0
    6732:	be 07       	cpc	r27, r30
    6734:	30 f5       	brcc	.+76     	; 0x6782 <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    6736:	7c 01       	movw	r14, r24
    6738:	8d 01       	movw	r16, r26
    673a:	ee 0c       	add	r14, r14
    673c:	ff 1c       	adc	r15, r15
    673e:	00 1f       	adc	r16, r16
    6740:	11 1f       	adc	r17, r17
    6742:	83 e0       	ldi	r24, 0x03	; 3
    6744:	92 e0       	ldi	r25, 0x02	; 2
    6746:	a0 e0       	ldi	r26, 0x00	; 0
    6748:	b0 e0       	ldi	r27, 0x00	; 0
    674a:	e8 0e       	add	r14, r24
    674c:	f9 1e       	adc	r15, r25
    674e:	0a 1f       	adc	r16, r26
    6750:	1b 1f       	adc	r17, r27
    6752:	f9 e0       	ldi	r31, 0x09	; 9
    6754:	16 95       	lsr	r17
    6756:	07 95       	ror	r16
    6758:	f7 94       	ror	r15
    675a:	e7 94       	ror	r14
    675c:	fa 95       	dec	r31
    675e:	d1 f7       	brne	.-12     	; 0x6754 <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    6760:	2f 5f       	subi	r18, 0xFF	; 255
    6762:	3f 4f       	sbci	r19, 0xFF	; 255
    6764:	29 01       	movw	r4, r18
    6766:	66 24       	eor	r6, r6
    6768:	57 fc       	sbrc	r5, 7
    676a:	60 94       	com	r6
    676c:	76 2c       	mov	r7, r6
    676e:	20 e2       	ldi	r18, 0x20	; 32
    6770:	30 e0       	ldi	r19, 0x00	; 0
    6772:	40 e0       	ldi	r20, 0x00	; 0
    6774:	50 e0       	ldi	r21, 0x00	; 0
    6776:	2f 8b       	std	Y+23, r18	; 0x17
    6778:	38 8f       	std	Y+24, r19	; 0x18
    677a:	49 8f       	std	Y+25, r20	; 0x19
    677c:	5a 8f       	std	Y+26, r21	; 0x1a
    677e:	32 e0       	ldi	r19, 0x02	; 2
    6780:	9c c3       	rjmp	.+1848   	; 0x6eba <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    6782:	7c 01       	movw	r14, r24
    6784:	8d 01       	movw	r16, r26
    6786:	e2 e0       	ldi	r30, 0x02	; 2
    6788:	ee 0c       	add	r14, r14
    678a:	ff 1c       	adc	r15, r15
    678c:	00 1f       	adc	r16, r16
    678e:	11 1f       	adc	r17, r17
    6790:	ea 95       	dec	r30
    6792:	d1 f7       	brne	.-12     	; 0x6788 <f_mkfs+0x20c>
    6794:	87 e0       	ldi	r24, 0x07	; 7
    6796:	92 e0       	ldi	r25, 0x02	; 2
    6798:	a0 e0       	ldi	r26, 0x00	; 0
    679a:	b0 e0       	ldi	r27, 0x00	; 0
    679c:	e8 0e       	add	r14, r24
    679e:	f9 1e       	adc	r15, r25
    67a0:	0a 1f       	adc	r16, r26
    67a2:	1b 1f       	adc	r17, r27
    67a4:	79 e0       	ldi	r23, 0x09	; 9
    67a6:	16 95       	lsr	r17
    67a8:	07 95       	ror	r16
    67aa:	f7 94       	ror	r15
    67ac:	e7 94       	ror	r14
    67ae:	7a 95       	dec	r23
    67b0:	d1 f7       	brne	.-12     	; 0x67a6 <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    67b2:	81 e2       	ldi	r24, 0x21	; 33
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	82 1b       	sub	r24, r18
    67b8:	93 0b       	sbc	r25, r19
    67ba:	2c 01       	movw	r4, r24
    67bc:	66 24       	eor	r6, r6
    67be:	57 fc       	sbrc	r5, 7
    67c0:	60 94       	com	r6
    67c2:	76 2c       	mov	r7, r6
    67c4:	1f 8a       	std	Y+23, r1	; 0x17
    67c6:	18 8e       	std	Y+24, r1	; 0x18
    67c8:	19 8e       	std	Y+25, r1	; 0x19
    67ca:	1a 8e       	std	Y+26, r1	; 0x1a
    67cc:	93 e0       	ldi	r25, 0x03	; 3
    67ce:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    67d0:	a9 82       	std	Y+1, r10	; 0x01
    67d2:	ba 82       	std	Y+2, r11	; 0x02
    67d4:	cb 82       	std	Y+3, r12	; 0x03
    67d6:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    67d8:	83 2d       	mov	r24, r3
    67da:	63 e0       	ldi	r22, 0x03	; 3
    67dc:	ae 01       	movw	r20, r28
    67de:	4b 5f       	subi	r20, 0xFB	; 251
    67e0:	5f 4f       	sbci	r21, 0xFF	; 255
    67e2:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <disk_ioctl>
    67e6:	89 2b       	or	r24, r25
    67e8:	09 f0       	breq	.+2      	; 0x67ec <f_mkfs+0x270>
    67ea:	2a c3       	rjmp	.+1620   	; 0x6e40 <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    67ec:	2b 8d       	ldd	r18, Y+27	; 0x1b
    67ee:	3c 8d       	ldd	r19, Y+28	; 0x1c
    67f0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    67f2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    67f4:	24 0d       	add	r18, r4
    67f6:	35 1d       	adc	r19, r5
    67f8:	46 1d       	adc	r20, r6
    67fa:	57 1d       	adc	r21, r7
    67fc:	2d 87       	std	Y+13, r18	; 0x0d
    67fe:	3e 87       	std	Y+14, r19	; 0x0e
    6800:	4f 87       	std	Y+15, r20	; 0x0f
    6802:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    6804:	2f 89       	ldd	r18, Y+23	; 0x17
    6806:	38 8d       	ldd	r19, Y+24	; 0x18
    6808:	49 8d       	ldd	r20, Y+25	; 0x19
    680a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    680c:	2e 0d       	add	r18, r14
    680e:	3f 1d       	adc	r19, r15
    6810:	40 1f       	adc	r20, r16
    6812:	51 1f       	adc	r21, r17
    6814:	8d 85       	ldd	r24, Y+13	; 0x0d
    6816:	9e 85       	ldd	r25, Y+14	; 0x0e
    6818:	af 85       	ldd	r26, Y+15	; 0x0f
    681a:	b8 89       	ldd	r27, Y+16	; 0x10
    681c:	28 0f       	add	r18, r24
    681e:	39 1f       	adc	r19, r25
    6820:	4a 1f       	adc	r20, r26
    6822:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6824:	8d 81       	ldd	r24, Y+5	; 0x05
    6826:	9e 81       	ldd	r25, Y+6	; 0x06
    6828:	af 81       	ldd	r26, Y+7	; 0x07
    682a:	b8 85       	ldd	r27, Y+8	; 0x08
    682c:	5c 01       	movw	r10, r24
    682e:	6d 01       	movw	r12, r26
    6830:	08 94       	sec
    6832:	a1 08       	sbc	r10, r1
    6834:	b1 08       	sbc	r11, r1
    6836:	c1 08       	sbc	r12, r1
    6838:	d1 08       	sbc	r13, r1
    683a:	a2 0e       	add	r10, r18
    683c:	b3 1e       	adc	r11, r19
    683e:	c4 1e       	adc	r12, r20
    6840:	d5 1e       	adc	r13, r21
    6842:	b0 95       	com	r27
    6844:	a0 95       	com	r26
    6846:	90 95       	com	r25
    6848:	81 95       	neg	r24
    684a:	9f 4f       	sbci	r25, 0xFF	; 255
    684c:	af 4f       	sbci	r26, 0xFF	; 255
    684e:	bf 4f       	sbci	r27, 0xFF	; 255
    6850:	a8 22       	and	r10, r24
    6852:	b9 22       	and	r11, r25
    6854:	ca 22       	and	r12, r26
    6856:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    6858:	d8 01       	movw	r26, r16
    685a:	c7 01       	movw	r24, r14
    685c:	82 1b       	sub	r24, r18
    685e:	93 0b       	sbc	r25, r19
    6860:	a4 0b       	sbc	r26, r20
    6862:	b5 0b       	sbc	r27, r21
    6864:	8a 0d       	add	r24, r10
    6866:	9b 1d       	adc	r25, r11
    6868:	ac 1d       	adc	r26, r12
    686a:	bd 1d       	adc	r27, r13
    686c:	89 87       	std	Y+9, r24	; 0x09
    686e:	9a 87       	std	Y+10, r25	; 0x0a
    6870:	ab 87       	std	Y+11, r26	; 0x0b
    6872:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    6874:	e9 80       	ldd	r14, Y+1	; 0x01
    6876:	fa 80       	ldd	r15, Y+2	; 0x02
    6878:	0b 81       	ldd	r16, Y+3	; 0x03
    687a:	1c 81       	ldd	r17, Y+4	; 0x04
    687c:	c8 01       	movw	r24, r16
    687e:	b7 01       	movw	r22, r14
    6880:	64 19       	sub	r22, r4
    6882:	75 09       	sbc	r23, r5
    6884:	86 09       	sbc	r24, r6
    6886:	97 09       	sbc	r25, r7
    6888:	29 85       	ldd	r18, Y+9	; 0x09
    688a:	3a 85       	ldd	r19, Y+10	; 0x0a
    688c:	4b 85       	ldd	r20, Y+11	; 0x0b
    688e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6890:	62 1b       	sub	r22, r18
    6892:	73 0b       	sbc	r23, r19
    6894:	84 0b       	sbc	r24, r20
    6896:	95 0b       	sbc	r25, r21
    6898:	2f 89       	ldd	r18, Y+23	; 0x17
    689a:	38 8d       	ldd	r19, Y+24	; 0x18
    689c:	49 8d       	ldd	r20, Y+25	; 0x19
    689e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    68a0:	62 1b       	sub	r22, r18
    68a2:	73 0b       	sbc	r23, r19
    68a4:	84 0b       	sbc	r24, r20
    68a6:	95 0b       	sbc	r25, r21
    68a8:	29 89       	ldd	r18, Y+17	; 0x11
    68aa:	3a 89       	ldd	r19, Y+18	; 0x12
    68ac:	4b 89       	ldd	r20, Y+19	; 0x13
    68ae:	5c 89       	ldd	r21, Y+20	; 0x14
    68b0:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    68b4:	2a a3       	std	Y+34, r18	; 0x22
    68b6:	3b a3       	std	Y+35, r19	; 0x23
    68b8:	4c a3       	std	Y+36, r20	; 0x24
    68ba:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    68bc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    68be:	32 30       	cpi	r19, 0x02	; 2
    68c0:	51 f4       	brne	.+20     	; 0x68d6 <f_mkfs+0x35a>
    68c2:	8a a1       	ldd	r24, Y+34	; 0x22
    68c4:	9b a1       	ldd	r25, Y+35	; 0x23
    68c6:	ac a1       	ldd	r26, Y+36	; 0x24
    68c8:	bd a1       	ldd	r27, Y+37	; 0x25
    68ca:	85 5f       	subi	r24, 0xF5	; 245
    68cc:	9f 40       	sbci	r25, 0x0F	; 15
    68ce:	a0 40       	sbci	r26, 0x00	; 0
    68d0:	b0 40       	sbci	r27, 0x00	; 0
    68d2:	70 f4       	brcc	.+28     	; 0x68f0 <f_mkfs+0x374>
    68d4:	b5 c2       	rjmp	.+1386   	; 0x6e40 <f_mkfs+0x8c4>
    68d6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    68d8:	f3 30       	cpi	r31, 0x03	; 3
    68da:	51 f4       	brne	.+20     	; 0x68f0 <f_mkfs+0x374>
    68dc:	2a a1       	ldd	r18, Y+34	; 0x22
    68de:	3b a1       	ldd	r19, Y+35	; 0x23
    68e0:	4c a1       	ldd	r20, Y+36	; 0x24
    68e2:	5d a1       	ldd	r21, Y+37	; 0x25
    68e4:	25 5f       	subi	r18, 0xF5	; 245
    68e6:	3f 4f       	sbci	r19, 0xFF	; 255
    68e8:	40 40       	sbci	r20, 0x00	; 0
    68ea:	50 40       	sbci	r21, 0x00	; 0
    68ec:	08 f4       	brcc	.+2      	; 0x68f0 <f_mkfs+0x374>
    68ee:	a8 c2       	rjmp	.+1360   	; 0x6e40 <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    68f0:	ad 82       	std	Y+5, r10	; 0x05
    68f2:	be 82       	std	Y+6, r11	; 0x06
    68f4:	cf 82       	std	Y+7, r12	; 0x07
    68f6:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    68f8:	22 20       	and	r2, r2
    68fa:	11 f0       	breq	.+4      	; 0x6900 <f_mkfs+0x384>
    68fc:	10 ef       	ldi	r17, 0xF0	; 240
    68fe:	85 c0       	rjmp	.+266    	; 0x6a0a <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    6900:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6902:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6904:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6906:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6908:	2e 0d       	add	r18, r14
    690a:	3f 1d       	adc	r19, r15
    690c:	40 1f       	adc	r20, r16
    690e:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    6910:	62 e3       	ldi	r22, 0x32	; 50
    6912:	e6 2e       	mov	r14, r22
    6914:	f1 2c       	mov	r15, r1
    6916:	e8 0c       	add	r14, r8
    6918:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    691a:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    691c:	c4 01       	movw	r24, r8
    691e:	8e 5c       	subi	r24, 0xCE	; 206
    6920:	9d 4f       	sbci	r25, 0xFD	; 253
    6922:	01 c0       	rjmp	.+2      	; 0x6926 <f_mkfs+0x3aa>
    6924:	11 92       	st	Z+, r1
    6926:	e8 17       	cp	r30, r24
    6928:	f9 07       	cpc	r31, r25
    692a:	e1 f7       	brne	.-8      	; 0x6924 <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    692c:	84 01       	movw	r16, r8
    692e:	00 51       	subi	r16, 0x10	; 16
    6930:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    6932:	80 e8       	ldi	r24, 0x80	; 128
    6934:	91 e0       	ldi	r25, 0x01	; 1
    6936:	a1 e0       	ldi	r26, 0x01	; 1
    6938:	b0 e0       	ldi	r27, 0x00	; 0
    693a:	f8 01       	movw	r30, r16
    693c:	80 83       	st	Z, r24
    693e:	91 83       	std	Z+1, r25	; 0x01
    6940:	a2 83       	std	Z+2, r26	; 0x02
    6942:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    6944:	20 30       	cpi	r18, 0x00	; 0
    6946:	f4 e0       	ldi	r31, 0x04	; 4
    6948:	3f 07       	cpc	r19, r31
    694a:	fb ef       	ldi	r31, 0xFB	; 251
    694c:	4f 07       	cpc	r20, r31
    694e:	f0 e0       	ldi	r31, 0x00	; 0
    6950:	5f 07       	cpc	r21, r31
    6952:	b0 f4       	brcc	.+44     	; 0x6980 <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    6954:	ca 01       	movw	r24, r20
    6956:	b9 01       	movw	r22, r18
    6958:	21 ec       	ldi	r18, 0xC1	; 193
    695a:	3e e3       	ldi	r19, 0x3E	; 62
    695c:	40 e0       	ldi	r20, 0x00	; 0
    695e:	50 e0       	ldi	r21, 0x00	; 0
    6960:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    6964:	c9 01       	movw	r24, r18
    6966:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    6968:	f8 01       	movw	r30, r16
    696a:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    696c:	22 e0       	ldi	r18, 0x02	; 2
    696e:	b6 95       	lsr	r27
    6970:	a7 95       	ror	r26
    6972:	97 95       	ror	r25
    6974:	87 95       	ror	r24
    6976:	2a 95       	dec	r18
    6978:	d1 f7       	brne	.-12     	; 0x696e <f_mkfs+0x3f2>
    697a:	8f 63       	ori	r24, 0x3F	; 63
    697c:	86 83       	std	Z+6, r24	; 0x06
    697e:	07 c0       	rjmp	.+14     	; 0x698e <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    6980:	8f ef       	ldi	r24, 0xFF	; 255
    6982:	9f ef       	ldi	r25, 0xFF	; 255
    6984:	d8 01       	movw	r26, r16
    6986:	16 96       	adiw	r26, 0x06	; 6
    6988:	8d 93       	st	X+, r24
    698a:	9c 93       	st	X, r25
    698c:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    698e:	8e ef       	ldi	r24, 0xFE	; 254
    6990:	f8 01       	movw	r30, r16
    6992:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    6994:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6996:	f3 30       	cpi	r31, 0x03	; 3
    6998:	81 f0       	breq	.+32     	; 0x69ba <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    699a:	89 81       	ldd	r24, Y+1	; 0x01
    699c:	9a 81       	ldd	r25, Y+2	; 0x02
    699e:	ab 81       	ldd	r26, Y+3	; 0x03
    69a0:	bc 81       	ldd	r27, Y+4	; 0x04
    69a2:	80 50       	subi	r24, 0x00	; 0
    69a4:	90 40       	sbci	r25, 0x00	; 0
    69a6:	a1 40       	sbci	r26, 0x01	; 1
    69a8:	b0 40       	sbci	r27, 0x00	; 0
    69aa:	10 f0       	brcs	.+4      	; 0x69b0 <f_mkfs+0x434>
    69ac:	86 e0       	ldi	r24, 0x06	; 6
    69ae:	01 c0       	rjmp	.+2      	; 0x69b2 <f_mkfs+0x436>
    69b0:	84 e0       	ldi	r24, 0x04	; 4
    69b2:	d8 01       	movw	r26, r16
    69b4:	14 96       	adiw	r26, 0x04	; 4
    69b6:	8c 93       	st	X, r24
    69b8:	03 c0       	rjmp	.+6      	; 0x69c0 <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    69ba:	8c e0       	ldi	r24, 0x0C	; 12
    69bc:	f8 01       	movw	r30, r16
    69be:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    69c0:	8f e3       	ldi	r24, 0x3F	; 63
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	a0 e0       	ldi	r26, 0x00	; 0
    69c6:	b0 e0       	ldi	r27, 0x00	; 0
    69c8:	f8 01       	movw	r30, r16
    69ca:	80 87       	std	Z+8, r24	; 0x08
    69cc:	91 87       	std	Z+9, r25	; 0x09
    69ce:	a2 87       	std	Z+10, r26	; 0x0a
    69d0:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    69d2:	89 81       	ldd	r24, Y+1	; 0x01
    69d4:	9a 81       	ldd	r25, Y+2	; 0x02
    69d6:	ab 81       	ldd	r26, Y+3	; 0x03
    69d8:	bc 81       	ldd	r27, Y+4	; 0x04
    69da:	84 87       	std	Z+12, r24	; 0x0c
    69dc:	95 87       	std	Z+13, r25	; 0x0d
    69de:	a6 87       	std	Z+14, r26	; 0x0e
    69e0:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    69e2:	00 5c       	subi	r16, 0xC0	; 192
    69e4:	1f 4f       	sbci	r17, 0xFF	; 255
    69e6:	85 e5       	ldi	r24, 0x55	; 85
    69e8:	9a ea       	ldi	r25, 0xAA	; 170
    69ea:	d8 01       	movw	r26, r16
    69ec:	8d 93       	st	X+, r24
    69ee:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    69f0:	83 2d       	mov	r24, r3
    69f2:	b7 01       	movw	r22, r14
    69f4:	20 e0       	ldi	r18, 0x00	; 0
    69f6:	30 e0       	ldi	r19, 0x00	; 0
    69f8:	40 e0       	ldi	r20, 0x00	; 0
    69fa:	50 e0       	ldi	r21, 0x00	; 0
    69fc:	01 e0       	ldi	r16, 0x01	; 1
    69fe:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6a02:	89 2b       	or	r24, r25
    6a04:	09 f0       	breq	.+2      	; 0x6a08 <f_mkfs+0x48c>
    6a06:	1f c2       	rjmp	.+1086   	; 0x6e46 <f_mkfs+0x8ca>
    6a08:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    6a0a:	72 e3       	ldi	r23, 0x32	; 50
    6a0c:	e7 2e       	mov	r14, r23
    6a0e:	f1 2c       	mov	r15, r1
    6a10:	e8 0c       	add	r14, r8
    6a12:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6a14:	57 01       	movw	r10, r14
    6a16:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6a18:	62 e3       	ldi	r22, 0x32	; 50
    6a1a:	c6 2e       	mov	r12, r22
    6a1c:	62 e0       	ldi	r22, 0x02	; 2
    6a1e:	d6 2e       	mov	r13, r22
    6a20:	c8 0c       	add	r12, r8
    6a22:	d9 1c       	adc	r13, r9
    6a24:	01 c0       	rjmp	.+2      	; 0x6a28 <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6a26:	11 92       	st	Z+, r1
    6a28:	ec 15       	cp	r30, r12
    6a2a:	fd 05       	cpc	r31, r13
    6a2c:	e1 f7       	brne	.-8      	; 0x6a26 <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6a2e:	8b ee       	ldi	r24, 0xEB	; 235
    6a30:	9e ef       	ldi	r25, 0xFE	; 254
    6a32:	a0 e9       	ldi	r26, 0x90	; 144
    6a34:	b0 e0       	ldi	r27, 0x00	; 0
    6a36:	f4 01       	movw	r30, r8
    6a38:	82 ab       	std	Z+50, r24	; 0x32
    6a3a:	93 ab       	std	Z+51, r25	; 0x33
    6a3c:	a4 ab       	std	Z+52, r26	; 0x34
    6a3e:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    6a40:	80 e0       	ldi	r24, 0x00	; 0
    6a42:	92 e0       	ldi	r25, 0x02	; 2
    6a44:	d7 01       	movw	r26, r14
    6a46:	1b 96       	adiw	r26, 0x0b	; 11
    6a48:	8d 93       	st	X+, r24
    6a4a:	9c 93       	st	X, r25
    6a4c:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    6a4e:	2d 88       	ldd	r2, Y+21	; 0x15
    6a50:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    6a52:	f7 01       	movw	r30, r14
    6a54:	46 86       	std	Z+14, r4	; 0x0e
    6a56:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    6a58:	22 e4       	ldi	r18, 0x42	; 66
    6a5a:	30 e0       	ldi	r19, 0x00	; 0
    6a5c:	82 0e       	add	r8, r18
    6a5e:	93 1e       	adc	r9, r19
    6a60:	81 e0       	ldi	r24, 0x01	; 1
    6a62:	d4 01       	movw	r26, r8
    6a64:	8c 93       	st	X, r24
    6a66:	ee eb       	ldi	r30, 0xBE	; 190
    6a68:	ff ef       	ldi	r31, 0xFF	; 255
    6a6a:	8e 0e       	add	r8, r30
    6a6c:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    6a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    6a70:	98 8d       	ldd	r25, Y+24	; 0x18
    6a72:	a9 8d       	ldd	r26, Y+25	; 0x19
    6a74:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6a76:	54 e0       	ldi	r21, 0x04	; 4
    6a78:	88 0f       	add	r24, r24
    6a7a:	99 1f       	adc	r25, r25
    6a7c:	aa 1f       	adc	r26, r26
    6a7e:	bb 1f       	adc	r27, r27
    6a80:	5a 95       	dec	r21
    6a82:	d1 f7       	brne	.-12     	; 0x6a78 <f_mkfs+0x4fc>
    6a84:	f7 01       	movw	r30, r14
    6a86:	81 8b       	std	Z+17, r24	; 0x11
    6a88:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    6a8a:	89 81       	ldd	r24, Y+1	; 0x01
    6a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    6a90:	bc 81       	ldd	r27, Y+4	; 0x04
    6a92:	80 30       	cpi	r24, 0x00	; 0
    6a94:	f0 e0       	ldi	r31, 0x00	; 0
    6a96:	9f 07       	cpc	r25, r31
    6a98:	f1 e0       	ldi	r31, 0x01	; 1
    6a9a:	af 07       	cpc	r26, r31
    6a9c:	f0 e0       	ldi	r31, 0x00	; 0
    6a9e:	bf 07       	cpc	r27, r31
    6aa0:	20 f4       	brcc	.+8      	; 0x6aaa <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    6aa2:	f7 01       	movw	r30, r14
    6aa4:	83 8b       	std	Z+19, r24	; 0x13
    6aa6:	94 8b       	std	Z+20, r25	; 0x14
    6aa8:	05 c0       	rjmp	.+10     	; 0x6ab4 <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    6aaa:	f7 01       	movw	r30, r14
    6aac:	80 a3       	std	Z+32, r24	; 0x20
    6aae:	91 a3       	std	Z+33, r25	; 0x21
    6ab0:	a2 a3       	std	Z+34, r26	; 0x22
    6ab2:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    6ab4:	27 e4       	ldi	r18, 0x47	; 71
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	82 0e       	add	r8, r18
    6aba:	93 1e       	adc	r9, r19
    6abc:	d4 01       	movw	r26, r8
    6abe:	1c 93       	st	X, r17
    6ac0:	e9 eb       	ldi	r30, 0xB9	; 185
    6ac2:	ff ef       	ldi	r31, 0xFF	; 255
    6ac4:	8e 0e       	add	r8, r30
    6ac6:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    6ac8:	8f e3       	ldi	r24, 0x3F	; 63
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	d7 01       	movw	r26, r14
    6ace:	58 96       	adiw	r26, 0x18	; 24
    6ad0:	8d 93       	st	X+, r24
    6ad2:	9c 93       	st	X, r25
    6ad4:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    6ad6:	8f ef       	ldi	r24, 0xFF	; 255
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	5a 96       	adiw	r26, 0x1a	; 26
    6adc:	8d 93       	st	X+, r24
    6ade:	9c 93       	st	X, r25
    6ae0:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    6ae2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6ae4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6ae6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6ae8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6aea:	5c 96       	adiw	r26, 0x1c	; 28
    6aec:	2d 93       	st	X+, r18
    6aee:	3d 93       	st	X+, r19
    6af0:	4d 93       	st	X+, r20
    6af2:	5c 93       	st	X, r21
    6af4:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    6af6:	0e 94 f5 55 	call	0xabea	; 0xabea <get_fattime>
    6afa:	6d 83       	std	Y+5, r22	; 0x05
    6afc:	7e 83       	std	Y+6, r23	; 0x06
    6afe:	8f 83       	std	Y+7, r24	; 0x07
    6b00:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    6b02:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6b04:	b3 30       	cpi	r27, 0x03	; 3
    6b06:	39 f1       	breq	.+78     	; 0x6b56 <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    6b08:	f7 01       	movw	r30, r14
    6b0a:	67 a3       	std	Z+39, r22	; 0x27
    6b0c:	70 a7       	std	Z+40, r23	; 0x28
    6b0e:	81 a7       	std	Z+41, r24	; 0x29
    6b10:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    6b12:	29 85       	ldd	r18, Y+9	; 0x09
    6b14:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b16:	26 8b       	std	Z+22, r18	; 0x16
    6b18:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    6b1a:	46 e5       	ldi	r20, 0x56	; 86
    6b1c:	50 e0       	ldi	r21, 0x00	; 0
    6b1e:	84 0e       	add	r8, r20
    6b20:	95 1e       	adc	r9, r21
    6b22:	80 e8       	ldi	r24, 0x80	; 128
    6b24:	d4 01       	movw	r26, r8
    6b26:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    6b28:	e2 e0       	ldi	r30, 0x02	; 2
    6b2a:	f0 e0       	ldi	r31, 0x00	; 0
    6b2c:	8e 0e       	add	r8, r30
    6b2e:	9f 1e       	adc	r9, r31
    6b30:	89 e2       	ldi	r24, 0x29	; 41
    6b32:	d4 01       	movw	r26, r8
    6b34:	8c 93       	st	X, r24
    6b36:	e8 ea       	ldi	r30, 0xA8	; 168
    6b38:	ff ef       	ldi	r31, 0xFF	; 255
    6b3a:	8e 0e       	add	r8, r30
    6b3c:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6b3e:	d7 01       	movw	r26, r14
    6b40:	9b 96       	adiw	r26, 0x2b	; 43
    6b42:	e5 ee       	ldi	r30, 0xE5	; 229
    6b44:	f3 e2       	ldi	r31, 0x23	; 35
    6b46:	02 c0       	rjmp	.+4      	; 0x6b4c <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6b48:	81 91       	ld	r24, Z+
    6b4a:	8d 93       	st	X+, r24
    6b4c:	23 e2       	ldi	r18, 0x23	; 35
    6b4e:	e8 3f       	cpi	r30, 0xF8	; 248
    6b50:	f2 07       	cpc	r31, r18
    6b52:	d1 f7       	brne	.-12     	; 0x6b48 <f_mkfs+0x5cc>
    6b54:	48 c0       	rjmp	.+144    	; 0x6be6 <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    6b56:	43 e4       	ldi	r20, 0x43	; 67
    6b58:	50 e0       	ldi	r21, 0x00	; 0
    6b5a:	e4 0e       	add	r14, r20
    6b5c:	f5 1e       	adc	r15, r21
    6b5e:	d7 01       	movw	r26, r14
    6b60:	6d 93       	st	X+, r22
    6b62:	7d 93       	st	X+, r23
    6b64:	8d 93       	st	X+, r24
    6b66:	9c 93       	st	X, r25
    6b68:	13 97       	sbiw	r26, 0x03	; 3
    6b6a:	ed eb       	ldi	r30, 0xBD	; 189
    6b6c:	ff ef       	ldi	r31, 0xFF	; 255
    6b6e:	ee 0e       	add	r14, r30
    6b70:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    6b72:	29 85       	ldd	r18, Y+9	; 0x09
    6b74:	3a 85       	ldd	r19, Y+10	; 0x0a
    6b76:	4b 85       	ldd	r20, Y+11	; 0x0b
    6b78:	5c 85       	ldd	r21, Y+12	; 0x0c
    6b7a:	d7 01       	movw	r26, r14
    6b7c:	94 96       	adiw	r26, 0x24	; 36
    6b7e:	2d 93       	st	X+, r18
    6b80:	3d 93       	st	X+, r19
    6b82:	4d 93       	st	X+, r20
    6b84:	5c 93       	st	X, r21
    6b86:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    6b88:	82 e0       	ldi	r24, 0x02	; 2
    6b8a:	90 e0       	ldi	r25, 0x00	; 0
    6b8c:	a0 e0       	ldi	r26, 0x00	; 0
    6b8e:	b0 e0       	ldi	r27, 0x00	; 0
    6b90:	f7 01       	movw	r30, r14
    6b92:	84 a7       	std	Z+44, r24	; 0x2c
    6b94:	95 a7       	std	Z+45, r25	; 0x2d
    6b96:	a6 a7       	std	Z+46, r26	; 0x2e
    6b98:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    6b9a:	81 e0       	ldi	r24, 0x01	; 1
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	80 ab       	std	Z+48, r24	; 0x30
    6ba0:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    6ba2:	86 e0       	ldi	r24, 0x06	; 6
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	82 ab       	std	Z+50, r24	; 0x32
    6ba8:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    6baa:	22 e7       	ldi	r18, 0x72	; 114
    6bac:	30 e0       	ldi	r19, 0x00	; 0
    6bae:	82 0e       	add	r8, r18
    6bb0:	93 1e       	adc	r9, r19
    6bb2:	80 e8       	ldi	r24, 0x80	; 128
    6bb4:	d4 01       	movw	r26, r8
    6bb6:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    6bb8:	e2 e0       	ldi	r30, 0x02	; 2
    6bba:	f0 e0       	ldi	r31, 0x00	; 0
    6bbc:	8e 0e       	add	r8, r30
    6bbe:	9f 1e       	adc	r9, r31
    6bc0:	89 e2       	ldi	r24, 0x29	; 41
    6bc2:	d4 01       	movw	r26, r8
    6bc4:	8c 93       	st	X, r24
    6bc6:	ec e8       	ldi	r30, 0x8C	; 140
    6bc8:	ff ef       	ldi	r31, 0xFF	; 255
    6bca:	8e 0e       	add	r8, r30
    6bcc:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6bce:	d7 01       	movw	r26, r14
    6bd0:	a9 5b       	subi	r26, 0xB9	; 185
    6bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    6bd4:	e9 ef       	ldi	r30, 0xF9	; 249
    6bd6:	f3 e2       	ldi	r31, 0x23	; 35
    6bd8:	02 c0       	rjmp	.+4      	; 0x6bde <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6bda:	81 91       	ld	r24, Z+
    6bdc:	8d 93       	st	X+, r24
    6bde:	24 e2       	ldi	r18, 0x24	; 36
    6be0:	ec 30       	cpi	r30, 0x0C	; 12
    6be2:	f2 07       	cpc	r31, r18
    6be4:	d1 f7       	brne	.-12     	; 0x6bda <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    6be6:	a7 01       	movw	r20, r14
    6be8:	42 50       	subi	r20, 0x02	; 2
    6bea:	5e 4f       	sbci	r21, 0xFE	; 254
    6bec:	48 a3       	std	Y+32, r20	; 0x20
    6bee:	59 a3       	std	Y+33, r21	; 0x21
    6bf0:	85 e5       	ldi	r24, 0x55	; 85
    6bf2:	9a ea       	ldi	r25, 0xAA	; 170
    6bf4:	da 01       	movw	r26, r20
    6bf6:	8d 93       	st	X+, r24
    6bf8:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    6bfa:	83 2d       	mov	r24, r3
    6bfc:	b7 01       	movw	r22, r14
    6bfe:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6c00:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6c02:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6c04:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6c06:	01 e0       	ldi	r16, 0x01	; 1
    6c08:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6c0c:	89 2b       	or	r24, r25
    6c0e:	09 f0       	breq	.+2      	; 0x6c12 <f_mkfs+0x696>
    6c10:	1a c1       	rjmp	.+564    	; 0x6e46 <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    6c12:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6c14:	b3 30       	cpi	r27, 0x03	; 3
    6c16:	61 f4       	brne	.+24     	; 0x6c30 <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    6c18:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6c1a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6c1c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6c1e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6c20:	2a 5f       	subi	r18, 0xFA	; 250
    6c22:	3f 4f       	sbci	r19, 0xFF	; 255
    6c24:	4f 4f       	sbci	r20, 0xFF	; 255
    6c26:	5f 4f       	sbci	r21, 0xFF	; 255
    6c28:	83 2d       	mov	r24, r3
    6c2a:	b7 01       	movw	r22, r14
    6c2c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6c30:	f7 01       	movw	r30, r14
    6c32:	01 c0       	rjmp	.+2      	; 0x6c36 <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6c34:	11 92       	st	Z+, r1
    6c36:	ec 15       	cp	r30, r12
    6c38:	fd 05       	cpc	r31, r13
    6c3a:	e1 f7       	brne	.-8      	; 0x6c34 <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    6c3c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6c3e:	e3 30       	cpi	r30, 0x03	; 3
    6c40:	e9 f0       	breq	.+58     	; 0x6c7c <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    6c42:	e1 30       	cpi	r30, 0x01	; 1
    6c44:	29 f0       	breq	.+10     	; 0x6c50 <f_mkfs+0x6d4>
    6c46:	20 e0       	ldi	r18, 0x00	; 0
    6c48:	3f ef       	ldi	r19, 0xFF	; 255
    6c4a:	4f ef       	ldi	r20, 0xFF	; 255
    6c4c:	5f ef       	ldi	r21, 0xFF	; 255
    6c4e:	04 c0       	rjmp	.+8      	; 0x6c58 <f_mkfs+0x6dc>
    6c50:	20 e0       	ldi	r18, 0x00	; 0
    6c52:	3f ef       	ldi	r19, 0xFF	; 255
    6c54:	4f ef       	ldi	r20, 0xFF	; 255
    6c56:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    6c58:	81 2f       	mov	r24, r17
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	a0 e0       	ldi	r26, 0x00	; 0
    6c5e:	b0 e0       	ldi	r27, 0x00	; 0
    6c60:	82 2b       	or	r24, r18
    6c62:	93 2b       	or	r25, r19
    6c64:	a4 2b       	or	r26, r20
    6c66:	b5 2b       	or	r27, r21
    6c68:	8d 83       	std	Y+5, r24	; 0x05
    6c6a:	9e 83       	std	Y+6, r25	; 0x06
    6c6c:	af 83       	std	Y+7, r26	; 0x07
    6c6e:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    6c70:	f4 01       	movw	r30, r8
    6c72:	82 ab       	std	Z+50, r24	; 0x32
    6c74:	93 ab       	std	Z+51, r25	; 0x33
    6c76:	a4 ab       	std	Z+52, r26	; 0x34
    6c78:	b5 ab       	std	Z+53, r27	; 0x35
    6c7a:	1a c0       	rjmp	.+52     	; 0x6cb0 <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    6c7c:	88 ef       	ldi	r24, 0xF8	; 248
    6c7e:	9f ef       	ldi	r25, 0xFF	; 255
    6c80:	af ef       	ldi	r26, 0xFF	; 255
    6c82:	bf ef       	ldi	r27, 0xFF	; 255
    6c84:	f4 01       	movw	r30, r8
    6c86:	82 ab       	std	Z+50, r24	; 0x32
    6c88:	93 ab       	std	Z+51, r25	; 0x33
    6c8a:	a4 ab       	std	Z+52, r26	; 0x34
    6c8c:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    6c8e:	8f ef       	ldi	r24, 0xFF	; 255
    6c90:	9f ef       	ldi	r25, 0xFF	; 255
    6c92:	af ef       	ldi	r26, 0xFF	; 255
    6c94:	bf ef       	ldi	r27, 0xFF	; 255
    6c96:	f7 01       	movw	r30, r14
    6c98:	84 83       	std	Z+4, r24	; 0x04
    6c9a:	95 83       	std	Z+5, r25	; 0x05
    6c9c:	a6 83       	std	Z+6, r26	; 0x06
    6c9e:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    6ca0:	8f ef       	ldi	r24, 0xFF	; 255
    6ca2:	9f ef       	ldi	r25, 0xFF	; 255
    6ca4:	af ef       	ldi	r26, 0xFF	; 255
    6ca6:	bf e0       	ldi	r27, 0x0F	; 15
    6ca8:	80 87       	std	Z+8, r24	; 0x08
    6caa:	91 87       	std	Z+9, r25	; 0x09
    6cac:	a2 87       	std	Z+10, r26	; 0x0a
    6cae:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6cb0:	83 2d       	mov	r24, r3
    6cb2:	b7 01       	movw	r22, r14
    6cb4:	2d 85       	ldd	r18, Y+13	; 0x0d
    6cb6:	3e 85       	ldd	r19, Y+14	; 0x0e
    6cb8:	4f 85       	ldd	r20, Y+15	; 0x0f
    6cba:	58 89       	ldd	r21, Y+16	; 0x10
    6cbc:	01 e0       	ldi	r16, 0x01	; 1
    6cbe:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6cc2:	89 2b       	or	r24, r25
    6cc4:	21 f0       	breq	.+8      	; 0x6cce <f_mkfs+0x752>
    6cc6:	bf c0       	rjmp	.+382    	; 0x6e46 <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6cc8:	d5 01       	movw	r26, r10
    6cca:	1d 92       	st	X+, r1
    6ccc:	5d 01       	movw	r10, r26
    6cce:	ac 14       	cp	r10, r12
    6cd0:	bd 04       	cpc	r11, r13
    6cd2:	d1 f7       	brne	.-12     	; 0x6cc8 <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6cd4:	ad 84       	ldd	r10, Y+13	; 0x0d
    6cd6:	be 84       	ldd	r11, Y+14	; 0x0e
    6cd8:	cf 84       	ldd	r12, Y+15	; 0x0f
    6cda:	d8 88       	ldd	r13, Y+16	; 0x10
    6cdc:	08 94       	sec
    6cde:	a1 1c       	adc	r10, r1
    6ce0:	b1 1c       	adc	r11, r1
    6ce2:	c1 1c       	adc	r12, r1
    6ce4:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6ce6:	81 e0       	ldi	r24, 0x01	; 1
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	a0 e0       	ldi	r26, 0x00	; 0
    6cec:	b0 e0       	ldi	r27, 0x00	; 0
    6cee:	16 c0       	rjmp	.+44     	; 0x6d1c <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6cf0:	83 2d       	mov	r24, r3
    6cf2:	b7 01       	movw	r22, r14
    6cf4:	a6 01       	movw	r20, r12
    6cf6:	95 01       	movw	r18, r10
    6cf8:	01 e0       	ldi	r16, 0x01	; 1
    6cfa:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6cfe:	89 2b       	or	r24, r25
    6d00:	09 f0       	breq	.+2      	; 0x6d04 <f_mkfs+0x788>
    6d02:	a1 c0       	rjmp	.+322    	; 0x6e46 <f_mkfs+0x8ca>
    6d04:	08 94       	sec
    6d06:	a1 1c       	adc	r10, r1
    6d08:	b1 1c       	adc	r11, r1
    6d0a:	c1 1c       	adc	r12, r1
    6d0c:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    6d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    6d10:	9e 81       	ldd	r25, Y+6	; 0x06
    6d12:	af 81       	ldd	r26, Y+7	; 0x07
    6d14:	b8 85       	ldd	r27, Y+8	; 0x08
    6d16:	01 96       	adiw	r24, 0x01	; 1
    6d18:	a1 1d       	adc	r26, r1
    6d1a:	b1 1d       	adc	r27, r1
    6d1c:	8d 83       	std	Y+5, r24	; 0x05
    6d1e:	9e 83       	std	Y+6, r25	; 0x06
    6d20:	af 83       	std	Y+7, r26	; 0x07
    6d22:	b8 87       	std	Y+8, r27	; 0x08
    6d24:	8d 81       	ldd	r24, Y+5	; 0x05
    6d26:	9e 81       	ldd	r25, Y+6	; 0x06
    6d28:	af 81       	ldd	r26, Y+7	; 0x07
    6d2a:	b8 85       	ldd	r27, Y+8	; 0x08
    6d2c:	29 85       	ldd	r18, Y+9	; 0x09
    6d2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d30:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d32:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d34:	82 17       	cp	r24, r18
    6d36:	93 07       	cpc	r25, r19
    6d38:	a4 07       	cpc	r26, r20
    6d3a:	b5 07       	cpc	r27, r21
    6d3c:	c8 f2       	brcs	.-78     	; 0x6cf0 <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    6d3e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6d40:	33 30       	cpi	r19, 0x03	; 3
    6d42:	09 f0       	breq	.+2      	; 0x6d46 <f_mkfs+0x7ca>
    6d44:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    6d46:	25 01       	movw	r4, r10
    6d48:	36 01       	movw	r6, r12
    6d4a:	08 94       	sec
    6d4c:	41 1c       	adc	r4, r1
    6d4e:	51 1c       	adc	r5, r1
    6d50:	61 1c       	adc	r6, r1
    6d52:	71 1c       	adc	r7, r1
    6d54:	83 2d       	mov	r24, r3
    6d56:	b7 01       	movw	r22, r14
    6d58:	a6 01       	movw	r20, r12
    6d5a:	95 01       	movw	r18, r10
    6d5c:	01 e0       	ldi	r16, 0x01	; 1
    6d5e:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    6d62:	89 2b       	or	r24, r25
    6d64:	09 f0       	breq	.+2      	; 0x6d68 <f_mkfs+0x7ec>
    6d66:	6f c0       	rjmp	.+222    	; 0x6e46 <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    6d68:	2a 94       	dec	r2
    6d6a:	19 f0       	breq	.+6      	; 0x6d72 <f_mkfs+0x7f6>
    6d6c:	63 01       	movw	r12, r6
    6d6e:	52 01       	movw	r10, r4
    6d70:	ea cf       	rjmp	.-44     	; 0x6d46 <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    6d72:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6d74:	43 30       	cpi	r20, 0x03	; 3
    6d76:	09 f0       	breq	.+2      	; 0x6d7a <f_mkfs+0x7fe>
    6d78:	57 c0       	rjmp	.+174    	; 0x6e28 <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    6d7a:	85 e5       	ldi	r24, 0x55	; 85
    6d7c:	9a ea       	ldi	r25, 0xAA	; 170
    6d7e:	a8 a1       	ldd	r26, Y+32	; 0x20
    6d80:	b9 a1       	ldd	r27, Y+33	; 0x21
    6d82:	8d 93       	st	X+, r24
    6d84:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    6d86:	82 e5       	ldi	r24, 0x52	; 82
    6d88:	92 e5       	ldi	r25, 0x52	; 82
    6d8a:	a1 e6       	ldi	r26, 0x61	; 97
    6d8c:	b1 e4       	ldi	r27, 0x41	; 65
    6d8e:	f4 01       	movw	r30, r8
    6d90:	82 ab       	std	Z+50, r24	; 0x32
    6d92:	93 ab       	std	Z+51, r25	; 0x33
    6d94:	a4 ab       	std	Z+52, r26	; 0x34
    6d96:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    6d98:	24 ee       	ldi	r18, 0xE4	; 228
    6d9a:	31 e0       	ldi	r19, 0x01	; 1
    6d9c:	e2 0e       	add	r14, r18
    6d9e:	f3 1e       	adc	r15, r19
    6da0:	82 e7       	ldi	r24, 0x72	; 114
    6da2:	92 e7       	ldi	r25, 0x72	; 114
    6da4:	a1 e4       	ldi	r26, 0x41	; 65
    6da6:	b1 e6       	ldi	r27, 0x61	; 97
    6da8:	f7 01       	movw	r30, r14
    6daa:	81 93       	st	Z+, r24
    6dac:	91 93       	st	Z+, r25
    6dae:	a1 93       	st	Z+, r26
    6db0:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    6db2:	2a a1       	ldd	r18, Y+34	; 0x22
    6db4:	3b a1       	ldd	r19, Y+35	; 0x23
    6db6:	4c a1       	ldd	r20, Y+36	; 0x24
    6db8:	5d a1       	ldd	r21, Y+37	; 0x25
    6dba:	21 50       	subi	r18, 0x01	; 1
    6dbc:	30 40       	sbci	r19, 0x00	; 0
    6dbe:	40 40       	sbci	r20, 0x00	; 0
    6dc0:	50 40       	sbci	r21, 0x00	; 0
    6dc2:	df 01       	movw	r26, r30
    6dc4:	2d 93       	st	X+, r18
    6dc6:	3d 93       	st	X+, r19
    6dc8:	4d 93       	st	X+, r20
    6dca:	5d 93       	st	X+, r21
    6dcc:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    6dce:	8f ef       	ldi	r24, 0xFF	; 255
    6dd0:	9f ef       	ldi	r25, 0xFF	; 255
    6dd2:	af ef       	ldi	r26, 0xFF	; 255
    6dd4:	bf ef       	ldi	r27, 0xFF	; 255
    6dd6:	f7 01       	movw	r30, r14
    6dd8:	80 83       	st	Z, r24
    6dda:	91 83       	std	Z+1, r25	; 0x01
    6ddc:	a2 83       	std	Z+2, r26	; 0x02
    6dde:	b3 83       	std	Z+3, r27	; 0x03
    6de0:	24 e1       	ldi	r18, 0x14	; 20
    6de2:	3e ef       	ldi	r19, 0xFE	; 254
    6de4:	e2 0e       	add	r14, r18
    6de6:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    6de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6dec:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6dee:	be 8d       	ldd	r27, Y+30	; 0x1e
    6df0:	01 96       	adiw	r24, 0x01	; 1
    6df2:	a1 1d       	adc	r26, r1
    6df4:	b1 1d       	adc	r27, r1
    6df6:	8b 8f       	std	Y+27, r24	; 0x1b
    6df8:	9c 8f       	std	Y+28, r25	; 0x1c
    6dfa:	ad 8f       	std	Y+29, r26	; 0x1d
    6dfc:	be 8f       	std	Y+30, r27	; 0x1e
    6dfe:	83 2d       	mov	r24, r3
    6e00:	b7 01       	movw	r22, r14
    6e02:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6e04:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6e06:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6e08:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6e0a:	01 e0       	ldi	r16, 0x01	; 1
    6e0c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    6e10:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6e12:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6e14:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6e16:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6e18:	2a 5f       	subi	r18, 0xFA	; 250
    6e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1c:	4f 4f       	sbci	r20, 0xFF	; 255
    6e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e20:	83 2d       	mov	r24, r3
    6e22:	b7 01       	movw	r22, r14
    6e24:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    6e28:	83 2d       	mov	r24, r3
    6e2a:	60 e0       	ldi	r22, 0x00	; 0
    6e2c:	40 e0       	ldi	r20, 0x00	; 0
    6e2e:	50 e0       	ldi	r21, 0x00	; 0
    6e30:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <disk_ioctl>
    6e34:	00 97       	sbiw	r24, 0x00	; 0
    6e36:	11 f0       	breq	.+4      	; 0x6e3c <f_mkfs+0x8c0>
    6e38:	81 e0       	ldi	r24, 0x01	; 1
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	9c 01       	movw	r18, r24
    6e3e:	05 c0       	rjmp	.+10     	; 0x6e4a <f_mkfs+0x8ce>
    6e40:	2e e0       	ldi	r18, 0x0E	; 14
    6e42:	30 e0       	ldi	r19, 0x00	; 0
    6e44:	02 c0       	rjmp	.+4      	; 0x6e4a <f_mkfs+0x8ce>
    6e46:	21 e0       	ldi	r18, 0x01	; 1
    6e48:	30 e0       	ldi	r19, 0x00	; 0
}
    6e4a:	c9 01       	movw	r24, r18
    6e4c:	a5 96       	adiw	r28, 0x25	; 37
    6e4e:	e2 e1       	ldi	r30, 0x12	; 18
    6e50:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    6e54:	7c 01       	movw	r14, r24
    6e56:	8d 01       	movw	r16, r26
    6e58:	ee 0c       	add	r14, r14
    6e5a:	ff 1c       	adc	r15, r15
    6e5c:	00 1f       	adc	r16, r16
    6e5e:	11 1f       	adc	r17, r17
    6e60:	e8 0e       	add	r14, r24
    6e62:	f9 1e       	adc	r15, r25
    6e64:	0a 1f       	adc	r16, r26
    6e66:	1b 1f       	adc	r17, r27
    6e68:	08 94       	sec
    6e6a:	e1 1c       	adc	r14, r1
    6e6c:	f1 1c       	adc	r15, r1
    6e6e:	01 1d       	adc	r16, r1
    6e70:	11 1d       	adc	r17, r1
    6e72:	16 95       	lsr	r17
    6e74:	07 95       	ror	r16
    6e76:	f7 94       	ror	r15
    6e78:	e7 94       	ror	r14
    6e7a:	82 e0       	ldi	r24, 0x02	; 2
    6e7c:	92 e0       	ldi	r25, 0x02	; 2
    6e7e:	a0 e0       	ldi	r26, 0x00	; 0
    6e80:	b0 e0       	ldi	r27, 0x00	; 0
    6e82:	e8 0e       	add	r14, r24
    6e84:	f9 1e       	adc	r15, r25
    6e86:	0a 1f       	adc	r16, r26
    6e88:	1b 1f       	adc	r17, r27
    6e8a:	29 e0       	ldi	r18, 0x09	; 9
    6e8c:	16 95       	lsr	r17
    6e8e:	07 95       	ror	r16
    6e90:	f7 94       	ror	r15
    6e92:	e7 94       	ror	r14
    6e94:	2a 95       	dec	r18
    6e96:	d1 f7       	brne	.-12     	; 0x6e8c <f_mkfs+0x910>
		n_rsv = 1 + partition;
    6e98:	82 2d       	mov	r24, r2
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	01 96       	adiw	r24, 0x01	; 1
    6e9e:	2c 01       	movw	r4, r24
    6ea0:	66 24       	eor	r6, r6
    6ea2:	57 fc       	sbrc	r5, 7
    6ea4:	60 94       	com	r6
    6ea6:	76 2c       	mov	r7, r6
    6ea8:	20 e2       	ldi	r18, 0x20	; 32
    6eaa:	30 e0       	ldi	r19, 0x00	; 0
    6eac:	40 e0       	ldi	r20, 0x00	; 0
    6eae:	50 e0       	ldi	r21, 0x00	; 0
    6eb0:	2f 8b       	std	Y+23, r18	; 0x17
    6eb2:	38 8f       	std	Y+24, r19	; 0x18
    6eb4:	49 8f       	std	Y+25, r20	; 0x19
    6eb6:	5a 8f       	std	Y+26, r21	; 0x1a
    6eb8:	31 e0       	ldi	r19, 0x01	; 1
    6eba:	3f 8f       	std	Y+31, r19	; 0x1f
    6ebc:	89 cc       	rjmp	.-1774   	; 0x67d0 <f_mkfs+0x254>

00006ebe <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6ebe:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    6ec0:	00 97       	sbiw	r24, 0x00	; 0
    6ec2:	99 f0       	breq	.+38     	; 0x6eea <validate+0x2c>
    6ec4:	80 81       	ld	r24, Z
    6ec6:	88 23       	and	r24, r24
    6ec8:	81 f0       	breq	.+32     	; 0x6eea <validate+0x2c>
    6eca:	85 81       	ldd	r24, Z+5	; 0x05
    6ecc:	96 81       	ldd	r25, Z+6	; 0x06
    6ece:	86 17       	cp	r24, r22
    6ed0:	97 07       	cpc	r25, r23
    6ed2:	59 f4       	brne	.+22     	; 0x6eea <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    6ed4:	81 81       	ldd	r24, Z+1	; 0x01
    6ed6:	0e 94 01 52 	call	0xa402	; 0xa402 <disk_status>
    6eda:	80 fd       	sbrc	r24, 0
    6edc:	03 c0       	rjmp	.+6      	; 0x6ee4 <validate+0x26>
    6ede:	20 e0       	ldi	r18, 0x00	; 0
    6ee0:	30 e0       	ldi	r19, 0x00	; 0
    6ee2:	05 c0       	rjmp	.+10     	; 0x6eee <validate+0x30>
    6ee4:	23 e0       	ldi	r18, 0x03	; 3
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	02 c0       	rjmp	.+4      	; 0x6eee <validate+0x30>
    6eea:	29 e0       	ldi	r18, 0x09	; 9
    6eec:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    6eee:	c9 01       	movw	r24, r18
    6ef0:	08 95       	ret

00006ef2 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    6ef2:	0f 93       	push	r16
    6ef4:	cf 93       	push	r28
    6ef6:	df 93       	push	r29
    6ef8:	ec 01       	movw	r28, r24
    6efa:	9a 01       	movw	r18, r20
    6efc:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6efe:	bc 01       	movw	r22, r24
    6f00:	6e 5c       	subi	r22, 0xCE	; 206
    6f02:	7f 4f       	sbci	r23, 0xFF	; 255
    6f04:	89 81       	ldd	r24, Y+1	; 0x01
    6f06:	01 e0       	ldi	r16, 0x01	; 1
    6f08:	0e 94 08 52 	call	0xa410	; 0xa410 <disk_read>
    6f0c:	89 2b       	or	r24, r25
    6f0e:	11 f0       	breq	.+4      	; 0x6f14 <check_fs+0x22>
    6f10:	23 e0       	ldi	r18, 0x03	; 3
    6f12:	37 c0       	rjmp	.+110    	; 0x6f82 <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6f14:	c0 5d       	subi	r28, 0xD0	; 208
    6f16:	dd 4f       	sbci	r29, 0xFD	; 253
    6f18:	88 81       	ld	r24, Y
    6f1a:	99 81       	ldd	r25, Y+1	; 0x01
    6f1c:	c0 53       	subi	r28, 0x30	; 48
    6f1e:	d2 40       	sbci	r29, 0x02	; 2
    6f20:	85 55       	subi	r24, 0x55	; 85
    6f22:	9a 4a       	sbci	r25, 0xAA	; 170
    6f24:	11 f0       	breq	.+4      	; 0x6f2a <check_fs+0x38>
    6f26:	22 e0       	ldi	r18, 0x02	; 2
    6f28:	2c c0       	rjmp	.+88     	; 0x6f82 <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6f2a:	de 01       	movw	r26, r28
    6f2c:	a8 59       	subi	r26, 0x98	; 152
    6f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    6f30:	ea e5       	ldi	r30, 0x5A	; 90
    6f32:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6f34:	84 e2       	ldi	r24, 0x24	; 36
    6f36:	ed 35       	cpi	r30, 0x5D	; 93
    6f38:	f8 07       	cpc	r31, r24
    6f3a:	11 f4       	brne	.+4      	; 0x6f40 <check_fs+0x4e>
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	21 c0       	rjmp	.+66     	; 0x6f82 <check_fs+0x90>
    6f40:	9c 91       	ld	r25, X
    6f42:	80 81       	ld	r24, Z
    6f44:	98 17       	cp	r25, r24
    6f46:	19 f4       	brne	.+6      	; 0x6f4e <check_fs+0x5c>
    6f48:	11 96       	adiw	r26, 0x01	; 1
    6f4a:	31 96       	adiw	r30, 0x01	; 1
    6f4c:	f3 cf       	rjmp	.-26     	; 0x6f34 <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    6f4e:	de 01       	movw	r26, r28
    6f50:	ac 57       	subi	r26, 0x7C	; 124
    6f52:	bf 4f       	sbci	r27, 0xFF	; 255
    6f54:	ea e5       	ldi	r30, 0x5A	; 90
    6f56:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    6f58:	24 e2       	ldi	r18, 0x24	; 36
    6f5a:	ed 35       	cpi	r30, 0x5D	; 93
    6f5c:	f2 07       	cpc	r31, r18
    6f5e:	49 f0       	breq	.+18     	; 0x6f72 <check_fs+0x80>
    6f60:	9c 91       	ld	r25, X
    6f62:	80 81       	ld	r24, Z
    6f64:	98 17       	cp	r25, r24
    6f66:	11 f0       	breq	.+4      	; 0x6f6c <check_fs+0x7a>
    6f68:	21 e0       	ldi	r18, 0x01	; 1
    6f6a:	0b c0       	rjmp	.+22     	; 0x6f82 <check_fs+0x90>
    6f6c:	11 96       	adiw	r26, 0x01	; 1
    6f6e:	31 96       	adiw	r30, 0x01	; 1
    6f70:	f3 cf       	rjmp	.-26     	; 0x6f58 <check_fs+0x66>
    6f72:	20 e0       	ldi	r18, 0x00	; 0
    6f74:	c6 5a       	subi	r28, 0xA6	; 166
    6f76:	df 4f       	sbci	r29, 0xFF	; 255
    6f78:	88 81       	ld	r24, Y
    6f7a:	87 ff       	sbrs	r24, 7
    6f7c:	21 e0       	ldi	r18, 0x01	; 1
    6f7e:	81 e0       	ldi	r24, 0x01	; 1
    6f80:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    6f82:	82 2f       	mov	r24, r18
    6f84:	df 91       	pop	r29
    6f86:	cf 91       	pop	r28
    6f88:	0f 91       	pop	r16
    6f8a:	08 95       	ret

00006f8c <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    6f8c:	a0 e0       	ldi	r26, 0x00	; 0
    6f8e:	b0 e0       	ldi	r27, 0x00	; 0
    6f90:	ec ec       	ldi	r30, 0xCC	; 204
    6f92:	f7 e3       	ldi	r31, 0x37	; 55
    6f94:	0c 94 22 59 	jmp	0xb244	; 0xb244 <__prologue_saves__+0x8>
    6f98:	fc 01       	movw	r30, r24
    6f9a:	9b 01       	movw	r18, r22
    6f9c:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    6f9e:	a0 81       	ld	r26, Z
    6fa0:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    6fa2:	8c 91       	ld	r24, X
    6fa4:	08 2f       	mov	r16, r24
    6fa6:	11 27       	eor	r17, r17
    6fa8:	07 fd       	sbrc	r16, 7
    6faa:	10 95       	com	r17
    6fac:	00 53       	subi	r16, 0x30	; 48
    6fae:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    6fb0:	0a 30       	cpi	r16, 0x0A	; 10
    6fb2:	11 05       	cpc	r17, r1
    6fb4:	48 f4       	brcc	.+18     	; 0x6fc8 <auto_mount+0x3c>
    6fb6:	11 96       	adiw	r26, 0x01	; 1
    6fb8:	8c 91       	ld	r24, X
    6fba:	11 97       	sbiw	r26, 0x01	; 1
    6fbc:	8a 33       	cpi	r24, 0x3A	; 58
    6fbe:	21 f4       	brne	.+8      	; 0x6fc8 <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    6fc0:	12 96       	adiw	r26, 0x02	; 2
    6fc2:	a0 83       	st	Z, r26
    6fc4:	b1 83       	std	Z+1, r27	; 0x01
    6fc6:	04 c0       	rjmp	.+8      	; 0x6fd0 <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    6fc8:	80 91 74 25 	lds	r24, 0x2574
    6fcc:	08 2f       	mov	r16, r24
    6fce:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    6fd0:	02 30       	cpi	r16, 0x02	; 2
    6fd2:	11 05       	cpc	r17, r1
    6fd4:	18 f0       	brcs	.+6      	; 0x6fdc <auto_mount+0x50>
    6fd6:	2b e0       	ldi	r18, 0x0B	; 11
    6fd8:	30 e0       	ldi	r19, 0x00	; 0
    6fda:	84 c1       	rjmp	.+776    	; 0x72e4 <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    6fdc:	f8 01       	movw	r30, r16
    6fde:	ee 0f       	add	r30, r30
    6fe0:	ff 1f       	adc	r31, r31
    6fe2:	e2 59       	subi	r30, 0x92	; 146
    6fe4:	fa 4d       	sbci	r31, 0xDA	; 218
    6fe6:	c0 81       	ld	r28, Z
    6fe8:	d1 81       	ldd	r29, Z+1	; 0x01
    6fea:	f9 01       	movw	r30, r18
    6fec:	c0 83       	st	Z, r28
    6fee:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    6ff0:	20 97       	sbiw	r28, 0x00	; 0
    6ff2:	19 f4       	brne	.+6      	; 0x6ffa <auto_mount+0x6e>
    6ff4:	2c e0       	ldi	r18, 0x0C	; 12
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	75 c1       	rjmp	.+746    	; 0x72e4 <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    6ffa:	88 81       	ld	r24, Y
    6ffc:	88 23       	and	r24, r24
    6ffe:	59 f0       	breq	.+22     	; 0x7016 <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    7000:	89 81       	ldd	r24, Y+1	; 0x01
    7002:	0e 94 01 52 	call	0xa402	; 0xa402 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    7006:	80 fd       	sbrc	r24, 0
    7008:	06 c0       	rjmp	.+12     	; 0x7016 <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    700a:	ff 20       	and	r15, r15
    700c:	09 f4       	brne	.+2      	; 0x7010 <auto_mount+0x84>
    700e:	65 c1       	rjmp	.+714    	; 0x72da <auto_mount+0x34e>
    7010:	82 fd       	sbrc	r24, 2
    7012:	60 c1       	rjmp	.+704    	; 0x72d4 <auto_mount+0x348>
    7014:	62 c1       	rjmp	.+708    	; 0x72da <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    7016:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    7018:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    701a:	80 2f       	mov	r24, r16
    701c:	0e 94 f7 54 	call	0xa9ee	; 0xa9ee <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    7020:	80 ff       	sbrs	r24, 0
    7022:	03 c0       	rjmp	.+6      	; 0x702a <auto_mount+0x9e>
    7024:	23 e0       	ldi	r18, 0x03	; 3
    7026:	30 e0       	ldi	r19, 0x00	; 0
    7028:	5d c1       	rjmp	.+698    	; 0x72e4 <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    702a:	ff 20       	and	r15, r15
    702c:	11 f0       	breq	.+4      	; 0x7032 <auto_mount+0xa6>
    702e:	82 fd       	sbrc	r24, 2
    7030:	51 c1       	rjmp	.+674    	; 0x72d4 <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    7032:	ce 01       	movw	r24, r28
    7034:	40 e0       	ldi	r20, 0x00	; 0
    7036:	50 e0       	ldi	r21, 0x00	; 0
    7038:	60 e0       	ldi	r22, 0x00	; 0
    703a:	70 e0       	ldi	r23, 0x00	; 0
    703c:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    7040:	81 30       	cpi	r24, 0x01	; 1
    7042:	21 f0       	breq	.+8      	; 0x704c <auto_mount+0xc0>
    7044:	66 24       	eor	r6, r6
    7046:	77 24       	eor	r7, r7
    7048:	43 01       	movw	r8, r6
    704a:	10 c0       	rjmp	.+32     	; 0x706c <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    704c:	fe 01       	movw	r30, r28
    704e:	e0 51       	subi	r30, 0x10	; 16
    7050:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    7052:	84 81       	ldd	r24, Z+4	; 0x04
    7054:	88 23       	and	r24, r24
    7056:	09 f4       	brne	.+2      	; 0x705a <auto_mount+0xce>
    7058:	43 c1       	rjmp	.+646    	; 0x72e0 <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    705a:	60 84       	ldd	r6, Z+8	; 0x08
    705c:	71 84       	ldd	r7, Z+9	; 0x09
    705e:	82 84       	ldd	r8, Z+10	; 0x0a
    7060:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    7062:	ce 01       	movw	r24, r28
    7064:	b4 01       	movw	r22, r8
    7066:	a3 01       	movw	r20, r6
    7068:	0e 94 79 37 	call	0x6ef2	; 0x6ef2 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    706c:	83 30       	cpi	r24, 0x03	; 3
    706e:	19 f4       	brne	.+6      	; 0x7076 <auto_mount+0xea>
    7070:	21 e0       	ldi	r18, 0x01	; 1
    7072:	30 e0       	ldi	r19, 0x00	; 0
    7074:	37 c1       	rjmp	.+622    	; 0x72e4 <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    7076:	88 23       	and	r24, r24
    7078:	09 f0       	breq	.+2      	; 0x707c <auto_mount+0xf0>
    707a:	32 c1       	rjmp	.+612    	; 0x72e0 <auto_mount+0x354>
    707c:	8d ad       	ldd	r24, Y+61	; 0x3d
    707e:	9e ad       	ldd	r25, Y+62	; 0x3e
    7080:	80 50       	subi	r24, 0x00	; 0
    7082:	92 40       	sbci	r25, 0x02	; 2
    7084:	09 f0       	breq	.+2      	; 0x7088 <auto_mount+0xfc>
    7086:	2c c1       	rjmp	.+600    	; 0x72e0 <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    7088:	c8 5b       	subi	r28, 0xB8	; 184
    708a:	df 4f       	sbci	r29, 0xFF	; 255
    708c:	88 81       	ld	r24, Y
    708e:	99 81       	ldd	r25, Y+1	; 0x01
    7090:	c8 54       	subi	r28, 0x48	; 72
    7092:	d0 40       	sbci	r29, 0x00	; 0
    7094:	bc 01       	movw	r22, r24
    7096:	80 e0       	ldi	r24, 0x00	; 0
    7098:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    709a:	61 15       	cp	r22, r1
    709c:	71 05       	cpc	r23, r1
    709e:	81 05       	cpc	r24, r1
    70a0:	91 05       	cpc	r25, r1
    70a2:	41 f4       	brne	.+16     	; 0x70b4 <auto_mount+0x128>
    70a4:	ca 5a       	subi	r28, 0xAA	; 170
    70a6:	df 4f       	sbci	r29, 0xFF	; 255
    70a8:	68 81       	ld	r22, Y
    70aa:	79 81       	ldd	r23, Y+1	; 0x01
    70ac:	8a 81       	ldd	r24, Y+2	; 0x02
    70ae:	9b 81       	ldd	r25, Y+3	; 0x03
    70b0:	c6 55       	subi	r28, 0x56	; 86
    70b2:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    70b4:	6a 8f       	std	Y+26, r22	; 0x1a
    70b6:	7b 8f       	std	Y+27, r23	; 0x1b
    70b8:	8c 8f       	std	Y+28, r24	; 0x1c
    70ba:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    70bc:	ce 5b       	subi	r28, 0xBE	; 190
    70be:	df 4f       	sbci	r29, 0xFF	; 255
    70c0:	28 81       	ld	r18, Y
    70c2:	c2 54       	subi	r28, 0x42	; 66
    70c4:	d0 40       	sbci	r29, 0x00	; 0
    70c6:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    70c8:	30 e0       	ldi	r19, 0x00	; 0
    70ca:	40 e0       	ldi	r20, 0x00	; 0
    70cc:	50 e0       	ldi	r21, 0x00	; 0
    70ce:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    70d2:	5b 01       	movw	r10, r22
    70d4:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    70d6:	fe 01       	movw	r30, r28
    70d8:	e0 5c       	subi	r30, 0xC0	; 192
    70da:	ff 4f       	sbci	r31, 0xFF	; 255
    70dc:	80 81       	ld	r24, Z
    70de:	91 81       	ldd	r25, Z+1	; 0x01
    70e0:	a0 e0       	ldi	r26, 0x00	; 0
    70e2:	b0 e0       	ldi	r27, 0x00	; 0
    70e4:	86 0d       	add	r24, r6
    70e6:	97 1d       	adc	r25, r7
    70e8:	a8 1d       	adc	r26, r8
    70ea:	b9 1d       	adc	r27, r9
    70ec:	8a a3       	std	Y+34, r24	; 0x22
    70ee:	9b a3       	std	Y+35, r25	; 0x23
    70f0:	ac a3       	std	Y+36, r26	; 0x24
    70f2:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    70f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    70f6:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    70f8:	cd 5b       	subi	r28, 0xBD	; 189
    70fa:	df 4f       	sbci	r29, 0xFF	; 255
    70fc:	28 81       	ld	r18, Y
    70fe:	39 81       	ldd	r19, Y+1	; 0x01
    7100:	c3 54       	subi	r28, 0x43	; 67
    7102:	d0 40       	sbci	r29, 0x00	; 0
    7104:	2f 83       	std	Y+7, r18	; 0x07
    7106:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    7108:	cb 5b       	subi	r28, 0xBB	; 187
    710a:	df 4f       	sbci	r29, 0xFF	; 255
    710c:	88 81       	ld	r24, Y
    710e:	99 81       	ldd	r25, Y+1	; 0x01
    7110:	c5 54       	subi	r28, 0x45	; 69
    7112:	d0 40       	sbci	r29, 0x00	; 0
    7114:	7c 01       	movw	r14, r24
    7116:	00 e0       	ldi	r16, 0x00	; 0
    7118:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    711a:	e1 14       	cp	r14, r1
    711c:	f1 04       	cpc	r15, r1
    711e:	01 05       	cpc	r16, r1
    7120:	11 05       	cpc	r17, r1
    7122:	41 f4       	brne	.+16     	; 0x7134 <auto_mount+0x1a8>
    7124:	ce 5a       	subi	r28, 0xAE	; 174
    7126:	df 4f       	sbci	r29, 0xFF	; 255
    7128:	e8 80       	ld	r14, Y
    712a:	f9 80       	ldd	r15, Y+1	; 0x01
    712c:	0a 81       	ldd	r16, Y+2	; 0x02
    712e:	1b 81       	ldd	r17, Y+3	; 0x03
    7130:	c2 55       	subi	r28, 0x52	; 82
    7132:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    7134:	80 81       	ld	r24, Z
    7136:	91 81       	ldd	r25, Z+1	; 0x01
    7138:	a0 e0       	ldi	r26, 0x00	; 0
    713a:	b0 e0       	ldi	r27, 0x00	; 0
    713c:	e8 1a       	sub	r14, r24
    713e:	f9 0a       	sbc	r15, r25
    7140:	0a 0b       	sbc	r16, r26
    7142:	1b 0b       	sbc	r17, r27
    7144:	ea 18       	sub	r14, r10
    7146:	fb 08       	sbc	r15, r11
    7148:	0c 09       	sbc	r16, r12
    714a:	1d 09       	sbc	r17, r13
    714c:	84 e0       	ldi	r24, 0x04	; 4
    714e:	36 95       	lsr	r19
    7150:	27 95       	ror	r18
    7152:	8a 95       	dec	r24
    7154:	e1 f7       	brne	.-8      	; 0x714e <auto_mount+0x1c2>
    7156:	c9 01       	movw	r24, r18
    7158:	a0 e0       	ldi	r26, 0x00	; 0
    715a:	b0 e0       	ldi	r27, 0x00	; 0
    715c:	e8 1a       	sub	r14, r24
    715e:	f9 0a       	sbc	r15, r25
    7160:	0a 0b       	sbc	r16, r26
    7162:	1b 0b       	sbc	r17, r27
    7164:	2a 81       	ldd	r18, Y+2	; 0x02
    7166:	30 e0       	ldi	r19, 0x00	; 0
    7168:	40 e0       	ldi	r20, 0x00	; 0
    716a:	50 e0       	ldi	r21, 0x00	; 0
    716c:	c8 01       	movw	r24, r16
    716e:	b7 01       	movw	r22, r14
    7170:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    7174:	2e 5f       	subi	r18, 0xFE	; 254
    7176:	3f 4f       	sbci	r19, 0xFF	; 255
    7178:	4f 4f       	sbci	r20, 0xFF	; 255
    717a:	5f 4f       	sbci	r21, 0xFF	; 255
    717c:	2e 8f       	std	Y+30, r18	; 0x1e
    717e:	3f 8f       	std	Y+31, r19	; 0x1f
    7180:	48 a3       	std	Y+32, r20	; 0x20
    7182:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    7184:	27 3f       	cpi	r18, 0xF7	; 247
    7186:	8f e0       	ldi	r24, 0x0F	; 15
    7188:	38 07       	cpc	r19, r24
    718a:	80 e0       	ldi	r24, 0x00	; 0
    718c:	48 07       	cpc	r20, r24
    718e:	80 e0       	ldi	r24, 0x00	; 0
    7190:	58 07       	cpc	r21, r24
    7192:	10 f4       	brcc	.+4      	; 0x7198 <auto_mount+0x20c>
    7194:	11 e0       	ldi	r17, 0x01	; 1
    7196:	07 c0       	rjmp	.+14     	; 0x71a6 <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    7198:	27 5f       	subi	r18, 0xF7	; 247
    719a:	3f 4f       	sbci	r19, 0xFF	; 255
    719c:	40 40       	sbci	r20, 0x00	; 0
    719e:	50 40       	sbci	r21, 0x00	; 0
    71a0:	08 f0       	brcs	.+2      	; 0x71a4 <auto_mount+0x218>
    71a2:	a6 c0       	rjmp	.+332    	; 0x72f0 <auto_mount+0x364>
    71a4:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    71a6:	8a a1       	ldd	r24, Y+34	; 0x22
    71a8:	9b a1       	ldd	r25, Y+35	; 0x23
    71aa:	ac a1       	ldd	r26, Y+36	; 0x24
    71ac:	bd a1       	ldd	r27, Y+37	; 0x25
    71ae:	8a 0d       	add	r24, r10
    71b0:	9b 1d       	adc	r25, r11
    71b2:	ac 1d       	adc	r26, r12
    71b4:	bd 1d       	adc	r27, r13
    71b6:	8e a3       	std	Y+38, r24	; 0x26
    71b8:	9f a3       	std	Y+39, r25	; 0x27
    71ba:	a8 a7       	std	Y+40, r26	; 0x28
    71bc:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    71be:	8f 81       	ldd	r24, Y+7	; 0x07
    71c0:	98 85       	ldd	r25, Y+8	; 0x08
    71c2:	b4 e0       	ldi	r27, 0x04	; 4
    71c4:	96 95       	lsr	r25
    71c6:	87 95       	ror	r24
    71c8:	ba 95       	dec	r27
    71ca:	e1 f7       	brne	.-8      	; 0x71c4 <auto_mount+0x238>
    71cc:	a0 e0       	ldi	r26, 0x00	; 0
    71ce:	b0 e0       	ldi	r27, 0x00	; 0
    71d0:	2a a1       	ldd	r18, Y+34	; 0x22
    71d2:	3b a1       	ldd	r19, Y+35	; 0x23
    71d4:	4c a1       	ldd	r20, Y+36	; 0x24
    71d6:	5d a1       	ldd	r21, Y+37	; 0x25
    71d8:	82 0f       	add	r24, r18
    71da:	93 1f       	adc	r25, r19
    71dc:	a4 1f       	adc	r26, r20
    71de:	b5 1f       	adc	r27, r21
    71e0:	8a 0d       	add	r24, r10
    71e2:	9b 1d       	adc	r25, r11
    71e4:	ac 1d       	adc	r26, r12
    71e6:	bd 1d       	adc	r27, r13
    71e8:	8a a7       	std	Y+42, r24	; 0x2a
    71ea:	9b a7       	std	Y+43, r25	; 0x2b
    71ec:	ac a7       	std	Y+44, r26	; 0x2c
    71ee:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    71f0:	8f ef       	ldi	r24, 0xFF	; 255
    71f2:	9f ef       	ldi	r25, 0xFF	; 255
    71f4:	af ef       	ldi	r26, 0xFF	; 255
    71f6:	bf ef       	ldi	r27, 0xFF	; 255
    71f8:	8e 87       	std	Y+14, r24	; 0x0e
    71fa:	9f 87       	std	Y+15, r25	; 0x0f
    71fc:	a8 8b       	std	Y+16, r26	; 0x10
    71fe:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    7200:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    7202:	13 30       	cpi	r17, 0x03	; 3
    7204:	09 f0       	breq	.+2      	; 0x7208 <auto_mount+0x27c>
    7206:	51 c0       	rjmp	.+162    	; 0x72aa <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    7208:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    720a:	ce 59       	subi	r28, 0x9E	; 158
    720c:	df 4f       	sbci	r29, 0xFF	; 255
    720e:	28 81       	ld	r18, Y
    7210:	39 81       	ldd	r19, Y+1	; 0x01
    7212:	c2 56       	subi	r28, 0x62	; 98
    7214:	d0 40       	sbci	r29, 0x00	; 0
    7216:	40 e0       	ldi	r20, 0x00	; 0
    7218:	50 e0       	ldi	r21, 0x00	; 0
    721a:	26 0d       	add	r18, r6
    721c:	37 1d       	adc	r19, r7
    721e:	48 1d       	adc	r20, r8
    7220:	59 1d       	adc	r21, r9
    7222:	2a 8b       	std	Y+18, r18	; 0x12
    7224:	3b 8b       	std	Y+19, r19	; 0x13
    7226:	4c 8b       	std	Y+20, r20	; 0x14
    7228:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    722a:	be 01       	movw	r22, r28
    722c:	6e 5c       	subi	r22, 0xCE	; 206
    722e:	7f 4f       	sbci	r23, 0xFF	; 255
    7230:	89 81       	ldd	r24, Y+1	; 0x01
    7232:	01 e0       	ldi	r16, 0x01	; 1
    7234:	0e 94 08 52 	call	0xa410	; 0xa410 <disk_read>
    7238:	89 2b       	or	r24, r25
    723a:	b9 f5       	brne	.+110    	; 0x72aa <auto_mount+0x31e>
    723c:	c0 5d       	subi	r28, 0xD0	; 208
    723e:	dd 4f       	sbci	r29, 0xFD	; 253
    7240:	88 81       	ld	r24, Y
    7242:	99 81       	ldd	r25, Y+1	; 0x01
    7244:	c0 53       	subi	r28, 0x30	; 48
    7246:	d2 40       	sbci	r29, 0x02	; 2
    7248:	85 55       	subi	r24, 0x55	; 85
    724a:	9a 4a       	sbci	r25, 0xAA	; 170
    724c:	71 f5       	brne	.+92     	; 0x72aa <auto_mount+0x31e>
    724e:	8a a9       	ldd	r24, Y+50	; 0x32
    7250:	9b a9       	ldd	r25, Y+51	; 0x33
    7252:	ac a9       	ldd	r26, Y+52	; 0x34
    7254:	bd a9       	ldd	r27, Y+53	; 0x35
    7256:	82 55       	subi	r24, 0x52	; 82
    7258:	92 45       	sbci	r25, 0x52	; 82
    725a:	a1 46       	sbci	r26, 0x61	; 97
    725c:	b1 44       	sbci	r27, 0x41	; 65
    725e:	29 f5       	brne	.+74     	; 0x72aa <auto_mount+0x31e>
    7260:	ca 5e       	subi	r28, 0xEA	; 234
    7262:	dd 4f       	sbci	r29, 0xFD	; 253
    7264:	88 81       	ld	r24, Y
    7266:	99 81       	ldd	r25, Y+1	; 0x01
    7268:	aa 81       	ldd	r26, Y+2	; 0x02
    726a:	bb 81       	ldd	r27, Y+3	; 0x03
    726c:	c6 51       	subi	r28, 0x16	; 22
    726e:	d2 40       	sbci	r29, 0x02	; 2
    7270:	82 57       	subi	r24, 0x72	; 114
    7272:	92 47       	sbci	r25, 0x72	; 114
    7274:	a1 44       	sbci	r26, 0x41	; 65
    7276:	b1 46       	sbci	r27, 0x61	; 97
    7278:	c1 f4       	brne	.+48     	; 0x72aa <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    727a:	c2 5e       	subi	r28, 0xE2	; 226
    727c:	dd 4f       	sbci	r29, 0xFD	; 253
    727e:	88 81       	ld	r24, Y
    7280:	99 81       	ldd	r25, Y+1	; 0x01
    7282:	aa 81       	ldd	r26, Y+2	; 0x02
    7284:	bb 81       	ldd	r27, Y+3	; 0x03
    7286:	ce 51       	subi	r28, 0x1E	; 30
    7288:	d2 40       	sbci	r29, 0x02	; 2
    728a:	8a 87       	std	Y+10, r24	; 0x0a
    728c:	9b 87       	std	Y+11, r25	; 0x0b
    728e:	ac 87       	std	Y+12, r26	; 0x0c
    7290:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    7292:	c6 5e       	subi	r28, 0xE6	; 230
    7294:	dd 4f       	sbci	r29, 0xFD	; 253
    7296:	88 81       	ld	r24, Y
    7298:	99 81       	ldd	r25, Y+1	; 0x01
    729a:	aa 81       	ldd	r26, Y+2	; 0x02
    729c:	bb 81       	ldd	r27, Y+3	; 0x03
    729e:	ca 51       	subi	r28, 0x1A	; 26
    72a0:	d2 40       	sbci	r29, 0x02	; 2
    72a2:	8e 87       	std	Y+14, r24	; 0x0e
    72a4:	9f 87       	std	Y+15, r25	; 0x0f
    72a6:	a8 8b       	std	Y+16, r26	; 0x10
    72a8:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    72aa:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    72ac:	1e a6       	std	Y+46, r1	; 0x2e
    72ae:	1f a6       	std	Y+47, r1	; 0x2f
    72b0:	18 aa       	std	Y+48, r1	; 0x30
    72b2:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    72b4:	1e 8a       	std	Y+22, r1	; 0x16
    72b6:	1f 8a       	std	Y+23, r1	; 0x17
    72b8:	18 8e       	std	Y+24, r1	; 0x18
    72ba:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    72bc:	80 91 72 25 	lds	r24, 0x2572
    72c0:	90 91 73 25 	lds	r25, 0x2573
    72c4:	01 96       	adiw	r24, 0x01	; 1
    72c6:	80 93 72 25 	sts	0x2572, r24
    72ca:	90 93 73 25 	sts	0x2573, r25
    72ce:	8d 83       	std	Y+5, r24	; 0x05
    72d0:	9e 83       	std	Y+6, r25	; 0x06
    72d2:	03 c0       	rjmp	.+6      	; 0x72da <auto_mount+0x34e>
	res = FR_OK;

	return res;
    72d4:	2a e0       	ldi	r18, 0x0A	; 10
    72d6:	30 e0       	ldi	r19, 0x00	; 0
    72d8:	05 c0       	rjmp	.+10     	; 0x72e4 <auto_mount+0x358>
    72da:	20 e0       	ldi	r18, 0x00	; 0
    72dc:	30 e0       	ldi	r19, 0x00	; 0
    72de:	02 c0       	rjmp	.+4      	; 0x72e4 <auto_mount+0x358>
    72e0:	2d e0       	ldi	r18, 0x0D	; 13
    72e2:	30 e0       	ldi	r19, 0x00	; 0
}
    72e4:	c9 01       	movw	r24, r18
    72e6:	cd b7       	in	r28, 0x3d	; 61
    72e8:	de b7       	in	r29, 0x3e	; 62
    72ea:	ee e0       	ldi	r30, 0x0E	; 14
    72ec:	0c 94 3e 59 	jmp	0xb27c	; 0xb27c <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    72f0:	c2 5a       	subi	r28, 0xA2	; 162
    72f2:	df 4f       	sbci	r29, 0xFF	; 255
    72f4:	88 81       	ld	r24, Y
    72f6:	99 81       	ldd	r25, Y+1	; 0x01
    72f8:	aa 81       	ldd	r26, Y+2	; 0x02
    72fa:	bb 81       	ldd	r27, Y+3	; 0x03
    72fc:	ce 55       	subi	r28, 0x5E	; 94
    72fe:	d0 40       	sbci	r29, 0x00	; 0
    7300:	8e a3       	std	Y+38, r24	; 0x26
    7302:	9f a3       	std	Y+39, r25	; 0x27
    7304:	a8 a7       	std	Y+40, r26	; 0x28
    7306:	b9 a7       	std	Y+41, r27	; 0x29
    7308:	13 e0       	ldi	r17, 0x03	; 3
    730a:	59 cf       	rjmp	.-334    	; 0x71be <auto_mount+0x232>

0000730c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    730c:	a0 e0       	ldi	r26, 0x00	; 0
    730e:	b0 e0       	ldi	r27, 0x00	; 0
    7310:	ec e8       	ldi	r30, 0x8C	; 140
    7312:	f9 e3       	ldi	r31, 0x39	; 57
    7314:	0c 94 22 59 	jmp	0xb244	; 0xb244 <__prologue_saves__+0x8>
    7318:	ec 01       	movw	r28, r24
    731a:	4a 01       	movw	r8, r20
    731c:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    731e:	ce a4       	ldd	r12, Y+46	; 0x2e
    7320:	df a4       	ldd	r13, Y+47	; 0x2f
    7322:	e8 a8       	ldd	r14, Y+48	; 0x30
    7324:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    7326:	c4 16       	cp	r12, r20
    7328:	d5 06       	cpc	r13, r21
    732a:	e6 06       	cpc	r14, r22
    732c:	f7 06       	cpc	r15, r23
    732e:	09 f4       	brne	.+2      	; 0x7332 <move_window+0x26>
    7330:	4f c0       	rjmp	.+158    	; 0x73d0 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7332:	8c 81       	ldd	r24, Y+4	; 0x04
    7334:	88 23       	and	r24, r24
    7336:	a1 f1       	breq	.+104    	; 0x73a0 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    7338:	22 e3       	ldi	r18, 0x32	; 50
    733a:	62 2e       	mov	r6, r18
    733c:	71 2c       	mov	r7, r1
    733e:	6c 0e       	add	r6, r28
    7340:	7d 1e       	adc	r7, r29
    7342:	89 81       	ldd	r24, Y+1	; 0x01
    7344:	b3 01       	movw	r22, r6
    7346:	a7 01       	movw	r20, r14
    7348:	96 01       	movw	r18, r12
    734a:	01 e0       	ldi	r16, 0x01	; 1
    734c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    7350:	89 2b       	or	r24, r25
    7352:	d9 f5       	brne	.+118    	; 0x73ca <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    7354:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    7356:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7358:	9b 8d       	ldd	r25, Y+27	; 0x1b
    735a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    735c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    735e:	2a a1       	ldd	r18, Y+34	; 0x22
    7360:	3b a1       	ldd	r19, Y+35	; 0x23
    7362:	4c a1       	ldd	r20, Y+36	; 0x24
    7364:	5d a1       	ldd	r21, Y+37	; 0x25
    7366:	82 0f       	add	r24, r18
    7368:	93 1f       	adc	r25, r19
    736a:	a4 1f       	adc	r26, r20
    736c:	b5 1f       	adc	r27, r21
    736e:	c8 16       	cp	r12, r24
    7370:	d9 06       	cpc	r13, r25
    7372:	ea 06       	cpc	r14, r26
    7374:	fb 06       	cpc	r15, r27
    7376:	a0 f4       	brcc	.+40     	; 0x73a0 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    7378:	1b 81       	ldd	r17, Y+3	; 0x03
    737a:	10 c0       	rjmp	.+32     	; 0x739c <move_window+0x90>
					wsect += fs->sects_fat;
    737c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    737e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7380:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7382:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7384:	c8 0e       	add	r12, r24
    7386:	d9 1e       	adc	r13, r25
    7388:	ea 1e       	adc	r14, r26
    738a:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    738c:	89 81       	ldd	r24, Y+1	; 0x01
    738e:	b3 01       	movw	r22, r6
    7390:	a7 01       	movw	r20, r14
    7392:	96 01       	movw	r18, r12
    7394:	01 e0       	ldi	r16, 0x01	; 1
    7396:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    739a:	11 50       	subi	r17, 0x01	; 1
    739c:	12 30       	cpi	r17, 0x02	; 2
    739e:	70 f7       	brcc	.-36     	; 0x737c <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    73a0:	81 14       	cp	r8, r1
    73a2:	91 04       	cpc	r9, r1
    73a4:	a1 04       	cpc	r10, r1
    73a6:	b1 04       	cpc	r11, r1
    73a8:	99 f0       	breq	.+38     	; 0x73d0 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    73aa:	be 01       	movw	r22, r28
    73ac:	6e 5c       	subi	r22, 0xCE	; 206
    73ae:	7f 4f       	sbci	r23, 0xFF	; 255
    73b0:	89 81       	ldd	r24, Y+1	; 0x01
    73b2:	a5 01       	movw	r20, r10
    73b4:	94 01       	movw	r18, r8
    73b6:	01 e0       	ldi	r16, 0x01	; 1
    73b8:	0e 94 08 52 	call	0xa410	; 0xa410 <disk_read>
    73bc:	89 2b       	or	r24, r25
    73be:	29 f4       	brne	.+10     	; 0x73ca <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    73c0:	8e a6       	std	Y+46, r8	; 0x2e
    73c2:	9f a6       	std	Y+47, r9	; 0x2f
    73c4:	a8 aa       	std	Y+48, r10	; 0x30
    73c6:	b9 aa       	std	Y+49, r11	; 0x31
    73c8:	03 c0       	rjmp	.+6      	; 0x73d0 <move_window+0xc4>
    73ca:	21 e0       	ldi	r18, 0x01	; 1
    73cc:	30 e0       	ldi	r19, 0x00	; 0
    73ce:	02 c0       	rjmp	.+4      	; 0x73d4 <move_window+0xc8>
    73d0:	20 e0       	ldi	r18, 0x00	; 0
    73d2:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    73d4:	c9 01       	movw	r24, r18
    73d6:	cd b7       	in	r28, 0x3d	; 61
    73d8:	de b7       	in	r29, 0x3e	; 62
    73da:	ee e0       	ldi	r30, 0x0E	; 14
    73dc:	0c 94 3e 59 	jmp	0xb27c	; 0xb27c <__epilogue_restores__+0x8>

000073e0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    73e0:	a0 e0       	ldi	r26, 0x00	; 0
    73e2:	b0 e0       	ldi	r27, 0x00	; 0
    73e4:	e6 ef       	ldi	r30, 0xF6	; 246
    73e6:	f9 e3       	ldi	r31, 0x39	; 57
    73e8:	0c 94 23 59 	jmp	0xb246	; 0xb246 <__prologue_saves__+0xa>
    73ec:	4c 01       	movw	r8, r24
    73ee:	7a 01       	movw	r14, r20
    73f0:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    73f2:	42 30       	cpi	r20, 0x02	; 2
    73f4:	51 05       	cpc	r21, r1
    73f6:	61 05       	cpc	r22, r1
    73f8:	71 05       	cpc	r23, r1
    73fa:	08 f4       	brcc	.+2      	; 0x73fe <get_fat+0x1e>
    73fc:	97 c0       	rjmp	.+302    	; 0x752c <get_fat+0x14c>
    73fe:	f4 01       	movw	r30, r8
    7400:	86 8d       	ldd	r24, Z+30	; 0x1e
    7402:	97 8d       	ldd	r25, Z+31	; 0x1f
    7404:	a0 a1       	ldd	r26, Z+32	; 0x20
    7406:	b1 a1       	ldd	r27, Z+33	; 0x21
    7408:	48 17       	cp	r20, r24
    740a:	59 07       	cpc	r21, r25
    740c:	6a 07       	cpc	r22, r26
    740e:	7b 07       	cpc	r23, r27
    7410:	08 f0       	brcs	.+2      	; 0x7414 <get_fat+0x34>
    7412:	8c c0       	rjmp	.+280    	; 0x752c <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    7414:	a2 a0       	ldd	r10, Z+34	; 0x22
    7416:	b3 a0       	ldd	r11, Z+35	; 0x23
    7418:	c4 a0       	ldd	r12, Z+36	; 0x24
    741a:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    741c:	80 81       	ld	r24, Z
    741e:	82 30       	cpi	r24, 0x02	; 2
    7420:	09 f4       	brne	.+2      	; 0x7424 <get_fat+0x44>
    7422:	4d c0       	rjmp	.+154    	; 0x74be <get_fat+0xde>
    7424:	83 30       	cpi	r24, 0x03	; 3
    7426:	09 f4       	brne	.+2      	; 0x742a <get_fat+0x4a>
    7428:	63 c0       	rjmp	.+198    	; 0x74f0 <get_fat+0x110>
    742a:	81 30       	cpi	r24, 0x01	; 1
    742c:	09 f0       	breq	.+2      	; 0x7430 <get_fat+0x50>
    742e:	83 c0       	rjmp	.+262    	; 0x7536 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    7430:	ea 01       	movw	r28, r20
    7432:	d6 95       	lsr	r29
    7434:	c7 95       	ror	r28
    7436:	c4 0f       	add	r28, r20
    7438:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    743a:	ae 01       	movw	r20, r28
    743c:	45 2f       	mov	r20, r21
    743e:	55 27       	eor	r21, r21
    7440:	46 95       	lsr	r20
    7442:	60 e0       	ldi	r22, 0x00	; 0
    7444:	70 e0       	ldi	r23, 0x00	; 0
    7446:	4a 0d       	add	r20, r10
    7448:	5b 1d       	adc	r21, r11
    744a:	6c 1d       	adc	r22, r12
    744c:	7d 1d       	adc	r23, r13
    744e:	c4 01       	movw	r24, r8
    7450:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    7454:	89 2b       	or	r24, r25
    7456:	09 f0       	breq	.+2      	; 0x745a <get_fat+0x7a>
    7458:	6e c0       	rjmp	.+220    	; 0x7536 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    745a:	fe 01       	movw	r30, r28
    745c:	f1 70       	andi	r31, 0x01	; 1
    745e:	e8 0d       	add	r30, r8
    7460:	f9 1d       	adc	r31, r9
    7462:	72 a8       	ldd	r7, Z+50	; 0x32
    7464:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    7466:	ae 01       	movw	r20, r28
    7468:	45 2f       	mov	r20, r21
    746a:	55 27       	eor	r21, r21
    746c:	46 95       	lsr	r20
    746e:	60 e0       	ldi	r22, 0x00	; 0
    7470:	70 e0       	ldi	r23, 0x00	; 0
    7472:	4a 0d       	add	r20, r10
    7474:	5b 1d       	adc	r21, r11
    7476:	6c 1d       	adc	r22, r12
    7478:	7d 1d       	adc	r23, r13
    747a:	c4 01       	movw	r24, r8
    747c:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    7480:	89 2b       	or	r24, r25
    7482:	09 f0       	breq	.+2      	; 0x7486 <get_fat+0xa6>
    7484:	58 c0       	rjmp	.+176    	; 0x7536 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    7486:	67 2d       	mov	r22, r7
    7488:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    748a:	d1 70       	andi	r29, 0x01	; 1
    748c:	c8 0d       	add	r28, r8
    748e:	d9 1d       	adc	r29, r9
    7490:	9a a9       	ldd	r25, Y+50	; 0x32
    7492:	80 e0       	ldi	r24, 0x00	; 0
    7494:	68 2b       	or	r22, r24
    7496:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7498:	c7 01       	movw	r24, r14
    749a:	81 70       	andi	r24, 0x01	; 1
    749c:	90 70       	andi	r25, 0x00	; 0
    749e:	89 2b       	or	r24, r25
    74a0:	39 f0       	breq	.+14     	; 0x74b0 <get_fat+0xd0>
    74a2:	84 e0       	ldi	r24, 0x04	; 4
    74a4:	76 95       	lsr	r23
    74a6:	67 95       	ror	r22
    74a8:	8a 95       	dec	r24
    74aa:	e1 f7       	brne	.-8      	; 0x74a4 <get_fat+0xc4>
    74ac:	9b 01       	movw	r18, r22
    74ae:	1d c0       	rjmp	.+58     	; 0x74ea <get_fat+0x10a>
    74b0:	9b 01       	movw	r18, r22
    74b2:	40 e0       	ldi	r20, 0x00	; 0
    74b4:	50 e0       	ldi	r21, 0x00	; 0
    74b6:	3f 70       	andi	r19, 0x0F	; 15
    74b8:	40 70       	andi	r20, 0x00	; 0
    74ba:	50 70       	andi	r21, 0x00	; 0
    74bc:	40 c0       	rjmp	.+128    	; 0x753e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    74be:	45 2f       	mov	r20, r21
    74c0:	56 2f       	mov	r21, r22
    74c2:	67 2f       	mov	r22, r23
    74c4:	77 27       	eor	r23, r23
    74c6:	4a 0d       	add	r20, r10
    74c8:	5b 1d       	adc	r21, r11
    74ca:	6c 1d       	adc	r22, r12
    74cc:	7d 1d       	adc	r23, r13
    74ce:	c4 01       	movw	r24, r8
    74d0:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    74d4:	89 2b       	or	r24, r25
    74d6:	79 f5       	brne	.+94     	; 0x7536 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    74d8:	f7 01       	movw	r30, r14
    74da:	ee 0f       	add	r30, r30
    74dc:	ff 1f       	adc	r31, r31
    74de:	f1 70       	andi	r31, 0x01	; 1
    74e0:	e8 0d       	add	r30, r8
    74e2:	f9 1d       	adc	r31, r9
    74e4:	82 a9       	ldd	r24, Z+50	; 0x32
    74e6:	93 a9       	ldd	r25, Z+51	; 0x33
    74e8:	9c 01       	movw	r18, r24
    74ea:	40 e0       	ldi	r20, 0x00	; 0
    74ec:	50 e0       	ldi	r21, 0x00	; 0
    74ee:	27 c0       	rjmp	.+78     	; 0x753e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    74f0:	e7 e0       	ldi	r30, 0x07	; 7
    74f2:	76 95       	lsr	r23
    74f4:	67 95       	ror	r22
    74f6:	57 95       	ror	r21
    74f8:	47 95       	ror	r20
    74fa:	ea 95       	dec	r30
    74fc:	d1 f7       	brne	.-12     	; 0x74f2 <get_fat+0x112>
    74fe:	4a 0d       	add	r20, r10
    7500:	5b 1d       	adc	r21, r11
    7502:	6c 1d       	adc	r22, r12
    7504:	7d 1d       	adc	r23, r13
    7506:	c4 01       	movw	r24, r8
    7508:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    750c:	89 2b       	or	r24, r25
    750e:	99 f4       	brne	.+38     	; 0x7536 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    7510:	f7 01       	movw	r30, r14
    7512:	ee 0f       	add	r30, r30
    7514:	ff 1f       	adc	r31, r31
    7516:	ee 0f       	add	r30, r30
    7518:	ff 1f       	adc	r31, r31
    751a:	f1 70       	andi	r31, 0x01	; 1
    751c:	e8 0d       	add	r30, r8
    751e:	f9 1d       	adc	r31, r9
    7520:	22 a9       	ldd	r18, Z+50	; 0x32
    7522:	33 a9       	ldd	r19, Z+51	; 0x33
    7524:	44 a9       	ldd	r20, Z+52	; 0x34
    7526:	55 a9       	ldd	r21, Z+53	; 0x35
    7528:	5f 70       	andi	r21, 0x0F	; 15
    752a:	09 c0       	rjmp	.+18     	; 0x753e <get_fat+0x15e>
    752c:	21 e0       	ldi	r18, 0x01	; 1
    752e:	30 e0       	ldi	r19, 0x00	; 0
    7530:	40 e0       	ldi	r20, 0x00	; 0
    7532:	50 e0       	ldi	r21, 0x00	; 0
    7534:	04 c0       	rjmp	.+8      	; 0x753e <get_fat+0x15e>
    7536:	2f ef       	ldi	r18, 0xFF	; 255
    7538:	3f ef       	ldi	r19, 0xFF	; 255
    753a:	4f ef       	ldi	r20, 0xFF	; 255
    753c:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    753e:	b9 01       	movw	r22, r18
    7540:	ca 01       	movw	r24, r20
    7542:	cd b7       	in	r28, 0x3d	; 61
    7544:	de b7       	in	r29, 0x3e	; 62
    7546:	ed e0       	ldi	r30, 0x0D	; 13
    7548:	0c 94 3f 59 	jmp	0xb27e	; 0xb27e <__epilogue_restores__+0xa>

0000754c <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    754c:	a0 e0       	ldi	r26, 0x00	; 0
    754e:	b0 e0       	ldi	r27, 0x00	; 0
    7550:	ec ea       	ldi	r30, 0xAC	; 172
    7552:	fa e3       	ldi	r31, 0x3A	; 58
    7554:	0c 94 26 59 	jmp	0xb24c	; 0xb24c <__prologue_saves__+0x10>
    7558:	5c 01       	movw	r10, r24
    755a:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    755c:	dc 01       	movw	r26, r24
    755e:	14 96       	adiw	r26, 0x04	; 4
    7560:	6d 93       	st	X+, r22
    7562:	7c 93       	st	X, r23
    7564:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    7566:	16 96       	adiw	r26, 0x06	; 6
    7568:	4d 91       	ld	r20, X+
    756a:	5d 91       	ld	r21, X+
    756c:	6d 91       	ld	r22, X+
    756e:	7c 91       	ld	r23, X
    7570:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    7572:	41 30       	cpi	r20, 0x01	; 1
    7574:	51 05       	cpc	r21, r1
    7576:	61 05       	cpc	r22, r1
    7578:	71 05       	cpc	r23, r1
    757a:	09 f4       	brne	.+2      	; 0x757e <dir_seek+0x32>
    757c:	d5 c0       	rjmp	.+426    	; 0x7728 <dir_seek+0x1dc>
    757e:	ed 91       	ld	r30, X+
    7580:	fc 91       	ld	r31, X
    7582:	86 8d       	ldd	r24, Z+30	; 0x1e
    7584:	97 8d       	ldd	r25, Z+31	; 0x1f
    7586:	a0 a1       	ldd	r26, Z+32	; 0x20
    7588:	b1 a1       	ldd	r27, Z+33	; 0x21
    758a:	48 17       	cp	r20, r24
    758c:	59 07       	cpc	r21, r25
    758e:	6a 07       	cpc	r22, r26
    7590:	7b 07       	cpc	r23, r27
    7592:	08 f0       	brcs	.+2      	; 0x7596 <dir_seek+0x4a>
    7594:	c9 c0       	rjmp	.+402    	; 0x7728 <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7596:	41 15       	cp	r20, r1
    7598:	51 05       	cpc	r21, r1
    759a:	61 05       	cpc	r22, r1
    759c:	71 05       	cpc	r23, r1
    759e:	81 f5       	brne	.+96     	; 0x7600 <dir_seek+0xb4>
    75a0:	80 81       	ld	r24, Z
    75a2:	83 30       	cpi	r24, 0x03	; 3
    75a4:	49 f4       	brne	.+18     	; 0x75b8 <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    75a6:	46 a1       	ldd	r20, Z+38	; 0x26
    75a8:	57 a1       	ldd	r21, Z+39	; 0x27
    75aa:	60 a5       	ldd	r22, Z+40	; 0x28
    75ac:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    75ae:	41 15       	cp	r20, r1
    75b0:	51 05       	cpc	r21, r1
    75b2:	61 05       	cpc	r22, r1
    75b4:	71 05       	cpc	r23, r1
    75b6:	21 f5       	brne	.+72     	; 0x7600 <dir_seek+0xb4>
		dj->clust = clst;
    75b8:	f5 01       	movw	r30, r10
    75ba:	12 86       	std	Z+10, r1	; 0x0a
    75bc:	13 86       	std	Z+11, r1	; 0x0b
    75be:	14 86       	std	Z+12, r1	; 0x0c
    75c0:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    75c2:	01 90       	ld	r0, Z+
    75c4:	f0 81       	ld	r31, Z
    75c6:	e0 2d       	mov	r30, r0
    75c8:	87 81       	ldd	r24, Z+7	; 0x07
    75ca:	90 85       	ldd	r25, Z+8	; 0x08
    75cc:	c8 16       	cp	r12, r24
    75ce:	d9 06       	cpc	r13, r25
    75d0:	08 f0       	brcs	.+2      	; 0x75d4 <dir_seek+0x88>
    75d2:	aa c0       	rjmp	.+340    	; 0x7728 <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    75d4:	c6 01       	movw	r24, r12
    75d6:	a4 e0       	ldi	r26, 0x04	; 4
    75d8:	96 95       	lsr	r25
    75da:	87 95       	ror	r24
    75dc:	aa 95       	dec	r26
    75de:	e1 f7       	brne	.-8      	; 0x75d8 <dir_seek+0x8c>
    75e0:	a0 e0       	ldi	r26, 0x00	; 0
    75e2:	b0 e0       	ldi	r27, 0x00	; 0
    75e4:	26 a1       	ldd	r18, Z+38	; 0x26
    75e6:	37 a1       	ldd	r19, Z+39	; 0x27
    75e8:	40 a5       	ldd	r20, Z+40	; 0x28
    75ea:	51 a5       	ldd	r21, Z+41	; 0x29
    75ec:	82 0f       	add	r24, r18
    75ee:	93 1f       	adc	r25, r19
    75f0:	a4 1f       	adc	r26, r20
    75f2:	b5 1f       	adc	r27, r21
    75f4:	f5 01       	movw	r30, r10
    75f6:	86 87       	std	Z+14, r24	; 0x0e
    75f8:	97 87       	std	Z+15, r25	; 0x0f
    75fa:	a0 8b       	std	Z+16, r26	; 0x10
    75fc:	b1 8b       	std	Z+17, r27	; 0x11
    75fe:	7b c0       	rjmp	.+246    	; 0x76f6 <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    7600:	82 81       	ldd	r24, Z+2	; 0x02
    7602:	08 2f       	mov	r16, r24
    7604:	10 e0       	ldi	r17, 0x00	; 0
    7606:	f4 e0       	ldi	r31, 0x04	; 4
    7608:	00 0f       	add	r16, r16
    760a:	11 1f       	adc	r17, r17
    760c:	fa 95       	dec	r31
    760e:	e1 f7       	brne	.-8      	; 0x7608 <dir_seek+0xbc>
    7610:	25 c0       	rjmp	.+74     	; 0x765c <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7612:	ce 01       	movw	r24, r28
    7614:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    7618:	ab 01       	movw	r20, r22
    761a:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    761c:	4f 3f       	cpi	r20, 0xFF	; 255
    761e:	ff ef       	ldi	r31, 0xFF	; 255
    7620:	5f 07       	cpc	r21, r31
    7622:	ff ef       	ldi	r31, 0xFF	; 255
    7624:	6f 07       	cpc	r22, r31
    7626:	ff ef       	ldi	r31, 0xFF	; 255
    7628:	7f 07       	cpc	r23, r31
    762a:	19 f4       	brne	.+6      	; 0x7632 <dir_seek+0xe6>
    762c:	21 e0       	ldi	r18, 0x01	; 1
    762e:	30 e0       	ldi	r19, 0x00	; 0
    7630:	7d c0       	rjmp	.+250    	; 0x772c <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    7632:	42 30       	cpi	r20, 0x02	; 2
    7634:	51 05       	cpc	r21, r1
    7636:	61 05       	cpc	r22, r1
    7638:	71 05       	cpc	r23, r1
    763a:	08 f4       	brcc	.+2      	; 0x763e <dir_seek+0xf2>
    763c:	75 c0       	rjmp	.+234    	; 0x7728 <dir_seek+0x1dc>
    763e:	d5 01       	movw	r26, r10
    7640:	ed 91       	ld	r30, X+
    7642:	fc 91       	ld	r31, X
    7644:	86 8d       	ldd	r24, Z+30	; 0x1e
    7646:	97 8d       	ldd	r25, Z+31	; 0x1f
    7648:	a0 a1       	ldd	r26, Z+32	; 0x20
    764a:	b1 a1       	ldd	r27, Z+33	; 0x21
    764c:	48 17       	cp	r20, r24
    764e:	59 07       	cpc	r21, r25
    7650:	6a 07       	cpc	r22, r26
    7652:	7b 07       	cpc	r23, r27
    7654:	08 f0       	brcs	.+2      	; 0x7658 <dir_seek+0x10c>
    7656:	68 c0       	rjmp	.+208    	; 0x7728 <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    7658:	c0 1a       	sub	r12, r16
    765a:	d1 0a       	sbc	r13, r17
    765c:	f5 01       	movw	r30, r10
    765e:	c0 81       	ld	r28, Z
    7660:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    7662:	c0 16       	cp	r12, r16
    7664:	d1 06       	cpc	r13, r17
    7666:	a8 f6       	brcc	.-86     	; 0x7612 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7668:	d5 01       	movw	r26, r10
    766a:	1a 96       	adiw	r26, 0x0a	; 10
    766c:	4d 93       	st	X+, r20
    766e:	5d 93       	st	X+, r21
    7670:	6d 93       	st	X+, r22
    7672:	7c 93       	st	X, r23
    7674:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7676:	ee ef       	ldi	r30, 0xFE	; 254
    7678:	ee 2e       	mov	r14, r30
    767a:	ef ef       	ldi	r30, 0xFF	; 255
    767c:	fe 2e       	mov	r15, r30
    767e:	ef ef       	ldi	r30, 0xFF	; 255
    7680:	0e 2f       	mov	r16, r30
    7682:	ef ef       	ldi	r30, 0xFF	; 255
    7684:	1e 2f       	mov	r17, r30
    7686:	e4 0e       	add	r14, r20
    7688:	f5 1e       	adc	r15, r21
    768a:	06 1f       	adc	r16, r22
    768c:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    768e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7690:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7692:	a8 a1       	ldd	r26, Y+32	; 0x20
    7694:	b9 a1       	ldd	r27, Y+33	; 0x21
    7696:	02 97       	sbiw	r24, 0x02	; 2
    7698:	a1 09       	sbc	r26, r1
    769a:	b1 09       	sbc	r27, r1
    769c:	e8 16       	cp	r14, r24
    769e:	f9 06       	cpc	r15, r25
    76a0:	0a 07       	cpc	r16, r26
    76a2:	1b 07       	cpc	r17, r27
    76a4:	28 f0       	brcs	.+10     	; 0x76b0 <dir_seek+0x164>
    76a6:	20 e0       	ldi	r18, 0x00	; 0
    76a8:	30 e0       	ldi	r19, 0x00	; 0
    76aa:	40 e0       	ldi	r20, 0x00	; 0
    76ac:	50 e0       	ldi	r21, 0x00	; 0
    76ae:	12 c0       	rjmp	.+36     	; 0x76d4 <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    76b0:	2a 81       	ldd	r18, Y+2	; 0x02
    76b2:	30 e0       	ldi	r19, 0x00	; 0
    76b4:	40 e0       	ldi	r20, 0x00	; 0
    76b6:	50 e0       	ldi	r21, 0x00	; 0
    76b8:	c8 01       	movw	r24, r16
    76ba:	b7 01       	movw	r22, r14
    76bc:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    76c0:	9b 01       	movw	r18, r22
    76c2:	ac 01       	movw	r20, r24
    76c4:	8a a5       	ldd	r24, Y+42	; 0x2a
    76c6:	9b a5       	ldd	r25, Y+43	; 0x2b
    76c8:	ac a5       	ldd	r26, Y+44	; 0x2c
    76ca:	bd a5       	ldd	r27, Y+45	; 0x2d
    76cc:	28 0f       	add	r18, r24
    76ce:	39 1f       	adc	r19, r25
    76d0:	4a 1f       	adc	r20, r26
    76d2:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    76d4:	c6 01       	movw	r24, r12
    76d6:	64 e0       	ldi	r22, 0x04	; 4
    76d8:	96 95       	lsr	r25
    76da:	87 95       	ror	r24
    76dc:	6a 95       	dec	r22
    76de:	e1 f7       	brne	.-8      	; 0x76d8 <dir_seek+0x18c>
    76e0:	a0 e0       	ldi	r26, 0x00	; 0
    76e2:	b0 e0       	ldi	r27, 0x00	; 0
    76e4:	28 0f       	add	r18, r24
    76e6:	39 1f       	adc	r19, r25
    76e8:	4a 1f       	adc	r20, r26
    76ea:	5b 1f       	adc	r21, r27
    76ec:	f5 01       	movw	r30, r10
    76ee:	26 87       	std	Z+14, r18	; 0x0e
    76f0:	37 87       	std	Z+15, r19	; 0x0f
    76f2:	40 8b       	std	Z+16, r20	; 0x10
    76f4:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    76f6:	ff e0       	ldi	r31, 0x0F	; 15
    76f8:	cf 22       	and	r12, r31
    76fa:	dd 24       	eor	r13, r13
    76fc:	45 e0       	ldi	r20, 0x05	; 5
    76fe:	cc 0c       	add	r12, r12
    7700:	dd 1c       	adc	r13, r13
    7702:	4a 95       	dec	r20
    7704:	e1 f7       	brne	.-8      	; 0x76fe <dir_seek+0x1b2>
    7706:	82 e3       	ldi	r24, 0x32	; 50
    7708:	90 e0       	ldi	r25, 0x00	; 0
    770a:	c8 0e       	add	r12, r24
    770c:	d9 1e       	adc	r13, r25
    770e:	d5 01       	movw	r26, r10
    7710:	8d 91       	ld	r24, X+
    7712:	9c 91       	ld	r25, X
    7714:	11 97       	sbiw	r26, 0x01	; 1
    7716:	8c 0d       	add	r24, r12
    7718:	9d 1d       	adc	r25, r13
    771a:	52 96       	adiw	r26, 0x12	; 18
    771c:	8d 93       	st	X+, r24
    771e:	9c 93       	st	X, r25
    7720:	53 97       	sbiw	r26, 0x13	; 19
    7722:	20 e0       	ldi	r18, 0x00	; 0
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	02 c0       	rjmp	.+4      	; 0x772c <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7728:	22 e0       	ldi	r18, 0x02	; 2
    772a:	30 e0       	ldi	r19, 0x00	; 0
}
    772c:	c9 01       	movw	r24, r18
    772e:	cd b7       	in	r28, 0x3d	; 61
    7730:	de b7       	in	r29, 0x3e	; 62
    7732:	ea e0       	ldi	r30, 0x0A	; 10
    7734:	0c 94 42 59 	jmp	0xb284	; 0xb284 <__epilogue_restores__+0x10>

00007738 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7738:	a0 e0       	ldi	r26, 0x00	; 0
    773a:	b0 e0       	ldi	r27, 0x00	; 0
    773c:	e2 ea       	ldi	r30, 0xA2	; 162
    773e:	fb e3       	ldi	r31, 0x3B	; 59
    7740:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    7744:	5c 01       	movw	r10, r24
    7746:	6a 01       	movw	r12, r20
    7748:	7b 01       	movw	r14, r22
    774a:	38 01       	movw	r6, r16
    774c:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    774e:	42 30       	cpi	r20, 0x02	; 2
    7750:	51 05       	cpc	r21, r1
    7752:	61 05       	cpc	r22, r1
    7754:	71 05       	cpc	r23, r1
    7756:	08 f4       	brcc	.+2      	; 0x775a <put_fat+0x22>
    7758:	b1 c0       	rjmp	.+354    	; 0x78bc <put_fat+0x184>
    775a:	f5 01       	movw	r30, r10
    775c:	86 8d       	ldd	r24, Z+30	; 0x1e
    775e:	97 8d       	ldd	r25, Z+31	; 0x1f
    7760:	a0 a1       	ldd	r26, Z+32	; 0x20
    7762:	b1 a1       	ldd	r27, Z+33	; 0x21
    7764:	48 17       	cp	r20, r24
    7766:	59 07       	cpc	r21, r25
    7768:	6a 07       	cpc	r22, r26
    776a:	7b 07       	cpc	r23, r27
    776c:	08 f0       	brcs	.+2      	; 0x7770 <put_fat+0x38>
    776e:	a6 c0       	rjmp	.+332    	; 0x78bc <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    7770:	22 a0       	ldd	r2, Z+34	; 0x22
    7772:	33 a0       	ldd	r3, Z+35	; 0x23
    7774:	44 a0       	ldd	r4, Z+36	; 0x24
    7776:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    7778:	80 81       	ld	r24, Z
    777a:	82 30       	cpi	r24, 0x02	; 2
    777c:	09 f4       	brne	.+2      	; 0x7780 <put_fat+0x48>
    777e:	66 c0       	rjmp	.+204    	; 0x784c <put_fat+0x114>
    7780:	83 30       	cpi	r24, 0x03	; 3
    7782:	09 f4       	brne	.+2      	; 0x7786 <put_fat+0x4e>
    7784:	7a c0       	rjmp	.+244    	; 0x787a <put_fat+0x142>
    7786:	81 30       	cpi	r24, 0x01	; 1
    7788:	19 f0       	breq	.+6      	; 0x7790 <put_fat+0x58>
    778a:	42 e0       	ldi	r20, 0x02	; 2
    778c:	50 e0       	ldi	r21, 0x00	; 0
    778e:	92 c0       	rjmp	.+292    	; 0x78b4 <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7790:	ea 01       	movw	r28, r20
    7792:	d6 95       	lsr	r29
    7794:	c7 95       	ror	r28
    7796:	c4 0f       	add	r28, r20
    7798:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    779a:	ae 01       	movw	r20, r28
    779c:	45 2f       	mov	r20, r21
    779e:	55 27       	eor	r21, r21
    77a0:	46 95       	lsr	r20
    77a2:	60 e0       	ldi	r22, 0x00	; 0
    77a4:	70 e0       	ldi	r23, 0x00	; 0
    77a6:	42 0d       	add	r20, r2
    77a8:	53 1d       	adc	r21, r3
    77aa:	64 1d       	adc	r22, r4
    77ac:	75 1d       	adc	r23, r5
    77ae:	c5 01       	movw	r24, r10
    77b0:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    77b4:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    77b6:	00 97       	sbiw	r24, 0x00	; 0
    77b8:	09 f0       	breq	.+2      	; 0x77bc <put_fat+0x84>
    77ba:	7c c0       	rjmp	.+248    	; 0x78b4 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    77bc:	de 01       	movw	r26, r28
    77be:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    77c0:	86 01       	movw	r16, r12
    77c2:	01 70       	andi	r16, 0x01	; 1
    77c4:	10 70       	andi	r17, 0x00	; 0
    77c6:	01 15       	cp	r16, r1
    77c8:	11 05       	cpc	r17, r1
    77ca:	51 f0       	breq	.+20     	; 0x77e0 <put_fat+0xa8>
    77cc:	f5 01       	movw	r30, r10
    77ce:	ea 0f       	add	r30, r26
    77d0:	fb 1f       	adc	r31, r27
    77d2:	82 a9       	ldd	r24, Z+50	; 0x32
    77d4:	8f 70       	andi	r24, 0x0F	; 15
    77d6:	96 2d       	mov	r25, r6
    77d8:	92 95       	swap	r25
    77da:	90 7f       	andi	r25, 0xF0	; 240
    77dc:	98 2b       	or	r25, r24
    77de:	01 c0       	rjmp	.+2      	; 0x77e2 <put_fat+0xaa>
    77e0:	96 2d       	mov	r25, r6
    77e2:	aa 0d       	add	r26, r10
    77e4:	bb 1d       	adc	r27, r11
    77e6:	d2 96       	adiw	r26, 0x32	; 50
    77e8:	9c 93       	st	X, r25
			bc++;
    77ea:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    77ec:	81 e0       	ldi	r24, 0x01	; 1
    77ee:	f5 01       	movw	r30, r10
    77f0:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    77f2:	ae 01       	movw	r20, r28
    77f4:	45 2f       	mov	r20, r21
    77f6:	55 27       	eor	r21, r21
    77f8:	46 95       	lsr	r20
    77fa:	60 e0       	ldi	r22, 0x00	; 0
    77fc:	70 e0       	ldi	r23, 0x00	; 0
    77fe:	42 0d       	add	r20, r2
    7800:	53 1d       	adc	r21, r3
    7802:	64 1d       	adc	r22, r4
    7804:	75 1d       	adc	r23, r5
    7806:	c5 01       	movw	r24, r10
    7808:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    780c:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    780e:	00 97       	sbiw	r24, 0x00	; 0
    7810:	09 f0       	breq	.+2      	; 0x7814 <put_fat+0xdc>
    7812:	50 c0       	rjmp	.+160    	; 0x78b4 <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7814:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7816:	01 15       	cp	r16, r1
    7818:	11 05       	cpc	r17, r1
    781a:	49 f0       	breq	.+18     	; 0x782e <put_fat+0xf6>
    781c:	64 e0       	ldi	r22, 0x04	; 4
    781e:	96 94       	lsr	r9
    7820:	87 94       	ror	r8
    7822:	77 94       	ror	r7
    7824:	67 94       	ror	r6
    7826:	6a 95       	dec	r22
    7828:	d1 f7       	brne	.-12     	; 0x781e <put_fat+0xe6>
    782a:	66 2d       	mov	r22, r6
    782c:	0b c0       	rjmp	.+22     	; 0x7844 <put_fat+0x10c>
    782e:	f5 01       	movw	r30, r10
    7830:	ec 0f       	add	r30, r28
    7832:	fd 1f       	adc	r31, r29
    7834:	62 a9       	ldd	r22, Z+50	; 0x32
    7836:	60 7f       	andi	r22, 0xF0	; 240
    7838:	bb 27       	eor	r27, r27
    783a:	a9 2d       	mov	r26, r9
    783c:	98 2d       	mov	r25, r8
    783e:	87 2d       	mov	r24, r7
    7840:	8f 70       	andi	r24, 0x0F	; 15
    7842:	68 2b       	or	r22, r24
    7844:	ca 0d       	add	r28, r10
    7846:	db 1d       	adc	r29, r11
    7848:	6a ab       	std	Y+50, r22	; 0x32
    784a:	34 c0       	rjmp	.+104    	; 0x78b4 <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    784c:	45 2f       	mov	r20, r21
    784e:	56 2f       	mov	r21, r22
    7850:	67 2f       	mov	r22, r23
    7852:	77 27       	eor	r23, r23
    7854:	42 0d       	add	r20, r2
    7856:	53 1d       	adc	r21, r3
    7858:	64 1d       	adc	r22, r4
    785a:	75 1d       	adc	r23, r5
    785c:	c5 01       	movw	r24, r10
    785e:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    7862:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7864:	00 97       	sbiw	r24, 0x00	; 0
    7866:	31 f5       	brne	.+76     	; 0x78b4 <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    7868:	f6 01       	movw	r30, r12
    786a:	ee 0f       	add	r30, r30
    786c:	ff 1f       	adc	r31, r31
    786e:	f1 70       	andi	r31, 0x01	; 1
    7870:	ea 0d       	add	r30, r10
    7872:	fb 1d       	adc	r31, r11
    7874:	62 aa       	std	Z+50, r6	; 0x32
    7876:	73 aa       	std	Z+51, r7	; 0x33
    7878:	1d c0       	rjmp	.+58     	; 0x78b4 <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    787a:	87 e0       	ldi	r24, 0x07	; 7
    787c:	76 95       	lsr	r23
    787e:	67 95       	ror	r22
    7880:	57 95       	ror	r21
    7882:	47 95       	ror	r20
    7884:	8a 95       	dec	r24
    7886:	d1 f7       	brne	.-12     	; 0x787c <put_fat+0x144>
    7888:	42 0d       	add	r20, r2
    788a:	53 1d       	adc	r21, r3
    788c:	64 1d       	adc	r22, r4
    788e:	75 1d       	adc	r23, r5
    7890:	c5 01       	movw	r24, r10
    7892:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    7896:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7898:	00 97       	sbiw	r24, 0x00	; 0
    789a:	61 f4       	brne	.+24     	; 0x78b4 <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    789c:	f6 01       	movw	r30, r12
    789e:	ee 0f       	add	r30, r30
    78a0:	ff 1f       	adc	r31, r31
    78a2:	ee 0f       	add	r30, r30
    78a4:	ff 1f       	adc	r31, r31
    78a6:	f1 70       	andi	r31, 0x01	; 1
    78a8:	ea 0d       	add	r30, r10
    78aa:	fb 1d       	adc	r31, r11
    78ac:	62 aa       	std	Z+50, r6	; 0x32
    78ae:	73 aa       	std	Z+51, r7	; 0x33
    78b0:	84 aa       	std	Z+52, r8	; 0x34
    78b2:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    78b4:	81 e0       	ldi	r24, 0x01	; 1
    78b6:	f5 01       	movw	r30, r10
    78b8:	84 83       	std	Z+4, r24	; 0x04
    78ba:	02 c0       	rjmp	.+4      	; 0x78c0 <put_fat+0x188>
    78bc:	42 e0       	ldi	r20, 0x02	; 2
    78be:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    78c0:	ca 01       	movw	r24, r20
    78c2:	cd b7       	in	r28, 0x3d	; 61
    78c4:	de b7       	in	r29, 0x3e	; 62
    78c6:	e2 e1       	ldi	r30, 0x12	; 18
    78c8:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

000078cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    78cc:	a4 e0       	ldi	r26, 0x04	; 4
    78ce:	b0 e0       	ldi	r27, 0x00	; 0
    78d0:	ec e6       	ldi	r30, 0x6C	; 108
    78d2:	fc e3       	ldi	r31, 0x3C	; 60
    78d4:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    78d8:	1c 01       	movw	r2, r24
    78da:	2a 01       	movw	r4, r20
    78dc:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    78de:	dc 01       	movw	r26, r24
    78e0:	5e 96       	adiw	r26, 0x1e	; 30
    78e2:	8d 91       	ld	r24, X+
    78e4:	9d 91       	ld	r25, X+
    78e6:	0d 90       	ld	r0, X+
    78e8:	bc 91       	ld	r27, X
    78ea:	a0 2d       	mov	r26, r0
    78ec:	89 83       	std	Y+1, r24	; 0x01
    78ee:	9a 83       	std	Y+2, r25	; 0x02
    78f0:	ab 83       	std	Y+3, r26	; 0x03
    78f2:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    78f4:	41 15       	cp	r20, r1
    78f6:	51 05       	cpc	r21, r1
    78f8:	61 05       	cpc	r22, r1
    78fa:	71 05       	cpc	r23, r1
    78fc:	81 f4       	brne	.+32     	; 0x791e <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    78fe:	f1 01       	movw	r30, r2
    7900:	82 84       	ldd	r8, Z+10	; 0x0a
    7902:	93 84       	ldd	r9, Z+11	; 0x0b
    7904:	a4 84       	ldd	r10, Z+12	; 0x0c
    7906:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    7908:	81 14       	cp	r8, r1
    790a:	91 04       	cpc	r9, r1
    790c:	a1 04       	cpc	r10, r1
    790e:	b1 04       	cpc	r11, r1
    7910:	11 f1       	breq	.+68     	; 0x7956 <create_chain+0x8a>
    7912:	88 16       	cp	r8, r24
    7914:	99 06       	cpc	r9, r25
    7916:	aa 06       	cpc	r10, r26
    7918:	bb 06       	cpc	r11, r27
    791a:	e8 f4       	brcc	.+58     	; 0x7956 <create_chain+0x8a>
    791c:	21 c0       	rjmp	.+66     	; 0x7960 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    791e:	c1 01       	movw	r24, r2
    7920:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    7924:	9b 01       	movw	r18, r22
    7926:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7928:	62 30       	cpi	r22, 0x02	; 2
    792a:	71 05       	cpc	r23, r1
    792c:	81 05       	cpc	r24, r1
    792e:	91 05       	cpc	r25, r1
    7930:	28 f4       	brcc	.+10     	; 0x793c <create_chain+0x70>
    7932:	21 e0       	ldi	r18, 0x01	; 1
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	40 e0       	ldi	r20, 0x00	; 0
    7938:	50 e0       	ldi	r21, 0x00	; 0
    793a:	93 c0       	rjmp	.+294    	; 0x7a62 <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    793c:	89 81       	ldd	r24, Y+1	; 0x01
    793e:	9a 81       	ldd	r25, Y+2	; 0x02
    7940:	ab 81       	ldd	r26, Y+3	; 0x03
    7942:	bc 81       	ldd	r27, Y+4	; 0x04
    7944:	28 17       	cp	r18, r24
    7946:	39 07       	cpc	r19, r25
    7948:	4a 07       	cpc	r20, r26
    794a:	5b 07       	cpc	r21, r27
    794c:	08 f4       	brcc	.+2      	; 0x7950 <create_chain+0x84>
    794e:	89 c0       	rjmp	.+274    	; 0x7a62 <create_chain+0x196>
    7950:	53 01       	movw	r10, r6
    7952:	42 01       	movw	r8, r4
    7954:	05 c0       	rjmp	.+10     	; 0x7960 <create_chain+0x94>
    7956:	b1 e0       	ldi	r27, 0x01	; 1
    7958:	8b 2e       	mov	r8, r27
    795a:	91 2c       	mov	r9, r1
    795c:	a1 2c       	mov	r10, r1
    795e:	b1 2c       	mov	r11, r1
    7960:	75 01       	movw	r14, r10
    7962:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    7964:	08 94       	sec
    7966:	c1 1c       	adc	r12, r1
    7968:	d1 1c       	adc	r13, r1
    796a:	e1 1c       	adc	r14, r1
    796c:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    796e:	89 81       	ldd	r24, Y+1	; 0x01
    7970:	9a 81       	ldd	r25, Y+2	; 0x02
    7972:	ab 81       	ldd	r26, Y+3	; 0x03
    7974:	bc 81       	ldd	r27, Y+4	; 0x04
    7976:	c8 16       	cp	r12, r24
    7978:	d9 06       	cpc	r13, r25
    797a:	ea 06       	cpc	r14, r26
    797c:	fb 06       	cpc	r15, r27
    797e:	60 f0       	brcs	.+24     	; 0x7998 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    7980:	92 e0       	ldi	r25, 0x02	; 2
    7982:	89 16       	cp	r8, r25
    7984:	91 04       	cpc	r9, r1
    7986:	a1 04       	cpc	r10, r1
    7988:	b1 04       	cpc	r11, r1
    798a:	08 f4       	brcc	.+2      	; 0x798e <create_chain+0xc2>
    798c:	61 c0       	rjmp	.+194    	; 0x7a50 <create_chain+0x184>
    798e:	a2 e0       	ldi	r26, 0x02	; 2
    7990:	ca 2e       	mov	r12, r26
    7992:	d1 2c       	mov	r13, r1
    7994:	e1 2c       	mov	r14, r1
    7996:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7998:	c1 01       	movw	r24, r2
    799a:	b7 01       	movw	r22, r14
    799c:	a6 01       	movw	r20, r12
    799e:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    79a2:	9b 01       	movw	r18, r22
    79a4:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    79a6:	61 15       	cp	r22, r1
    79a8:	71 05       	cpc	r23, r1
    79aa:	81 05       	cpc	r24, r1
    79ac:	91 05       	cpc	r25, r1
    79ae:	a9 f0       	breq	.+42     	; 0x79da <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    79b0:	6f 3f       	cpi	r22, 0xFF	; 255
    79b2:	af ef       	ldi	r26, 0xFF	; 255
    79b4:	7a 07       	cpc	r23, r26
    79b6:	af ef       	ldi	r26, 0xFF	; 255
    79b8:	8a 07       	cpc	r24, r26
    79ba:	af ef       	ldi	r26, 0xFF	; 255
    79bc:	9a 07       	cpc	r25, r26
    79be:	09 f4       	brne	.+2      	; 0x79c2 <create_chain+0xf6>
    79c0:	50 c0       	rjmp	.+160    	; 0x7a62 <create_chain+0x196>
    79c2:	61 30       	cpi	r22, 0x01	; 1
    79c4:	71 05       	cpc	r23, r1
    79c6:	81 05       	cpc	r24, r1
    79c8:	91 05       	cpc	r25, r1
    79ca:	09 f4       	brne	.+2      	; 0x79ce <create_chain+0x102>
    79cc:	4a c0       	rjmp	.+148    	; 0x7a62 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    79ce:	c8 14       	cp	r12, r8
    79d0:	d9 04       	cpc	r13, r9
    79d2:	ea 04       	cpc	r14, r10
    79d4:	fb 04       	cpc	r15, r11
    79d6:	31 f6       	brne	.-116    	; 0x7964 <create_chain+0x98>
    79d8:	3b c0       	rjmp	.+118    	; 0x7a50 <create_chain+0x184>
    79da:	bc 2c       	mov	r11, r12
    79dc:	ad 2c       	mov	r10, r13
    79de:	9e 2c       	mov	r9, r14
    79e0:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    79e2:	c1 01       	movw	r24, r2
    79e4:	a6 01       	movw	r20, r12
    79e6:	b7 01       	movw	r22, r14
    79e8:	0f ef       	ldi	r16, 0xFF	; 255
    79ea:	1f ef       	ldi	r17, 0xFF	; 255
    79ec:	2f ef       	ldi	r18, 0xFF	; 255
    79ee:	3f e0       	ldi	r19, 0x0F	; 15
    79f0:	0e 94 9c 3b 	call	0x7738	; 0x7738 <put_fat>
    79f4:	89 2b       	or	r24, r25
    79f6:	89 f5       	brne	.+98     	; 0x7a5a <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    79f8:	41 14       	cp	r4, r1
    79fa:	51 04       	cpc	r5, r1
    79fc:	61 04       	cpc	r6, r1
    79fe:	71 04       	cpc	r7, r1
    7a00:	49 f0       	breq	.+18     	; 0x7a14 <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    7a02:	c1 01       	movw	r24, r2
    7a04:	b3 01       	movw	r22, r6
    7a06:	a2 01       	movw	r20, r4
    7a08:	86 01       	movw	r16, r12
    7a0a:	97 01       	movw	r18, r14
    7a0c:	0e 94 9c 3b 	call	0x7738	; 0x7738 <put_fat>
    7a10:	89 2b       	or	r24, r25
    7a12:	19 f5       	brne	.+70     	; 0x7a5a <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    7a14:	f1 01       	movw	r30, r2
    7a16:	b2 86       	std	Z+10, r11	; 0x0a
    7a18:	a3 86       	std	Z+11, r10	; 0x0b
    7a1a:	94 86       	std	Z+12, r9	; 0x0c
    7a1c:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7a1e:	86 85       	ldd	r24, Z+14	; 0x0e
    7a20:	97 85       	ldd	r25, Z+15	; 0x0f
    7a22:	a0 89       	ldd	r26, Z+16	; 0x10
    7a24:	b1 89       	ldd	r27, Z+17	; 0x11
    7a26:	8f 3f       	cpi	r24, 0xFF	; 255
    7a28:	ff ef       	ldi	r31, 0xFF	; 255
    7a2a:	9f 07       	cpc	r25, r31
    7a2c:	ff ef       	ldi	r31, 0xFF	; 255
    7a2e:	af 07       	cpc	r26, r31
    7a30:	ff ef       	ldi	r31, 0xFF	; 255
    7a32:	bf 07       	cpc	r27, r31
    7a34:	51 f0       	breq	.+20     	; 0x7a4a <create_chain+0x17e>
		fs->free_clust--;
    7a36:	01 97       	sbiw	r24, 0x01	; 1
    7a38:	a1 09       	sbc	r26, r1
    7a3a:	b1 09       	sbc	r27, r1
    7a3c:	f1 01       	movw	r30, r2
    7a3e:	86 87       	std	Z+14, r24	; 0x0e
    7a40:	97 87       	std	Z+15, r25	; 0x0f
    7a42:	a0 8b       	std	Z+16, r26	; 0x10
    7a44:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    7a46:	81 e0       	ldi	r24, 0x01	; 1
    7a48:	81 87       	std	Z+9, r24	; 0x09
    7a4a:	a7 01       	movw	r20, r14
    7a4c:	96 01       	movw	r18, r12
    7a4e:	09 c0       	rjmp	.+18     	; 0x7a62 <create_chain+0x196>
    7a50:	20 e0       	ldi	r18, 0x00	; 0
    7a52:	30 e0       	ldi	r19, 0x00	; 0
    7a54:	40 e0       	ldi	r20, 0x00	; 0
    7a56:	50 e0       	ldi	r21, 0x00	; 0
    7a58:	04 c0       	rjmp	.+8      	; 0x7a62 <create_chain+0x196>
    7a5a:	2f ef       	ldi	r18, 0xFF	; 255
    7a5c:	3f ef       	ldi	r19, 0xFF	; 255
    7a5e:	4f ef       	ldi	r20, 0xFF	; 255
    7a60:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    7a62:	b9 01       	movw	r22, r18
    7a64:	ca 01       	movw	r24, r20
    7a66:	24 96       	adiw	r28, 0x04	; 4
    7a68:	e2 e1       	ldi	r30, 0x12	; 18
    7a6a:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00007a6e <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7a6e:	a6 e0       	ldi	r26, 0x06	; 6
    7a70:	b0 e0       	ldi	r27, 0x00	; 0
    7a72:	ed e3       	ldi	r30, 0x3D	; 61
    7a74:	fd e3       	ldi	r31, 0x3D	; 61
    7a76:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    7a7a:	8d 83       	std	Y+5, r24	; 0x05
    7a7c:	9e 83       	std	Y+6, r25	; 0x06
    7a7e:	3a 01       	movw	r6, r20
    7a80:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7a82:	dc 01       	movw	r26, r24
    7a84:	12 96       	adiw	r26, 0x02	; 2
    7a86:	6d 91       	ld	r22, X+
    7a88:	7c 91       	ld	r23, X
    7a8a:	13 97       	sbiw	r26, 0x03	; 3
    7a8c:	8d 91       	ld	r24, X+
    7a8e:	9c 91       	ld	r25, X
    7a90:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
    7a94:	8b 83       	std	Y+3, r24	; 0x03
    7a96:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7a98:	89 2b       	or	r24, r25
    7a9a:	09 f0       	breq	.+2      	; 0x7a9e <f_lseek+0x30>
    7a9c:	c7 c1       	rjmp	.+910    	; 0x7e2c <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    7aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    7aa2:	84 81       	ldd	r24, Z+4	; 0x04
    7aa4:	87 fd       	sbrc	r24, 7
    7aa6:	92 c0       	rjmp	.+292    	; 0x7bcc <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    7aa8:	ad 81       	ldd	r26, Y+5	; 0x05
    7aaa:	be 81       	ldd	r27, Y+6	; 0x06
    7aac:	1a 96       	adiw	r26, 0x0a	; 10
    7aae:	ad 90       	ld	r10, X+
    7ab0:	bd 90       	ld	r11, X+
    7ab2:	cd 90       	ld	r12, X+
    7ab4:	dc 90       	ld	r13, X
    7ab6:	1d 97       	sbiw	r26, 0x0d	; 13
    7ab8:	a6 14       	cp	r10, r6
    7aba:	b7 04       	cpc	r11, r7
    7abc:	c8 04       	cpc	r12, r8
    7abe:	d9 04       	cpc	r13, r9
    7ac0:	10 f4       	brcc	.+4      	; 0x7ac6 <f_lseek+0x58>
    7ac2:	81 ff       	sbrs	r24, 1
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <f_lseek+0x5c>
    7ac6:	64 01       	movw	r12, r8
    7ac8:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    7aca:	ed 81       	ldd	r30, Y+5	; 0x05
    7acc:	fe 81       	ldd	r31, Y+6	; 0x06
    7ace:	26 81       	ldd	r18, Z+6	; 0x06
    7ad0:	37 81       	ldd	r19, Z+7	; 0x07
    7ad2:	40 85       	ldd	r20, Z+8	; 0x08
    7ad4:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    7ad6:	16 82       	std	Z+6, r1	; 0x06
    7ad8:	17 82       	std	Z+7, r1	; 0x07
    7ada:	10 86       	std	Z+8, r1	; 0x08
    7adc:	11 86       	std	Z+9, r1	; 0x09
    7ade:	8f ef       	ldi	r24, 0xFF	; 255
    7ae0:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    7ae2:	a1 14       	cp	r10, r1
    7ae4:	b1 04       	cpc	r11, r1
    7ae6:	c1 04       	cpc	r12, r1
    7ae8:	d1 04       	cpc	r13, r1
    7aea:	09 f4       	brne	.+2      	; 0x7aee <f_lseek+0x80>
    7aec:	6b c1       	rjmp	.+726    	; 0x7dc4 <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    7aee:	01 90       	ld	r0, Z+
    7af0:	f0 81       	ld	r31, Z
    7af2:	e0 2d       	mov	r30, r0
    7af4:	e9 83       	std	Y+1, r30	; 0x01
    7af6:	fa 83       	std	Y+2, r31	; 0x02
    7af8:	82 81       	ldd	r24, Z+2	; 0x02
    7afa:	68 2e       	mov	r6, r24
    7afc:	77 24       	eor	r7, r7
    7afe:	88 24       	eor	r8, r8
    7b00:	99 24       	eor	r9, r9
    7b02:	69 e0       	ldi	r22, 0x09	; 9
    7b04:	66 0c       	add	r6, r6
    7b06:	77 1c       	adc	r7, r7
    7b08:	88 1c       	adc	r8, r8
    7b0a:	99 1c       	adc	r9, r9
    7b0c:	6a 95       	dec	r22
    7b0e:	d1 f7       	brne	.-12     	; 0x7b04 <f_lseek+0x96>
		if (ifptr > 0 &&
    7b10:	21 15       	cp	r18, r1
    7b12:	31 05       	cpc	r19, r1
    7b14:	41 05       	cpc	r20, r1
    7b16:	51 05       	cpc	r21, r1
    7b18:	c1 f1       	breq	.+112    	; 0x7b8a <f_lseek+0x11c>
    7b1a:	19 01       	movw	r2, r18
    7b1c:	2a 01       	movw	r4, r20
    7b1e:	08 94       	sec
    7b20:	21 08       	sbc	r2, r1
    7b22:	31 08       	sbc	r3, r1
    7b24:	41 08       	sbc	r4, r1
    7b26:	51 08       	sbc	r5, r1
    7b28:	c6 01       	movw	r24, r12
    7b2a:	b5 01       	movw	r22, r10
    7b2c:	61 50       	subi	r22, 0x01	; 1
    7b2e:	70 40       	sbci	r23, 0x00	; 0
    7b30:	80 40       	sbci	r24, 0x00	; 0
    7b32:	90 40       	sbci	r25, 0x00	; 0
    7b34:	a4 01       	movw	r20, r8
    7b36:	93 01       	movw	r18, r6
    7b38:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    7b3c:	79 01       	movw	r14, r18
    7b3e:	8a 01       	movw	r16, r20
    7b40:	c2 01       	movw	r24, r4
    7b42:	b1 01       	movw	r22, r2
    7b44:	a4 01       	movw	r20, r8
    7b46:	93 01       	movw	r18, r6
    7b48:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    7b4c:	e2 16       	cp	r14, r18
    7b4e:	f3 06       	cpc	r15, r19
    7b50:	04 07       	cpc	r16, r20
    7b52:	15 07       	cpc	r17, r21
    7b54:	d0 f0       	brcs	.+52     	; 0x7b8a <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    7b56:	88 27       	eor	r24, r24
    7b58:	99 27       	eor	r25, r25
    7b5a:	dc 01       	movw	r26, r24
    7b5c:	86 19       	sub	r24, r6
    7b5e:	97 09       	sbc	r25, r7
    7b60:	a8 09       	sbc	r26, r8
    7b62:	b9 09       	sbc	r27, r9
    7b64:	82 21       	and	r24, r2
    7b66:	93 21       	and	r25, r3
    7b68:	a4 21       	and	r26, r4
    7b6a:	b5 21       	and	r27, r5
    7b6c:	ed 81       	ldd	r30, Y+5	; 0x05
    7b6e:	fe 81       	ldd	r31, Y+6	; 0x06
    7b70:	86 83       	std	Z+6, r24	; 0x06
    7b72:	97 83       	std	Z+7, r25	; 0x07
    7b74:	a0 87       	std	Z+8, r26	; 0x08
    7b76:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    7b78:	a8 1a       	sub	r10, r24
    7b7a:	b9 0a       	sbc	r11, r25
    7b7c:	ca 0a       	sbc	r12, r26
    7b7e:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    7b80:	42 89       	ldd	r20, Z+18	; 0x12
    7b82:	53 89       	ldd	r21, Z+19	; 0x13
    7b84:	64 89       	ldd	r22, Z+20	; 0x14
    7b86:	75 89       	ldd	r23, Z+21	; 0x15
    7b88:	47 c0       	rjmp	.+142    	; 0x7c18 <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    7b8a:	ad 81       	ldd	r26, Y+5	; 0x05
    7b8c:	be 81       	ldd	r27, Y+6	; 0x06
    7b8e:	1e 96       	adiw	r26, 0x0e	; 14
    7b90:	4d 91       	ld	r20, X+
    7b92:	5d 91       	ld	r21, X+
    7b94:	6d 91       	ld	r22, X+
    7b96:	7c 91       	ld	r23, X
    7b98:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    7b9a:	41 15       	cp	r20, r1
    7b9c:	51 05       	cpc	r21, r1
    7b9e:	61 05       	cpc	r22, r1
    7ba0:	71 05       	cpc	r23, r1
    7ba2:	a1 f5       	brne	.+104    	; 0x7c0c <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    7ba4:	89 81       	ldd	r24, Y+1	; 0x01
    7ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    7ba8:	40 e0       	ldi	r20, 0x00	; 0
    7baa:	50 e0       	ldi	r21, 0x00	; 0
    7bac:	60 e0       	ldi	r22, 0x00	; 0
    7bae:	70 e0       	ldi	r23, 0x00	; 0
    7bb0:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
    7bb4:	ab 01       	movw	r20, r22
    7bb6:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    7bb8:	41 30       	cpi	r20, 0x01	; 1
    7bba:	51 05       	cpc	r21, r1
    7bbc:	61 05       	cpc	r22, r1
    7bbe:	71 05       	cpc	r23, r1
    7bc0:	51 f4       	brne	.+20     	; 0x7bd6 <f_lseek+0x168>
    7bc2:	ed 81       	ldd	r30, Y+5	; 0x05
    7bc4:	fe 81       	ldd	r31, Y+6	; 0x06
    7bc6:	84 81       	ldd	r24, Z+4	; 0x04
    7bc8:	80 68       	ori	r24, 0x80	; 128
    7bca:	84 83       	std	Z+4, r24	; 0x04
    7bcc:	82 e0       	ldi	r24, 0x02	; 2
    7bce:	90 e0       	ldi	r25, 0x00	; 0
    7bd0:	8b 83       	std	Y+3, r24	; 0x03
    7bd2:	9c 83       	std	Y+4, r25	; 0x04
    7bd4:	2b c1       	rjmp	.+598    	; 0x7e2c <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7bd6:	4f 3f       	cpi	r20, 0xFF	; 255
    7bd8:	9f ef       	ldi	r25, 0xFF	; 255
    7bda:	59 07       	cpc	r21, r25
    7bdc:	9f ef       	ldi	r25, 0xFF	; 255
    7bde:	69 07       	cpc	r22, r25
    7be0:	9f ef       	ldi	r25, 0xFF	; 255
    7be2:	79 07       	cpc	r23, r25
    7be4:	59 f4       	brne	.+22     	; 0x7bfc <f_lseek+0x18e>
    7be6:	ad 81       	ldd	r26, Y+5	; 0x05
    7be8:	be 81       	ldd	r27, Y+6	; 0x06
    7bea:	14 96       	adiw	r26, 0x04	; 4
    7bec:	8c 91       	ld	r24, X
    7bee:	14 97       	sbiw	r26, 0x04	; 4
    7bf0:	80 68       	ori	r24, 0x80	; 128
    7bf2:	14 96       	adiw	r26, 0x04	; 4
    7bf4:	8c 93       	st	X, r24
    7bf6:	e1 e0       	ldi	r30, 0x01	; 1
    7bf8:	f0 e0       	ldi	r31, 0x00	; 0
    7bfa:	d7 c0       	rjmp	.+430    	; 0x7daa <f_lseek+0x33c>
				fp->org_clust = clst;
    7bfc:	ad 81       	ldd	r26, Y+5	; 0x05
    7bfe:	be 81       	ldd	r27, Y+6	; 0x06
    7c00:	1e 96       	adiw	r26, 0x0e	; 14
    7c02:	4d 93       	st	X+, r20
    7c04:	5d 93       	st	X+, r21
    7c06:	6d 93       	st	X+, r22
    7c08:	7c 93       	st	X, r23
    7c0a:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    7c0c:	ed 81       	ldd	r30, Y+5	; 0x05
    7c0e:	fe 81       	ldd	r31, Y+6	; 0x06
    7c10:	42 8b       	std	Z+18, r20	; 0x12
    7c12:	53 8b       	std	Z+19, r21	; 0x13
    7c14:	64 8b       	std	Z+20, r22	; 0x14
    7c16:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    7c18:	41 15       	cp	r20, r1
    7c1a:	51 05       	cpc	r21, r1
    7c1c:	61 05       	cpc	r22, r1
    7c1e:	71 05       	cpc	r23, r1
    7c20:	09 f0       	breq	.+2      	; 0x7c24 <f_lseek+0x1b6>
    7c22:	59 c0       	rjmp	.+178    	; 0x7cd6 <f_lseek+0x268>
    7c24:	cf c0       	rjmp	.+414    	; 0x7dc4 <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    7c26:	ad 81       	ldd	r26, Y+5	; 0x05
    7c28:	be 81       	ldd	r27, Y+6	; 0x06
    7c2a:	14 96       	adiw	r26, 0x04	; 4
    7c2c:	8c 91       	ld	r24, X
    7c2e:	14 97       	sbiw	r26, 0x04	; 4
    7c30:	2d 91       	ld	r18, X+
    7c32:	3c 91       	ld	r19, X
    7c34:	81 ff       	sbrs	r24, 1
    7c36:	0d c0       	rjmp	.+26     	; 0x7c52 <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    7c38:	c9 01       	movw	r24, r18
    7c3a:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
    7c3e:	ab 01       	movw	r20, r22
    7c40:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    7c42:	41 15       	cp	r20, r1
    7c44:	51 05       	cpc	r21, r1
    7c46:	61 05       	cpc	r22, r1
    7c48:	71 05       	cpc	r23, r1
    7c4a:	41 f4       	brne	.+16     	; 0x7c5c <f_lseek+0x1ee>
    7c4c:	64 01       	movw	r12, r8
    7c4e:	53 01       	movw	r10, r6
    7c50:	48 c0       	rjmp	.+144    	; 0x7ce2 <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    7c52:	c9 01       	movw	r24, r18
    7c54:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    7c58:	ab 01       	movw	r20, r22
    7c5a:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7c5c:	4f 3f       	cpi	r20, 0xFF	; 255
    7c5e:	bf ef       	ldi	r27, 0xFF	; 255
    7c60:	5b 07       	cpc	r21, r27
    7c62:	bf ef       	ldi	r27, 0xFF	; 255
    7c64:	6b 07       	cpc	r22, r27
    7c66:	bf ef       	ldi	r27, 0xFF	; 255
    7c68:	7b 07       	cpc	r23, r27
    7c6a:	41 f4       	brne	.+16     	; 0x7c7c <f_lseek+0x20e>
    7c6c:	ed 81       	ldd	r30, Y+5	; 0x05
    7c6e:	fe 81       	ldd	r31, Y+6	; 0x06
    7c70:	84 81       	ldd	r24, Z+4	; 0x04
    7c72:	80 68       	ori	r24, 0x80	; 128
    7c74:	84 83       	std	Z+4, r24	; 0x04
    7c76:	81 e0       	ldi	r24, 0x01	; 1
    7c78:	90 e0       	ldi	r25, 0x00	; 0
    7c7a:	aa cf       	rjmp	.-172    	; 0x7bd0 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    7c7c:	42 30       	cpi	r20, 0x02	; 2
    7c7e:	51 05       	cpc	r21, r1
    7c80:	61 05       	cpc	r22, r1
    7c82:	71 05       	cpc	r23, r1
    7c84:	08 f4       	brcc	.+2      	; 0x7c88 <f_lseek+0x21a>
    7c86:	9d cf       	rjmp	.-198    	; 0x7bc2 <f_lseek+0x154>
    7c88:	ad 81       	ldd	r26, Y+5	; 0x05
    7c8a:	be 81       	ldd	r27, Y+6	; 0x06
    7c8c:	ed 91       	ld	r30, X+
    7c8e:	fc 91       	ld	r31, X
    7c90:	86 8d       	ldd	r24, Z+30	; 0x1e
    7c92:	97 8d       	ldd	r25, Z+31	; 0x1f
    7c94:	a0 a1       	ldd	r26, Z+32	; 0x20
    7c96:	b1 a1       	ldd	r27, Z+33	; 0x21
    7c98:	48 17       	cp	r20, r24
    7c9a:	59 07       	cpc	r21, r25
    7c9c:	6a 07       	cpc	r22, r26
    7c9e:	7b 07       	cpc	r23, r27
    7ca0:	08 f0       	brcs	.+2      	; 0x7ca4 <f_lseek+0x236>
    7ca2:	8f cf       	rjmp	.-226    	; 0x7bc2 <f_lseek+0x154>
				fp->curr_clust = clst;
    7ca4:	ad 81       	ldd	r26, Y+5	; 0x05
    7ca6:	be 81       	ldd	r27, Y+6	; 0x06
    7ca8:	52 96       	adiw	r26, 0x12	; 18
    7caa:	4d 93       	st	X+, r20
    7cac:	5d 93       	st	X+, r21
    7cae:	6d 93       	st	X+, r22
    7cb0:	7c 93       	st	X, r23
    7cb2:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    7cb4:	fd 01       	movw	r30, r26
    7cb6:	86 81       	ldd	r24, Z+6	; 0x06
    7cb8:	97 81       	ldd	r25, Z+7	; 0x07
    7cba:	a0 85       	ldd	r26, Z+8	; 0x08
    7cbc:	b1 85       	ldd	r27, Z+9	; 0x09
    7cbe:	86 0d       	add	r24, r6
    7cc0:	97 1d       	adc	r25, r7
    7cc2:	a8 1d       	adc	r26, r8
    7cc4:	b9 1d       	adc	r27, r9
    7cc6:	86 83       	std	Z+6, r24	; 0x06
    7cc8:	97 83       	std	Z+7, r25	; 0x07
    7cca:	a0 87       	std	Z+8, r26	; 0x08
    7ccc:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    7cce:	a6 18       	sub	r10, r6
    7cd0:	b7 08       	sbc	r11, r7
    7cd2:	c8 08       	sbc	r12, r8
    7cd4:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    7cd6:	6a 14       	cp	r6, r10
    7cd8:	7b 04       	cpc	r7, r11
    7cda:	8c 04       	cpc	r8, r12
    7cdc:	9d 04       	cpc	r9, r13
    7cde:	08 f4       	brcc	.+2      	; 0x7ce2 <f_lseek+0x274>
    7ce0:	a2 cf       	rjmp	.-188    	; 0x7c26 <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    7ce2:	ed 81       	ldd	r30, Y+5	; 0x05
    7ce4:	fe 81       	ldd	r31, Y+6	; 0x06
    7ce6:	86 81       	ldd	r24, Z+6	; 0x06
    7ce8:	97 81       	ldd	r25, Z+7	; 0x07
    7cea:	a0 85       	ldd	r26, Z+8	; 0x08
    7cec:	b1 85       	ldd	r27, Z+9	; 0x09
    7cee:	8a 0d       	add	r24, r10
    7cf0:	9b 1d       	adc	r25, r11
    7cf2:	ac 1d       	adc	r26, r12
    7cf4:	bd 1d       	adc	r27, r13
    7cf6:	86 83       	std	Z+6, r24	; 0x06
    7cf8:	97 83       	std	Z+7, r25	; 0x07
    7cfa:	a0 87       	std	Z+8, r26	; 0x08
    7cfc:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    7cfe:	d6 01       	movw	r26, r12
    7d00:	c5 01       	movw	r24, r10
    7d02:	29 e0       	ldi	r18, 0x09	; 9
    7d04:	b6 95       	lsr	r27
    7d06:	a7 95       	ror	r26
    7d08:	97 95       	ror	r25
    7d0a:	87 95       	ror	r24
    7d0c:	2a 95       	dec	r18
    7d0e:	d1 f7       	brne	.-12     	; 0x7d04 <f_lseek+0x296>
    7d10:	e8 2e       	mov	r14, r24
    7d12:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    7d14:	8f ef       	ldi	r24, 0xFF	; 255
    7d16:	91 e0       	ldi	r25, 0x01	; 1
    7d18:	a0 e0       	ldi	r26, 0x00	; 0
    7d1a:	b0 e0       	ldi	r27, 0x00	; 0
    7d1c:	a8 22       	and	r10, r24
    7d1e:	b9 22       	and	r11, r25
    7d20:	ca 22       	and	r12, r26
    7d22:	db 22       	and	r13, r27
    7d24:	a1 14       	cp	r10, r1
    7d26:	b1 04       	cpc	r11, r1
    7d28:	c1 04       	cpc	r12, r1
    7d2a:	d1 04       	cpc	r13, r1
    7d2c:	09 f4       	brne	.+2      	; 0x7d30 <f_lseek+0x2c2>
    7d2e:	4a c0       	rjmp	.+148    	; 0x7dc4 <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    7d30:	80 80       	ld	r8, Z
    7d32:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7d34:	8e ef       	ldi	r24, 0xFE	; 254
    7d36:	a8 2e       	mov	r10, r24
    7d38:	8f ef       	ldi	r24, 0xFF	; 255
    7d3a:	b8 2e       	mov	r11, r24
    7d3c:	8f ef       	ldi	r24, 0xFF	; 255
    7d3e:	c8 2e       	mov	r12, r24
    7d40:	8f ef       	ldi	r24, 0xFF	; 255
    7d42:	d8 2e       	mov	r13, r24
    7d44:	a4 0e       	add	r10, r20
    7d46:	b5 1e       	adc	r11, r21
    7d48:	c6 1e       	adc	r12, r22
    7d4a:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7d4c:	f4 01       	movw	r30, r8
    7d4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7d50:	97 8d       	ldd	r25, Z+31	; 0x1f
    7d52:	a0 a1       	ldd	r26, Z+32	; 0x20
    7d54:	b1 a1       	ldd	r27, Z+33	; 0x21
    7d56:	02 97       	sbiw	r24, 0x02	; 2
    7d58:	a1 09       	sbc	r26, r1
    7d5a:	b1 09       	sbc	r27, r1
    7d5c:	a8 16       	cp	r10, r24
    7d5e:	b9 06       	cpc	r11, r25
    7d60:	ca 06       	cpc	r12, r26
    7d62:	db 06       	cpc	r13, r27
    7d64:	c0 f4       	brcc	.+48     	; 0x7d96 <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    7d66:	22 81       	ldd	r18, Z+2	; 0x02
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	40 e0       	ldi	r20, 0x00	; 0
    7d6c:	50 e0       	ldi	r21, 0x00	; 0
    7d6e:	c6 01       	movw	r24, r12
    7d70:	b5 01       	movw	r22, r10
    7d72:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    7d76:	9b 01       	movw	r18, r22
    7d78:	ac 01       	movw	r20, r24
    7d7a:	f4 01       	movw	r30, r8
    7d7c:	82 a5       	ldd	r24, Z+42	; 0x2a
    7d7e:	93 a5       	ldd	r25, Z+43	; 0x2b
    7d80:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7d82:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7d84:	28 0f       	add	r18, r24
    7d86:	39 1f       	adc	r19, r25
    7d88:	4a 1f       	adc	r20, r26
    7d8a:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    7d8c:	21 15       	cp	r18, r1
    7d8e:	31 05       	cpc	r19, r1
    7d90:	41 05       	cpc	r20, r1
    7d92:	51 05       	cpc	r21, r1
    7d94:	69 f4       	brne	.+26     	; 0x7db0 <f_lseek+0x342>
    7d96:	ad 81       	ldd	r26, Y+5	; 0x05
    7d98:	be 81       	ldd	r27, Y+6	; 0x06
    7d9a:	14 96       	adiw	r26, 0x04	; 4
    7d9c:	8c 91       	ld	r24, X
    7d9e:	14 97       	sbiw	r26, 0x04	; 4
    7da0:	80 68       	ori	r24, 0x80	; 128
    7da2:	14 96       	adiw	r26, 0x04	; 4
    7da4:	8c 93       	st	X, r24
    7da6:	e2 e0       	ldi	r30, 0x02	; 2
    7da8:	f0 e0       	ldi	r31, 0x00	; 0
    7daa:	eb 83       	std	Y+3, r30	; 0x03
    7dac:	fc 83       	std	Y+4, r31	; 0x04
    7dae:	3e c0       	rjmp	.+124    	; 0x7e2c <f_lseek+0x3be>
				nsect += fp->csect;
    7db0:	2e 0d       	add	r18, r14
    7db2:	31 1d       	adc	r19, r1
    7db4:	41 1d       	adc	r20, r1
    7db6:	51 1d       	adc	r21, r1
				fp->csect++;
    7db8:	e3 94       	inc	r14
    7dba:	ad 81       	ldd	r26, Y+5	; 0x05
    7dbc:	be 81       	ldd	r27, Y+6	; 0x06
    7dbe:	15 96       	adiw	r26, 0x05	; 5
    7dc0:	ec 92       	st	X, r14
    7dc2:	04 c0       	rjmp	.+8      	; 0x7dcc <f_lseek+0x35e>
    7dc4:	20 e0       	ldi	r18, 0x00	; 0
    7dc6:	30 e0       	ldi	r19, 0x00	; 0
    7dc8:	40 e0       	ldi	r20, 0x00	; 0
    7dca:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    7dcc:	ed 81       	ldd	r30, Y+5	; 0x05
    7dce:	fe 81       	ldd	r31, Y+6	; 0x06
    7dd0:	86 81       	ldd	r24, Z+6	; 0x06
    7dd2:	97 81       	ldd	r25, Z+7	; 0x07
    7dd4:	a0 85       	ldd	r26, Z+8	; 0x08
    7dd6:	b1 85       	ldd	r27, Z+9	; 0x09
    7dd8:	91 70       	andi	r25, 0x01	; 1
    7dda:	a0 70       	andi	r26, 0x00	; 0
    7ddc:	b0 70       	andi	r27, 0x00	; 0
    7dde:	00 97       	sbiw	r24, 0x00	; 0
    7de0:	a1 05       	cpc	r26, r1
    7de2:	b1 05       	cpc	r27, r1
    7de4:	69 f0       	breq	.+26     	; 0x7e00 <f_lseek+0x392>
    7de6:	86 89       	ldd	r24, Z+22	; 0x16
    7de8:	97 89       	ldd	r25, Z+23	; 0x17
    7dea:	a0 8d       	ldd	r26, Z+24	; 0x18
    7dec:	b1 8d       	ldd	r27, Z+25	; 0x19
    7dee:	28 17       	cp	r18, r24
    7df0:	39 07       	cpc	r19, r25
    7df2:	4a 07       	cpc	r20, r26
    7df4:	5b 07       	cpc	r21, r27
    7df6:	21 f0       	breq	.+8      	; 0x7e00 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    7df8:	26 8b       	std	Z+22, r18	; 0x16
    7dfa:	37 8b       	std	Z+23, r19	; 0x17
    7dfc:	40 8f       	std	Z+24, r20	; 0x18
    7dfe:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    7e00:	ed 81       	ldd	r30, Y+5	; 0x05
    7e02:	fe 81       	ldd	r31, Y+6	; 0x06
    7e04:	26 81       	ldd	r18, Z+6	; 0x06
    7e06:	37 81       	ldd	r19, Z+7	; 0x07
    7e08:	40 85       	ldd	r20, Z+8	; 0x08
    7e0a:	51 85       	ldd	r21, Z+9	; 0x09
    7e0c:	82 85       	ldd	r24, Z+10	; 0x0a
    7e0e:	93 85       	ldd	r25, Z+11	; 0x0b
    7e10:	a4 85       	ldd	r26, Z+12	; 0x0c
    7e12:	b5 85       	ldd	r27, Z+13	; 0x0d
    7e14:	82 17       	cp	r24, r18
    7e16:	93 07       	cpc	r25, r19
    7e18:	a4 07       	cpc	r26, r20
    7e1a:	b5 07       	cpc	r27, r21
    7e1c:	38 f4       	brcc	.+14     	; 0x7e2c <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    7e1e:	22 87       	std	Z+10, r18	; 0x0a
    7e20:	33 87       	std	Z+11, r19	; 0x0b
    7e22:	44 87       	std	Z+12, r20	; 0x0c
    7e24:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7e26:	84 81       	ldd	r24, Z+4	; 0x04
    7e28:	80 62       	ori	r24, 0x20	; 32
    7e2a:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    7e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    7e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    7e30:	26 96       	adiw	r28, 0x06	; 6
    7e32:	e2 e1       	ldi	r30, 0x12	; 18
    7e34:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00007e38 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7e38:	a0 e0       	ldi	r26, 0x00	; 0
    7e3a:	b0 e0       	ldi	r27, 0x00	; 0
    7e3c:	e2 e2       	ldi	r30, 0x22	; 34
    7e3e:	ff e3       	ldi	r31, 0x3F	; 63
    7e40:	0c 94 25 59 	jmp	0xb24a	; 0xb24a <__prologue_saves__+0xe>
    7e44:	ec 01       	movw	r28, r24
    7e46:	7a 01       	movw	r14, r20
    7e48:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    7e4a:	42 30       	cpi	r20, 0x02	; 2
    7e4c:	51 05       	cpc	r21, r1
    7e4e:	61 05       	cpc	r22, r1
    7e50:	71 05       	cpc	r23, r1
    7e52:	08 f4       	brcc	.+2      	; 0x7e56 <remove_chain+0x1e>
    7e54:	5a c0       	rjmp	.+180    	; 0x7f0a <remove_chain+0xd2>
    7e56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7e58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7e5a:	a8 a1       	ldd	r26, Y+32	; 0x20
    7e5c:	b9 a1       	ldd	r27, Y+33	; 0x21
    7e5e:	48 17       	cp	r20, r24
    7e60:	59 07       	cpc	r21, r25
    7e62:	6a 07       	cpc	r22, r26
    7e64:	7b 07       	cpc	r23, r27
    7e66:	08 f4       	brcc	.+2      	; 0x7e6a <remove_chain+0x32>
    7e68:	43 c0       	rjmp	.+134    	; 0x7ef0 <remove_chain+0xb8>
    7e6a:	4f c0       	rjmp	.+158    	; 0x7f0a <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7e6c:	ce 01       	movw	r24, r28
    7e6e:	b8 01       	movw	r22, r16
    7e70:	a7 01       	movw	r20, r14
    7e72:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    7e76:	5b 01       	movw	r10, r22
    7e78:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    7e7a:	61 15       	cp	r22, r1
    7e7c:	71 05       	cpc	r23, r1
    7e7e:	81 05       	cpc	r24, r1
    7e80:	91 05       	cpc	r25, r1
    7e82:	09 f4       	brne	.+2      	; 0x7e86 <remove_chain+0x4e>
    7e84:	45 c0       	rjmp	.+138    	; 0x7f10 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7e86:	81 e0       	ldi	r24, 0x01	; 1
    7e88:	a8 16       	cp	r10, r24
    7e8a:	b1 04       	cpc	r11, r1
    7e8c:	c1 04       	cpc	r12, r1
    7e8e:	d1 04       	cpc	r13, r1
    7e90:	e1 f1       	breq	.+120    	; 0x7f0a <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7e92:	2f ef       	ldi	r18, 0xFF	; 255
    7e94:	a2 16       	cp	r10, r18
    7e96:	2f ef       	ldi	r18, 0xFF	; 255
    7e98:	b2 06       	cpc	r11, r18
    7e9a:	2f ef       	ldi	r18, 0xFF	; 255
    7e9c:	c2 06       	cpc	r12, r18
    7e9e:	2f ef       	ldi	r18, 0xFF	; 255
    7ea0:	d2 06       	cpc	r13, r18
    7ea2:	19 f4       	brne	.+6      	; 0x7eaa <remove_chain+0x72>
    7ea4:	21 e0       	ldi	r18, 0x01	; 1
    7ea6:	30 e0       	ldi	r19, 0x00	; 0
    7ea8:	35 c0       	rjmp	.+106    	; 0x7f14 <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7eaa:	ce 01       	movw	r24, r28
    7eac:	b8 01       	movw	r22, r16
    7eae:	a7 01       	movw	r20, r14
    7eb0:	00 e0       	ldi	r16, 0x00	; 0
    7eb2:	10 e0       	ldi	r17, 0x00	; 0
    7eb4:	20 e0       	ldi	r18, 0x00	; 0
    7eb6:	30 e0       	ldi	r19, 0x00	; 0
    7eb8:	0e 94 9c 3b 	call	0x7738	; 0x7738 <put_fat>
    7ebc:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    7ebe:	00 97       	sbiw	r24, 0x00	; 0
    7ec0:	49 f5       	brne	.+82     	; 0x7f14 <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7ec2:	8e 85       	ldd	r24, Y+14	; 0x0e
    7ec4:	9f 85       	ldd	r25, Y+15	; 0x0f
    7ec6:	a8 89       	ldd	r26, Y+16	; 0x10
    7ec8:	b9 89       	ldd	r27, Y+17	; 0x11
    7eca:	8f 3f       	cpi	r24, 0xFF	; 255
    7ecc:	2f ef       	ldi	r18, 0xFF	; 255
    7ece:	92 07       	cpc	r25, r18
    7ed0:	2f ef       	ldi	r18, 0xFF	; 255
    7ed2:	a2 07       	cpc	r26, r18
    7ed4:	2f ef       	ldi	r18, 0xFF	; 255
    7ed6:	b2 07       	cpc	r27, r18
    7ed8:	41 f0       	breq	.+16     	; 0x7eea <remove_chain+0xb2>
				fs->free_clust++;
    7eda:	01 96       	adiw	r24, 0x01	; 1
    7edc:	a1 1d       	adc	r26, r1
    7ede:	b1 1d       	adc	r27, r1
    7ee0:	8e 87       	std	Y+14, r24	; 0x0e
    7ee2:	9f 87       	std	Y+15, r25	; 0x0f
    7ee4:	a8 8b       	std	Y+16, r26	; 0x10
    7ee6:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    7ee8:	99 86       	std	Y+9, r9	; 0x09
    7eea:	86 01       	movw	r16, r12
    7eec:	75 01       	movw	r14, r10
    7eee:	02 c0       	rjmp	.+4      	; 0x7ef4 <remove_chain+0xbc>
    7ef0:	99 24       	eor	r9, r9
    7ef2:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    7ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7ef6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7ef8:	a8 a1       	ldd	r26, Y+32	; 0x20
    7efa:	b9 a1       	ldd	r27, Y+33	; 0x21
    7efc:	e8 16       	cp	r14, r24
    7efe:	f9 06       	cpc	r15, r25
    7f00:	0a 07       	cpc	r16, r26
    7f02:	1b 07       	cpc	r17, r27
    7f04:	08 f4       	brcc	.+2      	; 0x7f08 <remove_chain+0xd0>
    7f06:	b2 cf       	rjmp	.-156    	; 0x7e6c <remove_chain+0x34>
    7f08:	03 c0       	rjmp	.+6      	; 0x7f10 <remove_chain+0xd8>
    7f0a:	22 e0       	ldi	r18, 0x02	; 2
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
    7f0e:	02 c0       	rjmp	.+4      	; 0x7f14 <remove_chain+0xdc>
    7f10:	20 e0       	ldi	r18, 0x00	; 0
    7f12:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    7f14:	c9 01       	movw	r24, r18
    7f16:	cd b7       	in	r28, 0x3d	; 61
    7f18:	de b7       	in	r29, 0x3e	; 62
    7f1a:	eb e0       	ldi	r30, 0x0B	; 11
    7f1c:	0c 94 41 59 	jmp	0xb282	; 0xb282 <__epilogue_restores__+0xe>

00007f20 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    7f20:	a0 e0       	ldi	r26, 0x00	; 0
    7f22:	b0 e0       	ldi	r27, 0x00	; 0
    7f24:	e6 e9       	ldi	r30, 0x96	; 150
    7f26:	ff e3       	ldi	r31, 0x3F	; 63
    7f28:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    7f2c:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7f2e:	6a 81       	ldd	r22, Y+2	; 0x02
    7f30:	7b 81       	ldd	r23, Y+3	; 0x03
    7f32:	88 81       	ld	r24, Y
    7f34:	99 81       	ldd	r25, Y+1	; 0x01
    7f36:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
    7f3a:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7f3c:	00 97       	sbiw	r24, 0x00	; 0
    7f3e:	09 f0       	breq	.+2      	; 0x7f42 <f_truncate+0x22>
    7f40:	72 c0       	rjmp	.+228    	; 0x8026 <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7f42:	6c 81       	ldd	r22, Y+4	; 0x04
    7f44:	67 ff       	sbrs	r22, 7
    7f46:	03 c0       	rjmp	.+6      	; 0x7f4e <f_truncate+0x2e>
    7f48:	02 e0       	ldi	r16, 0x02	; 2
    7f4a:	10 e0       	ldi	r17, 0x00	; 0
    7f4c:	6c c0       	rjmp	.+216    	; 0x8026 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    7f4e:	61 fd       	sbrc	r22, 1
    7f50:	03 c0       	rjmp	.+6      	; 0x7f58 <f_truncate+0x38>
    7f52:	07 e0       	ldi	r16, 0x07	; 7
    7f54:	10 e0       	ldi	r17, 0x00	; 0
    7f56:	67 c0       	rjmp	.+206    	; 0x8026 <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    7f58:	2e 81       	ldd	r18, Y+6	; 0x06
    7f5a:	3f 81       	ldd	r19, Y+7	; 0x07
    7f5c:	48 85       	ldd	r20, Y+8	; 0x08
    7f5e:	59 85       	ldd	r21, Y+9	; 0x09
    7f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f62:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f64:	ac 85       	ldd	r26, Y+12	; 0x0c
    7f66:	bd 85       	ldd	r27, Y+13	; 0x0d
    7f68:	28 17       	cp	r18, r24
    7f6a:	39 07       	cpc	r19, r25
    7f6c:	4a 07       	cpc	r20, r26
    7f6e:	5b 07       	cpc	r21, r27
    7f70:	08 f0       	brcs	.+2      	; 0x7f74 <f_truncate+0x54>
    7f72:	59 c0       	rjmp	.+178    	; 0x8026 <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    7f74:	2a 87       	std	Y+10, r18	; 0x0a
    7f76:	3b 87       	std	Y+11, r19	; 0x0b
    7f78:	4c 87       	std	Y+12, r20	; 0x0c
    7f7a:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    7f7c:	60 62       	ori	r22, 0x20	; 32
    7f7e:	6c 83       	std	Y+4, r22	; 0x04
    7f80:	88 81       	ld	r24, Y
    7f82:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    7f84:	21 15       	cp	r18, r1
    7f86:	31 05       	cpc	r19, r1
    7f88:	41 05       	cpc	r20, r1
    7f8a:	51 05       	cpc	r21, r1
    7f8c:	61 f4       	brne	.+24     	; 0x7fa6 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    7f8e:	4e 85       	ldd	r20, Y+14	; 0x0e
    7f90:	5f 85       	ldd	r21, Y+15	; 0x0f
    7f92:	68 89       	ldd	r22, Y+16	; 0x10
    7f94:	79 89       	ldd	r23, Y+17	; 0x11
    7f96:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <remove_chain>
    7f9a:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    7f9c:	1e 86       	std	Y+14, r1	; 0x0e
    7f9e:	1f 86       	std	Y+15, r1	; 0x0f
    7fa0:	18 8a       	std	Y+16, r1	; 0x10
    7fa2:	19 8a       	std	Y+17, r1	; 0x11
    7fa4:	3a c0       	rjmp	.+116    	; 0x801a <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    7fa6:	4a 89       	ldd	r20, Y+18	; 0x12
    7fa8:	5b 89       	ldd	r21, Y+19	; 0x13
    7faa:	6c 89       	ldd	r22, Y+20	; 0x14
    7fac:	7d 89       	ldd	r23, Y+21	; 0x15
    7fae:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    7fb2:	6b 01       	movw	r12, r22
    7fb4:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    7fb6:	8f ef       	ldi	r24, 0xFF	; 255
    7fb8:	c8 16       	cp	r12, r24
    7fba:	8f ef       	ldi	r24, 0xFF	; 255
    7fbc:	d8 06       	cpc	r13, r24
    7fbe:	8f ef       	ldi	r24, 0xFF	; 255
    7fc0:	e8 06       	cpc	r14, r24
    7fc2:	8f ef       	ldi	r24, 0xFF	; 255
    7fc4:	f8 06       	cpc	r15, r24
    7fc6:	a9 f1       	breq	.+106    	; 0x8032 <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    7fc8:	81 e0       	ldi	r24, 0x01	; 1
    7fca:	c8 16       	cp	r12, r24
    7fcc:	d1 04       	cpc	r13, r1
    7fce:	e1 04       	cpc	r14, r1
    7fd0:	f1 04       	cpc	r15, r1
    7fd2:	19 f4       	brne	.+6      	; 0x7fda <f_truncate+0xba>
    7fd4:	02 e0       	ldi	r16, 0x02	; 2
    7fd6:	10 e0       	ldi	r17, 0x00	; 0
    7fd8:	23 c0       	rjmp	.+70     	; 0x8020 <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    7fda:	e8 81       	ld	r30, Y
    7fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    7fde:	86 8d       	ldd	r24, Z+30	; 0x1e
    7fe0:	97 8d       	ldd	r25, Z+31	; 0x1f
    7fe2:	a0 a1       	ldd	r26, Z+32	; 0x20
    7fe4:	b1 a1       	ldd	r27, Z+33	; 0x21
    7fe6:	c8 16       	cp	r12, r24
    7fe8:	d9 06       	cpc	r13, r25
    7fea:	ea 06       	cpc	r14, r26
    7fec:	fb 06       	cpc	r15, r27
    7fee:	d8 f4       	brcc	.+54     	; 0x8026 <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    7ff0:	4a 89       	ldd	r20, Y+18	; 0x12
    7ff2:	5b 89       	ldd	r21, Y+19	; 0x13
    7ff4:	6c 89       	ldd	r22, Y+20	; 0x14
    7ff6:	7d 89       	ldd	r23, Y+21	; 0x15
    7ff8:	cf 01       	movw	r24, r30
    7ffa:	0f ef       	ldi	r16, 0xFF	; 255
    7ffc:	1f ef       	ldi	r17, 0xFF	; 255
    7ffe:	2f ef       	ldi	r18, 0xFF	; 255
    8000:	3f e0       	ldi	r19, 0x0F	; 15
    8002:	0e 94 9c 3b 	call	0x7738	; 0x7738 <put_fat>
    8006:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    8008:	00 97       	sbiw	r24, 0x00	; 0
    800a:	51 f4       	brne	.+20     	; 0x8020 <f_truncate+0x100>
    800c:	88 81       	ld	r24, Y
    800e:	99 81       	ldd	r25, Y+1	; 0x01
    8010:	b7 01       	movw	r22, r14
    8012:	a6 01       	movw	r20, r12
    8014:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <remove_chain>
    8018:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    801a:	01 15       	cp	r16, r1
    801c:	11 05       	cpc	r17, r1
    801e:	19 f0       	breq	.+6      	; 0x8026 <f_truncate+0x106>
    8020:	8c 81       	ldd	r24, Y+4	; 0x04
    8022:	80 68       	ori	r24, 0x80	; 128
    8024:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    8026:	c8 01       	movw	r24, r16
    8028:	cd b7       	in	r28, 0x3d	; 61
    802a:	de b7       	in	r29, 0x3e	; 62
    802c:	e8 e0       	ldi	r30, 0x08	; 8
    802e:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    8032:	01 e0       	ldi	r16, 0x01	; 1
    8034:	10 e0       	ldi	r17, 0x00	; 0
    8036:	f4 cf       	rjmp	.-24     	; 0x8020 <f_truncate+0x100>

00008038 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    8038:	a0 e0       	ldi	r26, 0x00	; 0
    803a:	b0 e0       	ldi	r27, 0x00	; 0
    803c:	e2 e2       	ldi	r30, 0x22	; 34
    803e:	f0 e4       	ldi	r31, 0x40	; 64
    8040:	0c 94 20 59 	jmp	0xb240	; 0xb240 <__prologue_saves__+0x4>
    8044:	ec 01       	movw	r28, r24
    8046:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    8048:	6c 80       	ldd	r6, Y+4	; 0x04
    804a:	7d 80       	ldd	r7, Y+5	; 0x05
    804c:	08 94       	sec
    804e:	61 1c       	adc	r6, r1
    8050:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    8052:	61 14       	cp	r6, r1
    8054:	71 04       	cpc	r7, r1
    8056:	09 f4       	brne	.+2      	; 0x805a <dir_next+0x22>
    8058:	4d c1       	rjmp	.+666    	; 0x82f4 <dir_next+0x2bc>
    805a:	8e 85       	ldd	r24, Y+14	; 0x0e
    805c:	9f 85       	ldd	r25, Y+15	; 0x0f
    805e:	a8 89       	ldd	r26, Y+16	; 0x10
    8060:	b9 89       	ldd	r27, Y+17	; 0x11
    8062:	00 97       	sbiw	r24, 0x00	; 0
    8064:	a1 05       	cpc	r26, r1
    8066:	b1 05       	cpc	r27, r1
    8068:	09 f4       	brne	.+2      	; 0x806c <dir_next+0x34>
    806a:	44 c1       	rjmp	.+648    	; 0x82f4 <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    806c:	2f e0       	ldi	r18, 0x0F	; 15
    806e:	42 2e       	mov	r4, r18
    8070:	51 2c       	mov	r5, r1
    8072:	46 20       	and	r4, r6
    8074:	57 20       	and	r5, r7
    8076:	41 14       	cp	r4, r1
    8078:	51 04       	cpc	r5, r1
    807a:	09 f0       	breq	.+2      	; 0x807e <dir_next+0x46>
    807c:	27 c1       	rjmp	.+590    	; 0x82cc <dir_next+0x294>
		dj->sect++;					/* Next sector */
    807e:	01 96       	adiw	r24, 0x01	; 1
    8080:	a1 1d       	adc	r26, r1
    8082:	b1 1d       	adc	r27, r1
    8084:	8e 87       	std	Y+14, r24	; 0x0e
    8086:	9f 87       	std	Y+15, r25	; 0x0f
    8088:	a8 8b       	std	Y+16, r26	; 0x10
    808a:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    808c:	4a 85       	ldd	r20, Y+10	; 0x0a
    808e:	5b 85       	ldd	r21, Y+11	; 0x0b
    8090:	6c 85       	ldd	r22, Y+12	; 0x0c
    8092:	7d 85       	ldd	r23, Y+13	; 0x0d
    8094:	e8 81       	ld	r30, Y
    8096:	f9 81       	ldd	r31, Y+1	; 0x01
    8098:	41 15       	cp	r20, r1
    809a:	51 05       	cpc	r21, r1
    809c:	61 05       	cpc	r22, r1
    809e:	71 05       	cpc	r23, r1
    80a0:	39 f4       	brne	.+14     	; 0x80b0 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    80a2:	87 81       	ldd	r24, Z+7	; 0x07
    80a4:	90 85       	ldd	r25, Z+8	; 0x08
    80a6:	68 16       	cp	r6, r24
    80a8:	79 06       	cpc	r7, r25
    80aa:	08 f4       	brcc	.+2      	; 0x80ae <dir_next+0x76>
    80ac:	0f c1       	rjmp	.+542    	; 0x82cc <dir_next+0x294>
    80ae:	22 c1       	rjmp	.+580    	; 0x82f4 <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    80b0:	82 81       	ldd	r24, Z+2	; 0x02
    80b2:	90 e0       	ldi	r25, 0x00	; 0
    80b4:	01 97       	sbiw	r24, 0x01	; 1
    80b6:	93 01       	movw	r18, r6
    80b8:	a4 e0       	ldi	r26, 0x04	; 4
    80ba:	36 95       	lsr	r19
    80bc:	27 95       	ror	r18
    80be:	aa 95       	dec	r26
    80c0:	e1 f7       	brne	.-8      	; 0x80ba <dir_next+0x82>
    80c2:	82 23       	and	r24, r18
    80c4:	93 23       	and	r25, r19
    80c6:	89 2b       	or	r24, r25
    80c8:	09 f0       	breq	.+2      	; 0x80cc <dir_next+0x94>
    80ca:	00 c1       	rjmp	.+512    	; 0x82cc <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    80cc:	cf 01       	movw	r24, r30
    80ce:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
    80d2:	7b 01       	movw	r14, r22
    80d4:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    80d6:	82 e0       	ldi	r24, 0x02	; 2
    80d8:	e8 16       	cp	r14, r24
    80da:	f1 04       	cpc	r15, r1
    80dc:	01 05       	cpc	r16, r1
    80de:	11 05       	cpc	r17, r1
    80e0:	08 f4       	brcc	.+2      	; 0x80e4 <dir_next+0xac>
    80e2:	0b c1       	rjmp	.+534    	; 0x82fa <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    80e4:	9f ef       	ldi	r25, 0xFF	; 255
    80e6:	e9 16       	cp	r14, r25
    80e8:	9f ef       	ldi	r25, 0xFF	; 255
    80ea:	f9 06       	cpc	r15, r25
    80ec:	9f ef       	ldi	r25, 0xFF	; 255
    80ee:	09 07       	cpc	r16, r25
    80f0:	9f ef       	ldi	r25, 0xFF	; 255
    80f2:	19 07       	cpc	r17, r25
    80f4:	09 f4       	brne	.+2      	; 0x80f8 <dir_next+0xc0>
    80f6:	04 c1       	rjmp	.+520    	; 0x8300 <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    80f8:	e8 81       	ld	r30, Y
    80fa:	f9 81       	ldd	r31, Y+1	; 0x01
    80fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    80fe:	97 8d       	ldd	r25, Z+31	; 0x1f
    8100:	a0 a1       	ldd	r26, Z+32	; 0x20
    8102:	b1 a1       	ldd	r27, Z+33	; 0x21
    8104:	e8 16       	cp	r14, r24
    8106:	f9 06       	cpc	r15, r25
    8108:	0a 07       	cpc	r16, r26
    810a:	1b 07       	cpc	r17, r27
    810c:	08 f4       	brcc	.+2      	; 0x8110 <dir_next+0xd8>
    810e:	a5 c0       	rjmp	.+330    	; 0x825a <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    8110:	c1 14       	cp	r12, r1
    8112:	d1 04       	cpc	r13, r1
    8114:	09 f4       	brne	.+2      	; 0x8118 <dir_next+0xe0>
    8116:	ee c0       	rjmp	.+476    	; 0x82f4 <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    8118:	4a 85       	ldd	r20, Y+10	; 0x0a
    811a:	5b 85       	ldd	r21, Y+11	; 0x0b
    811c:	6c 85       	ldd	r22, Y+12	; 0x0c
    811e:	7d 85       	ldd	r23, Y+13	; 0x0d
    8120:	cf 01       	movw	r24, r30
    8122:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
    8126:	7b 01       	movw	r14, r22
    8128:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    812a:	61 15       	cp	r22, r1
    812c:	71 05       	cpc	r23, r1
    812e:	81 05       	cpc	r24, r1
    8130:	91 05       	cpc	r25, r1
    8132:	19 f4       	brne	.+6      	; 0x813a <dir_next+0x102>
    8134:	27 e0       	ldi	r18, 0x07	; 7
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	e5 c0       	rjmp	.+458    	; 0x8304 <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    813a:	61 30       	cpi	r22, 0x01	; 1
    813c:	71 05       	cpc	r23, r1
    813e:	81 05       	cpc	r24, r1
    8140:	91 05       	cpc	r25, r1
    8142:	09 f4       	brne	.+2      	; 0x8146 <dir_next+0x10e>
    8144:	da c0       	rjmp	.+436    	; 0x82fa <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8146:	6f 3f       	cpi	r22, 0xFF	; 255
    8148:	bf ef       	ldi	r27, 0xFF	; 255
    814a:	7b 07       	cpc	r23, r27
    814c:	bf ef       	ldi	r27, 0xFF	; 255
    814e:	8b 07       	cpc	r24, r27
    8150:	bf ef       	ldi	r27, 0xFF	; 255
    8152:	9b 07       	cpc	r25, r27
    8154:	09 f4       	brne	.+2      	; 0x8158 <dir_next+0x120>
    8156:	d4 c0       	rjmp	.+424    	; 0x8300 <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    8158:	88 81       	ld	r24, Y
    815a:	99 81       	ldd	r25, Y+1	; 0x01
    815c:	40 e0       	ldi	r20, 0x00	; 0
    815e:	50 e0       	ldi	r21, 0x00	; 0
    8160:	60 e0       	ldi	r22, 0x00	; 0
    8162:	70 e0       	ldi	r23, 0x00	; 0
    8164:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8168:	89 2b       	or	r24, r25
    816a:	09 f0       	breq	.+2      	; 0x816e <dir_next+0x136>
    816c:	c9 c0       	rjmp	.+402    	; 0x8300 <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    816e:	88 81       	ld	r24, Y
    8170:	99 81       	ldd	r25, Y+1	; 0x01
    8172:	fc 01       	movw	r30, r24
    8174:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    8176:	8e 5c       	subi	r24, 0xCE	; 206
    8178:	9d 4f       	sbci	r25, 0xFD	; 253
    817a:	01 c0       	rjmp	.+2      	; 0x817e <dir_next+0x146>
    817c:	11 92       	st	Z+, r1
    817e:	e8 17       	cp	r30, r24
    8180:	f9 07       	cpc	r31, r25
    8182:	e1 f7       	brne	.-8      	; 0x817c <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    8184:	88 80       	ld	r8, Y
    8186:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8188:	ee ef       	ldi	r30, 0xFE	; 254
    818a:	ae 2e       	mov	r10, r30
    818c:	ef ef       	ldi	r30, 0xFF	; 255
    818e:	be 2e       	mov	r11, r30
    8190:	ef ef       	ldi	r30, 0xFF	; 255
    8192:	ce 2e       	mov	r12, r30
    8194:	ef ef       	ldi	r30, 0xFF	; 255
    8196:	de 2e       	mov	r13, r30
    8198:	ae 0c       	add	r10, r14
    819a:	bf 1c       	adc	r11, r15
    819c:	c0 1e       	adc	r12, r16
    819e:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    81a0:	f4 01       	movw	r30, r8
    81a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    81a4:	97 8d       	ldd	r25, Z+31	; 0x1f
    81a6:	a0 a1       	ldd	r26, Z+32	; 0x20
    81a8:	b1 a1       	ldd	r27, Z+33	; 0x21
    81aa:	02 97       	sbiw	r24, 0x02	; 2
    81ac:	a1 09       	sbc	r26, r1
    81ae:	b1 09       	sbc	r27, r1
    81b0:	a8 16       	cp	r10, r24
    81b2:	b9 06       	cpc	r11, r25
    81b4:	ca 06       	cpc	r12, r26
    81b6:	db 06       	cpc	r13, r27
    81b8:	28 f0       	brcs	.+10     	; 0x81c4 <dir_next+0x18c>
    81ba:	20 e0       	ldi	r18, 0x00	; 0
    81bc:	30 e0       	ldi	r19, 0x00	; 0
    81be:	40 e0       	ldi	r20, 0x00	; 0
    81c0:	50 e0       	ldi	r21, 0x00	; 0
    81c2:	15 c0       	rjmp	.+42     	; 0x81ee <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    81c4:	d4 01       	movw	r26, r8
    81c6:	12 96       	adiw	r26, 0x02	; 2
    81c8:	2c 91       	ld	r18, X
    81ca:	30 e0       	ldi	r19, 0x00	; 0
    81cc:	40 e0       	ldi	r20, 0x00	; 0
    81ce:	50 e0       	ldi	r21, 0x00	; 0
    81d0:	c6 01       	movw	r24, r12
    81d2:	b5 01       	movw	r22, r10
    81d4:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    81d8:	9b 01       	movw	r18, r22
    81da:	ac 01       	movw	r20, r24
    81dc:	f4 01       	movw	r30, r8
    81de:	82 a5       	ldd	r24, Z+42	; 0x2a
    81e0:	93 a5       	ldd	r25, Z+43	; 0x2b
    81e2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    81e4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    81e6:	28 0f       	add	r18, r24
    81e8:	39 1f       	adc	r19, r25
    81ea:	4a 1f       	adc	r20, r26
    81ec:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    81ee:	d4 01       	movw	r26, r8
    81f0:	9e 96       	adiw	r26, 0x2e	; 46
    81f2:	2d 93       	st	X+, r18
    81f4:	3d 93       	st	X+, r19
    81f6:	4d 93       	st	X+, r20
    81f8:	5c 93       	st	X, r21
    81fa:	d1 97       	sbiw	r26, 0x31	; 49
    81fc:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    81fe:	cc 24       	eor	r12, r12
    8200:	c3 94       	inc	r12
    8202:	1a c0       	rjmp	.+52     	; 0x8238 <dir_next+0x200>
    8204:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    8206:	88 81       	ld	r24, Y
    8208:	99 81       	ldd	r25, Y+1	; 0x01
    820a:	40 e0       	ldi	r20, 0x00	; 0
    820c:	50 e0       	ldi	r21, 0x00	; 0
    820e:	60 e0       	ldi	r22, 0x00	; 0
    8210:	70 e0       	ldi	r23, 0x00	; 0
    8212:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8216:	89 2b       	or	r24, r25
    8218:	09 f0       	breq	.+2      	; 0x821c <dir_next+0x1e4>
    821a:	72 c0       	rjmp	.+228    	; 0x8300 <dir_next+0x2c8>
						dj->fs->winsect++;
    821c:	e8 81       	ld	r30, Y
    821e:	f9 81       	ldd	r31, Y+1	; 0x01
    8220:	86 a5       	ldd	r24, Z+46	; 0x2e
    8222:	97 a5       	ldd	r25, Z+47	; 0x2f
    8224:	a0 a9       	ldd	r26, Z+48	; 0x30
    8226:	b1 a9       	ldd	r27, Z+49	; 0x31
    8228:	01 96       	adiw	r24, 0x01	; 1
    822a:	a1 1d       	adc	r26, r1
    822c:	b1 1d       	adc	r27, r1
    822e:	86 a7       	std	Z+46, r24	; 0x2e
    8230:	97 a7       	std	Z+47, r25	; 0x2f
    8232:	a0 ab       	std	Z+48, r26	; 0x30
    8234:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8236:	d3 94       	inc	r13
    8238:	e8 81       	ld	r30, Y
    823a:	f9 81       	ldd	r31, Y+1	; 0x01
    823c:	82 81       	ldd	r24, Z+2	; 0x02
    823e:	d8 16       	cp	r13, r24
    8240:	08 f3       	brcs	.-62     	; 0x8204 <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8242:	86 a5       	ldd	r24, Z+46	; 0x2e
    8244:	97 a5       	ldd	r25, Z+47	; 0x2f
    8246:	a0 a9       	ldd	r26, Z+48	; 0x30
    8248:	b1 a9       	ldd	r27, Z+49	; 0x31
    824a:	8d 19       	sub	r24, r13
    824c:	91 09       	sbc	r25, r1
    824e:	a1 09       	sbc	r26, r1
    8250:	b1 09       	sbc	r27, r1
    8252:	86 a7       	std	Z+46, r24	; 0x2e
    8254:	97 a7       	std	Z+47, r25	; 0x2f
    8256:	a0 ab       	std	Z+48, r26	; 0x30
    8258:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    825a:	ea 86       	std	Y+10, r14	; 0x0a
    825c:	fb 86       	std	Y+11, r15	; 0x0b
    825e:	0c 87       	std	Y+12, r16	; 0x0c
    8260:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    8262:	c8 80       	ld	r12, Y
    8264:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8266:	8e ef       	ldi	r24, 0xFE	; 254
    8268:	9f ef       	ldi	r25, 0xFF	; 255
    826a:	af ef       	ldi	r26, 0xFF	; 255
    826c:	bf ef       	ldi	r27, 0xFF	; 255
    826e:	e8 0e       	add	r14, r24
    8270:	f9 1e       	adc	r15, r25
    8272:	0a 1f       	adc	r16, r26
    8274:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8276:	f6 01       	movw	r30, r12
    8278:	86 8d       	ldd	r24, Z+30	; 0x1e
    827a:	97 8d       	ldd	r25, Z+31	; 0x1f
    827c:	a0 a1       	ldd	r26, Z+32	; 0x20
    827e:	b1 a1       	ldd	r27, Z+33	; 0x21
    8280:	02 97       	sbiw	r24, 0x02	; 2
    8282:	a1 09       	sbc	r26, r1
    8284:	b1 09       	sbc	r27, r1
    8286:	e8 16       	cp	r14, r24
    8288:	f9 06       	cpc	r15, r25
    828a:	0a 07       	cpc	r16, r26
    828c:	1b 07       	cpc	r17, r27
    828e:	28 f0       	brcs	.+10     	; 0x829a <dir_next+0x262>
    8290:	20 e0       	ldi	r18, 0x00	; 0
    8292:	30 e0       	ldi	r19, 0x00	; 0
    8294:	40 e0       	ldi	r20, 0x00	; 0
    8296:	50 e0       	ldi	r21, 0x00	; 0
    8298:	15 c0       	rjmp	.+42     	; 0x82c4 <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    829a:	d6 01       	movw	r26, r12
    829c:	12 96       	adiw	r26, 0x02	; 2
    829e:	2c 91       	ld	r18, X
    82a0:	30 e0       	ldi	r19, 0x00	; 0
    82a2:	40 e0       	ldi	r20, 0x00	; 0
    82a4:	50 e0       	ldi	r21, 0x00	; 0
    82a6:	c8 01       	movw	r24, r16
    82a8:	b7 01       	movw	r22, r14
    82aa:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    82ae:	9b 01       	movw	r18, r22
    82b0:	ac 01       	movw	r20, r24
    82b2:	f6 01       	movw	r30, r12
    82b4:	82 a5       	ldd	r24, Z+42	; 0x2a
    82b6:	93 a5       	ldd	r25, Z+43	; 0x2b
    82b8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    82ba:	b5 a5       	ldd	r27, Z+45	; 0x2d
    82bc:	28 0f       	add	r18, r24
    82be:	39 1f       	adc	r19, r25
    82c0:	4a 1f       	adc	r20, r26
    82c2:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    82c4:	2e 87       	std	Y+14, r18	; 0x0e
    82c6:	3f 87       	std	Y+15, r19	; 0x0f
    82c8:	48 8b       	std	Y+16, r20	; 0x10
    82ca:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    82cc:	6c 82       	std	Y+4, r6	; 0x04
    82ce:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    82d0:	75 e0       	ldi	r23, 0x05	; 5
    82d2:	44 0c       	add	r4, r4
    82d4:	55 1c       	adc	r5, r5
    82d6:	7a 95       	dec	r23
    82d8:	e1 f7       	brne	.-8      	; 0x82d2 <dir_next+0x29a>
    82da:	82 e3       	ldi	r24, 0x32	; 50
    82dc:	90 e0       	ldi	r25, 0x00	; 0
    82de:	48 0e       	add	r4, r24
    82e0:	59 1e       	adc	r5, r25
    82e2:	88 81       	ld	r24, Y
    82e4:	99 81       	ldd	r25, Y+1	; 0x01
    82e6:	84 0d       	add	r24, r4
    82e8:	95 1d       	adc	r25, r5
    82ea:	8a 8b       	std	Y+18, r24	; 0x12
    82ec:	9b 8b       	std	Y+19, r25	; 0x13
    82ee:	20 e0       	ldi	r18, 0x00	; 0
    82f0:	30 e0       	ldi	r19, 0x00	; 0
    82f2:	08 c0       	rjmp	.+16     	; 0x8304 <dir_next+0x2cc>

	return FR_OK;
    82f4:	24 e0       	ldi	r18, 0x04	; 4
    82f6:	30 e0       	ldi	r19, 0x00	; 0
    82f8:	05 c0       	rjmp	.+10     	; 0x8304 <dir_next+0x2cc>
    82fa:	22 e0       	ldi	r18, 0x02	; 2
    82fc:	30 e0       	ldi	r19, 0x00	; 0
    82fe:	02 c0       	rjmp	.+4      	; 0x8304 <dir_next+0x2cc>
    8300:	21 e0       	ldi	r18, 0x01	; 1
    8302:	30 e0       	ldi	r19, 0x00	; 0
}
    8304:	c9 01       	movw	r24, r18
    8306:	cd b7       	in	r28, 0x3d	; 61
    8308:	de b7       	in	r29, 0x3e	; 62
    830a:	e0 e1       	ldi	r30, 0x10	; 16
    830c:	0c 94 3c 59 	jmp	0xb278	; 0xb278 <__epilogue_restores__+0x4>

00008310 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    8310:	a0 e0       	ldi	r26, 0x00	; 0
    8312:	b0 e0       	ldi	r27, 0x00	; 0
    8314:	ee e8       	ldi	r30, 0x8E	; 142
    8316:	f1 e4       	ldi	r31, 0x41	; 65
    8318:	0c 94 26 59 	jmp	0xb24c	; 0xb24c <__prologue_saves__+0x10>
    831c:	ec 01       	movw	r28, r24
    831e:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    8320:	fb 01       	movw	r30, r22
    8322:	80 81       	ld	r24, Z
    8324:	8f 32       	cpi	r24, 0x2F	; 47
    8326:	11 f0       	breq	.+4      	; 0x832c <follow_path+0x1c>
    8328:	8c 35       	cpi	r24, 0x5C	; 92
    832a:	41 f4       	brne	.+16     	; 0x833c <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    832c:	08 94       	sec
    832e:	e1 1c       	adc	r14, r1
    8330:	f1 1c       	adc	r15, r1
    8332:	1e 82       	std	Y+6, r1	; 0x06
    8334:	1f 82       	std	Y+7, r1	; 0x07
    8336:	18 86       	std	Y+8, r1	; 0x08
    8338:	19 86       	std	Y+9, r1	; 0x09
    833a:	0a c0       	rjmp	.+20     	; 0x8350 <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    833c:	e8 81       	ld	r30, Y
    833e:	f9 81       	ldd	r31, Y+1	; 0x01
    8340:	86 89       	ldd	r24, Z+22	; 0x16
    8342:	97 89       	ldd	r25, Z+23	; 0x17
    8344:	a0 8d       	ldd	r26, Z+24	; 0x18
    8346:	b1 8d       	ldd	r27, Z+25	; 0x19
    8348:	8e 83       	std	Y+6, r24	; 0x06
    834a:	9f 83       	std	Y+7, r25	; 0x07
    834c:	a8 87       	std	Y+8, r26	; 0x08
    834e:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    8350:	f7 01       	movw	r30, r14
    8352:	80 81       	ld	r24, Z
    8354:	80 32       	cpi	r24, 0x20	; 32
    8356:	48 f4       	brcc	.+18     	; 0x836a <follow_path+0x5a>
		res = dir_seek(dj, 0);
    8358:	ce 01       	movw	r24, r28
    835a:	60 e0       	ldi	r22, 0x00	; 0
    835c:	70 e0       	ldi	r23, 0x00	; 0
    835e:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    8362:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    8364:	1a 8a       	std	Y+18, r1	; 0x12
    8366:	1b 8a       	std	Y+19, r1	; 0x13
    8368:	02 c1       	rjmp	.+516    	; 0x856e <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    836a:	50 e2       	ldi	r21, 0x20	; 32
    836c:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    836e:	45 e0       	ldi	r20, 0x05	; 5
    8370:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    8372:	0c 89       	ldd	r16, Y+20	; 0x14
    8374:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8376:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    8378:	c8 01       	movw	r24, r16
    837a:	0b 96       	adiw	r24, 0x0b	; 11
    837c:	01 c0       	rjmp	.+2      	; 0x8380 <follow_path+0x70>
    837e:	b1 92       	st	Z+, r11
    8380:	e8 17       	cp	r30, r24
    8382:	f9 07       	cpc	r31, r25
    8384:	e1 f7       	brne	.-8      	; 0x837e <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    8386:	f7 01       	movw	r30, r14
    8388:	80 81       	ld	r24, Z
    838a:	8e 32       	cpi	r24, 0x2E	; 46
    838c:	41 f0       	breq	.+16     	; 0x839e <follow_path+0x8e>
    838e:	60 e0       	ldi	r22, 0x00	; 0
    8390:	70 e0       	ldi	r23, 0x00	; 0
    8392:	cc 24       	eor	r12, r12
    8394:	dd 24       	eor	r13, r13
    8396:	a8 e0       	ldi	r26, 0x08	; 8
    8398:	b0 e0       	ldi	r27, 0x00	; 0
    839a:	30 e0       	ldi	r19, 0x00	; 0
    839c:	21 c0       	rjmp	.+66     	; 0x83e0 <follow_path+0xd0>
    839e:	d8 01       	movw	r26, r16
    83a0:	80 e0       	ldi	r24, 0x00	; 0
    83a2:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    83a4:	f7 01       	movw	r30, r14
    83a6:	e8 0f       	add	r30, r24
    83a8:	f9 1f       	adc	r31, r25
    83aa:	e0 81       	ld	r30, Z
    83ac:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    83ae:	ee 32       	cpi	r30, 0x2E	; 46
    83b0:	31 f4       	brne	.+12     	; 0x83be <follow_path+0xae>
    83b2:	83 30       	cpi	r24, 0x03	; 3
    83b4:	91 05       	cpc	r25, r1
    83b6:	09 f4       	brne	.+2      	; 0x83ba <follow_path+0xaa>
    83b8:	d3 c0       	rjmp	.+422    	; 0x8560 <follow_path+0x250>
			sfn[i++] = c;
    83ba:	ed 93       	st	X+, r30
    83bc:	f3 cf       	rjmp	.-26     	; 0x83a4 <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    83be:	ef 32       	cpi	r30, 0x2F	; 47
    83c0:	29 f0       	breq	.+10     	; 0x83cc <follow_path+0xbc>
    83c2:	ec 35       	cpi	r30, 0x5C	; 92
    83c4:	39 f0       	breq	.+14     	; 0x83d4 <follow_path+0xc4>
    83c6:	e0 32       	cpi	r30, 0x20	; 32
    83c8:	08 f0       	brcs	.+2      	; 0x83cc <follow_path+0xbc>
    83ca:	ca c0       	rjmp	.+404    	; 0x8560 <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    83cc:	e0 32       	cpi	r30, 0x20	; 32
    83ce:	10 f4       	brcc	.+4      	; 0x83d4 <follow_path+0xc4>
    83d0:	24 e2       	ldi	r18, 0x24	; 36
    83d2:	01 c0       	rjmp	.+2      	; 0x83d6 <follow_path+0xc6>
    83d4:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    83d6:	e8 0e       	add	r14, r24
    83d8:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    83da:	f8 01       	movw	r30, r16
    83dc:	23 87       	std	Z+11, r18	; 0x0b
    83de:	cd c0       	rjmp	.+410    	; 0x857a <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    83e0:	f7 01       	movw	r30, r14
    83e2:	ec 0d       	add	r30, r12
    83e4:	fd 1d       	adc	r31, r13
    83e6:	20 81       	ld	r18, Z
    83e8:	08 94       	sec
    83ea:	c1 1c       	adc	r12, r1
    83ec:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    83ee:	20 32       	cpi	r18, 0x20	; 32
    83f0:	08 f4       	brcc	.+2      	; 0x83f4 <follow_path+0xe4>
    83f2:	42 c0       	rjmp	.+132    	; 0x8478 <follow_path+0x168>
    83f4:	2f 32       	cpi	r18, 0x2F	; 47
    83f6:	09 f4       	brne	.+2      	; 0x83fa <follow_path+0xea>
    83f8:	ca c0       	rjmp	.+404    	; 0x858e <follow_path+0x27e>
    83fa:	2c 35       	cpi	r18, 0x5C	; 92
    83fc:	09 f4       	brne	.+2      	; 0x8400 <follow_path+0xf0>
    83fe:	c7 c0       	rjmp	.+398    	; 0x858e <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    8400:	2e 32       	cpi	r18, 0x2E	; 46
    8402:	19 f0       	breq	.+6      	; 0x840a <follow_path+0xfa>
    8404:	6a 17       	cp	r22, r26
    8406:	7b 07       	cpc	r23, r27
    8408:	6c f0       	brlt	.+26     	; 0x8424 <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    840a:	18 97       	sbiw	r26, 0x08	; 8
    840c:	09 f0       	breq	.+2      	; 0x8410 <follow_path+0x100>
    840e:	a8 c0       	rjmp	.+336    	; 0x8560 <follow_path+0x250>
    8410:	2e 32       	cpi	r18, 0x2E	; 46
    8412:	09 f0       	breq	.+2      	; 0x8416 <follow_path+0x106>
    8414:	a5 c0       	rjmp	.+330    	; 0x8560 <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    8416:	33 0f       	add	r19, r19
    8418:	33 0f       	add	r19, r19
    841a:	68 e0       	ldi	r22, 0x08	; 8
    841c:	70 e0       	ldi	r23, 0x00	; 0
    841e:	ab e0       	ldi	r26, 0x0B	; 11
    8420:	b0 e0       	ldi	r27, 0x00	; 0
    8422:	de cf       	rjmp	.-68     	; 0x83e0 <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    8424:	27 ff       	sbrs	r18, 7
    8426:	05 c0       	rjmp	.+10     	; 0x8432 <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    8428:	e2 2f       	mov	r30, r18
    842a:	f0 e0       	ldi	r31, 0x00	; 0
    842c:	e2 52       	subi	r30, 0x22	; 34
    842e:	fc 4d       	sbci	r31, 0xDC	; 220
    8430:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    8432:	42 2f       	mov	r20, r18
    8434:	50 e0       	ldi	r21, 0x00	; 0
    8436:	ed e0       	ldi	r30, 0x0D	; 13
    8438:	f4 e2       	ldi	r31, 0x24	; 36
    843a:	01 c0       	rjmp	.+2      	; 0x843e <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    843c:	31 96       	adiw	r30, 0x01	; 1
    843e:	80 81       	ld	r24, Z
    8440:	88 23       	and	r24, r24
    8442:	39 f0       	breq	.+14     	; 0x8452 <follow_path+0x142>
    8444:	99 27       	eor	r25, r25
    8446:	87 fd       	sbrc	r24, 7
    8448:	90 95       	com	r25
    844a:	84 17       	cp	r24, r20
    844c:	95 07       	cpc	r25, r21
    844e:	b1 f7       	brne	.-20     	; 0x843c <follow_path+0x12c>
    8450:	87 c0       	rjmp	.+270    	; 0x8560 <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    8452:	82 2f       	mov	r24, r18
    8454:	81 54       	subi	r24, 0x41	; 65
    8456:	8a 31       	cpi	r24, 0x1A	; 26
    8458:	10 f4       	brcc	.+4      	; 0x845e <follow_path+0x14e>
				b |= 2;
    845a:	32 60       	ori	r19, 0x02	; 2
    845c:	06 c0       	rjmp	.+12     	; 0x846a <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    845e:	82 2f       	mov	r24, r18
    8460:	81 56       	subi	r24, 0x61	; 97
    8462:	8a 31       	cpi	r24, 0x1A	; 26
    8464:	10 f4       	brcc	.+4      	; 0x846a <follow_path+0x15a>
					b |= 1; c -= 0x20;
    8466:	31 60       	ori	r19, 0x01	; 1
    8468:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    846a:	f8 01       	movw	r30, r16
    846c:	e6 0f       	add	r30, r22
    846e:	f7 1f       	adc	r31, r23
    8470:	20 83       	st	Z, r18
    8472:	6f 5f       	subi	r22, 0xFF	; 255
    8474:	7f 4f       	sbci	r23, 0xFF	; 255
    8476:	b4 cf       	rjmp	.-152    	; 0x83e0 <follow_path+0xd0>
    8478:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    847a:	67 2b       	or	r22, r23
    847c:	09 f4       	brne	.+2      	; 0x8480 <follow_path+0x170>
    847e:	70 c0       	rjmp	.+224    	; 0x8560 <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8480:	f8 01       	movw	r30, r16
    8482:	80 81       	ld	r24, Z
    8484:	85 3e       	cpi	r24, 0xE5	; 229
    8486:	09 f4       	brne	.+2      	; 0x848a <follow_path+0x17a>
    8488:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    848a:	18 97       	sbiw	r26, 0x08	; 8
    848c:	11 f4       	brne	.+4      	; 0x8492 <follow_path+0x182>
    848e:	33 0f       	add	r19, r19
    8490:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8492:	23 2f       	mov	r18, r19
    8494:	30 e0       	ldi	r19, 0x00	; 0
    8496:	c9 01       	movw	r24, r18
    8498:	83 70       	andi	r24, 0x03	; 3
    849a:	90 70       	andi	r25, 0x00	; 0
    849c:	01 97       	sbiw	r24, 0x01	; 1
    849e:	09 f4       	brne	.+2      	; 0x84a2 <follow_path+0x192>
    84a0:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    84a2:	2c 70       	andi	r18, 0x0C	; 12
    84a4:	30 70       	andi	r19, 0x00	; 0
    84a6:	24 30       	cpi	r18, 0x04	; 4
    84a8:	31 05       	cpc	r19, r1
    84aa:	09 f4       	brne	.+2      	; 0x84ae <follow_path+0x19e>
    84ac:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    84ae:	ec 0c       	add	r14, r12
    84b0:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    84b2:	f8 01       	movw	r30, r16
    84b4:	43 87       	std	Z+11, r20	; 0x0b
    84b6:	61 c0       	rjmp	.+194    	; 0x857a <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    84b8:	4e 85       	ldd	r20, Y+14	; 0x0e
    84ba:	5f 85       	ldd	r21, Y+15	; 0x0f
    84bc:	68 89       	ldd	r22, Y+16	; 0x10
    84be:	79 89       	ldd	r23, Y+17	; 0x11
    84c0:	88 81       	ld	r24, Y
    84c2:	99 81       	ldd	r25, Y+1	; 0x01
    84c4:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    84c8:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    84ca:	00 97       	sbiw	r24, 0x00	; 0
    84cc:	01 f5       	brne	.+64     	; 0x850e <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    84ce:	ea 89       	ldd	r30, Y+18	; 0x12
    84d0:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    84d2:	80 81       	ld	r24, Z
    84d4:	88 23       	and	r24, r24
    84d6:	19 f4       	brne	.+6      	; 0x84de <follow_path+0x1ce>
    84d8:	44 e0       	ldi	r20, 0x04	; 4
    84da:	50 e0       	ldi	r21, 0x00	; 0
    84dc:	18 c0       	rjmp	.+48     	; 0x850e <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    84de:	83 85       	ldd	r24, Z+11	; 0x0b
    84e0:	83 fd       	sbrc	r24, 3
    84e2:	0f c0       	rjmp	.+30     	; 0x8502 <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    84e4:	ac 89       	ldd	r26, Y+20	; 0x14
    84e6:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    84e8:	9f 01       	movw	r18, r30
    84ea:	25 5f       	subi	r18, 0xF5	; 245
    84ec:	3f 4f       	sbci	r19, 0xFF	; 255
    84ee:	e2 17       	cp	r30, r18
    84f0:	f3 07       	cpc	r31, r19
    84f2:	69 f0       	breq	.+26     	; 0x850e <follow_path+0x1fe>
    84f4:	90 81       	ld	r25, Z
    84f6:	8c 91       	ld	r24, X
    84f8:	98 17       	cp	r25, r24
    84fa:	19 f4       	brne	.+6      	; 0x8502 <follow_path+0x1f2>
    84fc:	31 96       	adiw	r30, 0x01	; 1
    84fe:	11 96       	adiw	r26, 0x01	; 1
    8500:	f6 cf       	rjmp	.-20     	; 0x84ee <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8502:	ce 01       	movw	r24, r28
    8504:	60 e0       	ldi	r22, 0x00	; 0
    8506:	70 e0       	ldi	r23, 0x00	; 0
    8508:	0e 94 1c 40 	call	0x8038	; 0x8038 <dir_next>
    850c:	3b c0       	rjmp	.+118    	; 0x8584 <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    850e:	ec 89       	ldd	r30, Y+20	; 0x14
    8510:	fd 89       	ldd	r31, Y+21	; 0x15
    8512:	83 85       	ldd	r24, Z+11	; 0x0b
    8514:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    8516:	41 15       	cp	r20, r1
    8518:	51 05       	cpc	r21, r1
    851a:	39 f0       	breq	.+14     	; 0x852a <follow_path+0x21a>
    851c:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    851e:	44 30       	cpi	r20, 0x04	; 4
    8520:	51 05       	cpc	r21, r1
    8522:	09 f5       	brne	.+66     	; 0x8566 <follow_path+0x256>
    8524:	88 23       	and	r24, r24
    8526:	09 f1       	breq	.+66     	; 0x856a <follow_path+0x25a>
    8528:	22 c0       	rjmp	.+68     	; 0x856e <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    852a:	88 23       	and	r24, r24
    852c:	e1 f4       	brne	.+56     	; 0x8566 <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    852e:	ea 89       	ldd	r30, Y+18	; 0x12
    8530:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    8532:	83 85       	ldd	r24, Z+11	; 0x0b
    8534:	84 ff       	sbrs	r24, 4
    8536:	19 c0       	rjmp	.+50     	; 0x856a <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8538:	84 89       	ldd	r24, Z+20	; 0x14
    853a:	95 89       	ldd	r25, Z+21	; 0x15
    853c:	a0 e0       	ldi	r26, 0x00	; 0
    853e:	b0 e0       	ldi	r27, 0x00	; 0
    8540:	dc 01       	movw	r26, r24
    8542:	99 27       	eor	r25, r25
    8544:	88 27       	eor	r24, r24
    8546:	22 8d       	ldd	r18, Z+26	; 0x1a
    8548:	33 8d       	ldd	r19, Z+27	; 0x1b
    854a:	40 e0       	ldi	r20, 0x00	; 0
    854c:	50 e0       	ldi	r21, 0x00	; 0
    854e:	82 2b       	or	r24, r18
    8550:	93 2b       	or	r25, r19
    8552:	a4 2b       	or	r26, r20
    8554:	b5 2b       	or	r27, r21
    8556:	8e 83       	std	Y+6, r24	; 0x06
    8558:	9f 83       	std	Y+7, r25	; 0x07
    855a:	a8 87       	std	Y+8, r26	; 0x08
    855c:	b9 87       	std	Y+9, r27	; 0x09
    855e:	09 cf       	rjmp	.-494    	; 0x8372 <follow_path+0x62>
		}
    8560:	26 e0       	ldi	r18, 0x06	; 6
    8562:	30 e0       	ldi	r19, 0x00	; 0
    8564:	04 c0       	rjmp	.+8      	; 0x856e <follow_path+0x25e>
    8566:	9a 01       	movw	r18, r20
    8568:	02 c0       	rjmp	.+4      	; 0x856e <follow_path+0x25e>
    856a:	25 e0       	ldi	r18, 0x05	; 5
    856c:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    856e:	c9 01       	movw	r24, r18
    8570:	cd b7       	in	r28, 0x3d	; 61
    8572:	de b7       	in	r29, 0x3e	; 62
    8574:	ea e0       	ldi	r30, 0x0A	; 10
    8576:	0c 94 42 59 	jmp	0xb284	; 0xb284 <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    857a:	ce 01       	movw	r24, r28
    857c:	60 e0       	ldi	r22, 0x00	; 0
    857e:	70 e0       	ldi	r23, 0x00	; 0
    8580:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    8584:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    8586:	00 97       	sbiw	r24, 0x00	; 0
    8588:	09 f4       	brne	.+2      	; 0x858c <follow_path+0x27c>
    858a:	96 cf       	rjmp	.-212    	; 0x84b8 <follow_path+0x1a8>
    858c:	c0 cf       	rjmp	.-128    	; 0x850e <follow_path+0x1fe>
    858e:	40 e0       	ldi	r20, 0x00	; 0
    8590:	74 cf       	rjmp	.-280    	; 0x847a <follow_path+0x16a>

00008592 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8592:	a4 e2       	ldi	r26, 0x24	; 36
    8594:	b0 e0       	ldi	r27, 0x00	; 0
    8596:	ef ec       	ldi	r30, 0xCF	; 207
    8598:	f2 e4       	ldi	r31, 0x42	; 66
    859a:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    859e:	8b a3       	std	Y+35, r24	; 0x23
    85a0:	9c a3       	std	Y+36, r25	; 0x24
    85a2:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    85a4:	6d e0       	ldi	r22, 0x0D	; 13
    85a6:	e6 2e       	mov	r14, r22
    85a8:	f1 2c       	mov	r15, r1
    85aa:	ec 0e       	add	r14, r28
    85ac:	fd 1e       	adc	r15, r29
    85ae:	ce 01       	movw	r24, r28
    85b0:	83 96       	adiw	r24, 0x23	; 35
    85b2:	b7 01       	movw	r22, r14
    85b4:	40 e0       	ldi	r20, 0x00	; 0
    85b6:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    85ba:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    85bc:	00 97       	sbiw	r24, 0x00	; 0
    85be:	b9 f4       	brne	.+46     	; 0x85ee <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    85c0:	ce 01       	movw	r24, r28
    85c2:	01 96       	adiw	r24, 0x01	; 1
    85c4:	89 a3       	std	Y+33, r24	; 0x21
    85c6:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    85c8:	6b a1       	ldd	r22, Y+35	; 0x23
    85ca:	7c a1       	ldd	r23, Y+36	; 0x24
    85cc:	c7 01       	movw	r24, r14
    85ce:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    85d2:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    85d4:	00 97       	sbiw	r24, 0x00	; 0
    85d6:	59 f4       	brne	.+22     	; 0x85ee <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    85d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    85da:	98 a1       	ldd	r25, Y+32	; 0x20
    85dc:	89 2b       	or	r24, r25
    85de:	19 f4       	brne	.+6      	; 0x85e6 <f_stat+0x54>
    85e0:	06 e0       	ldi	r16, 0x06	; 6
    85e2:	10 e0       	ldi	r17, 0x00	; 0
    85e4:	04 c0       	rjmp	.+8      	; 0x85ee <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    85e6:	c7 01       	movw	r24, r14
    85e8:	b6 01       	movw	r22, r12
    85ea:	0e 94 15 32 	call	0x642a	; 0x642a <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    85ee:	c8 01       	movw	r24, r16
    85f0:	a4 96       	adiw	r28, 0x24	; 36
    85f2:	e8 e0       	ldi	r30, 0x08	; 8
    85f4:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>

000085f8 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    85f8:	ae e0       	ldi	r26, 0x0E	; 14
    85fa:	b0 e0       	ldi	r27, 0x00	; 0
    85fc:	e2 e0       	ldi	r30, 0x02	; 2
    85fe:	f3 e4       	ldi	r31, 0x43	; 67
    8600:	0c 94 2c 59 	jmp	0xb258	; 0xb258 <__prologue_saves__+0x1c>
    8604:	8c 01       	movw	r16, r24
    8606:	6d 87       	std	Y+13, r22	; 0x0d
    8608:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    860a:	ce 01       	movw	r24, r28
    860c:	0d 96       	adiw	r24, 0x0d	; 13
    860e:	b8 01       	movw	r22, r16
    8610:	40 e0       	ldi	r20, 0x00	; 0
    8612:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    8616:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8618:	00 97       	sbiw	r24, 0x00	; 0
    861a:	09 f0       	breq	.+2      	; 0x861e <f_opendir+0x26>
    861c:	42 c0       	rjmp	.+132    	; 0x86a2 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    861e:	ce 01       	movw	r24, r28
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	d8 01       	movw	r26, r16
    8624:	54 96       	adiw	r26, 0x14	; 20
    8626:	8d 93       	st	X+, r24
    8628:	9c 93       	st	X, r25
    862a:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    862c:	6d 85       	ldd	r22, Y+13	; 0x0d
    862e:	7e 85       	ldd	r23, Y+14	; 0x0e
    8630:	c8 01       	movw	r24, r16
    8632:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8636:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    8638:	00 97       	sbiw	r24, 0x00	; 0
    863a:	71 f5       	brne	.+92     	; 0x8698 <f_opendir+0xa0>
			dir = dj->dir;
    863c:	d8 01       	movw	r26, r16
    863e:	52 96       	adiw	r26, 0x12	; 18
    8640:	ed 91       	ld	r30, X+
    8642:	fc 91       	ld	r31, X
    8644:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    8646:	30 97       	sbiw	r30, 0x00	; 0
    8648:	b9 f0       	breq	.+46     	; 0x8678 <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    864a:	83 85       	ldd	r24, Z+11	; 0x0b
    864c:	84 ff       	sbrs	r24, 4
    864e:	27 c0       	rjmp	.+78     	; 0x869e <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8650:	84 89       	ldd	r24, Z+20	; 0x14
    8652:	95 89       	ldd	r25, Z+21	; 0x15
    8654:	a0 e0       	ldi	r26, 0x00	; 0
    8656:	b0 e0       	ldi	r27, 0x00	; 0
    8658:	dc 01       	movw	r26, r24
    865a:	99 27       	eor	r25, r25
    865c:	88 27       	eor	r24, r24
    865e:	22 8d       	ldd	r18, Z+26	; 0x1a
    8660:	33 8d       	ldd	r19, Z+27	; 0x1b
    8662:	40 e0       	ldi	r20, 0x00	; 0
    8664:	50 e0       	ldi	r21, 0x00	; 0
    8666:	82 2b       	or	r24, r18
    8668:	93 2b       	or	r25, r19
    866a:	a4 2b       	or	r26, r20
    866c:	b5 2b       	or	r27, r21
    866e:	f8 01       	movw	r30, r16
    8670:	86 83       	std	Z+6, r24	; 0x06
    8672:	97 83       	std	Z+7, r25	; 0x07
    8674:	a0 87       	std	Z+8, r26	; 0x08
    8676:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8678:	d8 01       	movw	r26, r16
    867a:	ed 91       	ld	r30, X+
    867c:	fc 91       	ld	r31, X
    867e:	11 97       	sbiw	r26, 0x01	; 1
    8680:	85 81       	ldd	r24, Z+5	; 0x05
    8682:	96 81       	ldd	r25, Z+6	; 0x06
    8684:	12 96       	adiw	r26, 0x02	; 2
    8686:	8d 93       	st	X+, r24
    8688:	9c 93       	st	X, r25
    868a:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    868c:	c8 01       	movw	r24, r16
    868e:	60 e0       	ldi	r22, 0x00	; 0
    8690:	70 e0       	ldi	r23, 0x00	; 0
    8692:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    8696:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8698:	24 30       	cpi	r18, 0x04	; 4
    869a:	31 05       	cpc	r19, r1
    869c:	11 f4       	brne	.+4      	; 0x86a2 <f_opendir+0xaa>
    869e:	25 e0       	ldi	r18, 0x05	; 5
    86a0:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    86a2:	c9 01       	movw	r24, r18
    86a4:	2e 96       	adiw	r28, 0x0e	; 14
    86a6:	e4 e0       	ldi	r30, 0x04	; 4
    86a8:	0c 94 48 59 	jmp	0xb290	; 0xb290 <__epilogue_restores__+0x1c>

000086ac <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    86ac:	a4 e2       	ldi	r26, 0x24	; 36
    86ae:	b0 e0       	ldi	r27, 0x00	; 0
    86b0:	ec e5       	ldi	r30, 0x5C	; 92
    86b2:	f3 e4       	ldi	r31, 0x43	; 67
    86b4:	0c 94 2c 59 	jmp	0xb258	; 0xb258 <__prologue_saves__+0x1c>
    86b8:	8b a3       	std	Y+35, r24	; 0x23
    86ba:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    86bc:	8e 01       	movw	r16, r28
    86be:	03 5f       	subi	r16, 0xF3	; 243
    86c0:	1f 4f       	sbci	r17, 0xFF	; 255
    86c2:	ce 01       	movw	r24, r28
    86c4:	83 96       	adiw	r24, 0x23	; 35
    86c6:	b8 01       	movw	r22, r16
    86c8:	40 e0       	ldi	r20, 0x00	; 0
    86ca:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    86ce:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    86d0:	00 97       	sbiw	r24, 0x00	; 0
    86d2:	e9 f5       	brne	.+122    	; 0x874e <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    86d4:	ce 01       	movw	r24, r28
    86d6:	01 96       	adiw	r24, 0x01	; 1
    86d8:	89 a3       	std	Y+33, r24	; 0x21
    86da:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    86dc:	6b a1       	ldd	r22, Y+35	; 0x23
    86de:	7c a1       	ldd	r23, Y+36	; 0x24
    86e0:	c8 01       	movw	r24, r16
    86e2:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    86e6:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    86e8:	00 97       	sbiw	r24, 0x00	; 0
    86ea:	61 f5       	brne	.+88     	; 0x8744 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    86ec:	2f 8d       	ldd	r18, Y+31	; 0x1f
    86ee:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    86f0:	21 15       	cp	r18, r1
    86f2:	31 05       	cpc	r19, r1
    86f4:	39 f4       	brne	.+14     	; 0x8704 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    86f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    86f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    86fa:	16 8a       	std	Z+22, r1	; 0x16
    86fc:	17 8a       	std	Z+23, r1	; 0x17
    86fe:	10 8e       	std	Z+24, r1	; 0x18
    8700:	11 8e       	std	Z+25, r1	; 0x19
    8702:	25 c0       	rjmp	.+74     	; 0x874e <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    8704:	d9 01       	movw	r26, r18
    8706:	1b 96       	adiw	r26, 0x0b	; 11
    8708:	8c 91       	ld	r24, X
    870a:	1b 97       	sbiw	r26, 0x0b	; 11
    870c:	84 ff       	sbrs	r24, 4
    870e:	1d c0       	rjmp	.+58     	; 0x874a <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8710:	0d 85       	ldd	r16, Y+13	; 0x0d
    8712:	1e 85       	ldd	r17, Y+14	; 0x0e
    8714:	54 96       	adiw	r26, 0x14	; 20
    8716:	8d 91       	ld	r24, X+
    8718:	9c 91       	ld	r25, X
    871a:	55 97       	sbiw	r26, 0x15	; 21
    871c:	a0 e0       	ldi	r26, 0x00	; 0
    871e:	b0 e0       	ldi	r27, 0x00	; 0
    8720:	dc 01       	movw	r26, r24
    8722:	99 27       	eor	r25, r25
    8724:	88 27       	eor	r24, r24
    8726:	f9 01       	movw	r30, r18
    8728:	22 8d       	ldd	r18, Z+26	; 0x1a
    872a:	33 8d       	ldd	r19, Z+27	; 0x1b
    872c:	40 e0       	ldi	r20, 0x00	; 0
    872e:	50 e0       	ldi	r21, 0x00	; 0
    8730:	82 2b       	or	r24, r18
    8732:	93 2b       	or	r25, r19
    8734:	a4 2b       	or	r26, r20
    8736:	b5 2b       	or	r27, r21
    8738:	f8 01       	movw	r30, r16
    873a:	86 8b       	std	Z+22, r24	; 0x16
    873c:	97 8b       	std	Z+23, r25	; 0x17
    873e:	a0 8f       	std	Z+24, r26	; 0x18
    8740:	b1 8f       	std	Z+25, r27	; 0x19
    8742:	05 c0       	rjmp	.+10     	; 0x874e <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8744:	84 30       	cpi	r24, 0x04	; 4
    8746:	91 05       	cpc	r25, r1
    8748:	11 f4       	brne	.+4      	; 0x874e <f_chdir+0xa2>
    874a:	65 e0       	ldi	r22, 0x05	; 5
    874c:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    874e:	cb 01       	movw	r24, r22
    8750:	a4 96       	adiw	r28, 0x24	; 36
    8752:	e4 e0       	ldi	r30, 0x04	; 4
    8754:	0c 94 48 59 	jmp	0xb290	; 0xb290 <__epilogue_restores__+0x1c>

00008758 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8758:	0f 93       	push	r16
    875a:	1f 93       	push	r17
    875c:	cf 93       	push	r28
    875e:	df 93       	push	r29
    8760:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    8762:	60 e0       	ldi	r22, 0x00	; 0
    8764:	70 e0       	ldi	r23, 0x00	; 0
    8766:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    876a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    876c:	00 97       	sbiw	r24, 0x00	; 0
    876e:	e1 f5       	brne	.+120    	; 0x87e8 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    8770:	4e 85       	ldd	r20, Y+14	; 0x0e
    8772:	5f 85       	ldd	r21, Y+15	; 0x0f
    8774:	68 89       	ldd	r22, Y+16	; 0x10
    8776:	79 89       	ldd	r23, Y+17	; 0x11
    8778:	88 81       	ld	r24, Y
    877a:	99 81       	ldd	r25, Y+1	; 0x01
    877c:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8780:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    8782:	00 97       	sbiw	r24, 0x00	; 0
    8784:	89 f5       	brne	.+98     	; 0x87e8 <dir_register+0x90>
			c = *dj->dir;
    8786:	ea 89       	ldd	r30, Y+18	; 0x12
    8788:	fb 89       	ldd	r31, Y+19	; 0x13
    878a:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    878c:	e5 3e       	cpi	r30, 0xE5	; 229
    878e:	91 f1       	breq	.+100    	; 0x87f4 <dir_register+0x9c>
    8790:	ee 23       	and	r30, r30
    8792:	81 f1       	breq	.+96     	; 0x87f4 <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    8794:	ce 01       	movw	r24, r28
    8796:	61 e0       	ldi	r22, 0x01	; 1
    8798:	70 e0       	ldi	r23, 0x00	; 0
    879a:	0e 94 1c 40 	call	0x8038	; 0x8038 <dir_next>
    879e:	e5 cf       	rjmp	.-54     	; 0x876a <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    87a0:	aa 89       	ldd	r26, Y+18	; 0x12
    87a2:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    87a4:	bd 01       	movw	r22, r26
    87a6:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    87a8:	cd 01       	movw	r24, r26
    87aa:	80 96       	adiw	r24, 0x20	; 32
    87ac:	01 c0       	rjmp	.+2      	; 0x87b0 <dir_register+0x58>
    87ae:	11 92       	st	Z+, r1
    87b0:	e8 17       	cp	r30, r24
    87b2:	f9 07       	cpc	r31, r25
    87b4:	e1 f7       	brne	.-8      	; 0x87ae <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    87b6:	0c 89       	ldd	r16, Y+20	; 0x14
    87b8:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    87ba:	a8 01       	movw	r20, r16
    87bc:	45 5f       	subi	r20, 0xF5	; 245
    87be:	5f 4f       	sbci	r21, 0xFF	; 255
    87c0:	06 c0       	rjmp	.+12     	; 0x87ce <dir_register+0x76>
    87c2:	f8 01       	movw	r30, r16
    87c4:	81 91       	ld	r24, Z+
    87c6:	8f 01       	movw	r16, r30
    87c8:	fb 01       	movw	r30, r22
    87ca:	81 93       	st	Z+, r24
    87cc:	bf 01       	movw	r22, r30
    87ce:	04 17       	cp	r16, r20
    87d0:	15 07       	cpc	r17, r21
    87d2:	b9 f7       	brne	.-18     	; 0x87c2 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    87d4:	ec 89       	ldd	r30, Y+20	; 0x14
    87d6:	fd 89       	ldd	r31, Y+21	; 0x15
    87d8:	83 85       	ldd	r24, Z+11	; 0x0b
    87da:	88 71       	andi	r24, 0x18	; 24
    87dc:	1c 96       	adiw	r26, 0x0c	; 12
    87de:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    87e0:	e8 81       	ld	r30, Y
    87e2:	f9 81       	ldd	r31, Y+1	; 0x01
    87e4:	81 e0       	ldi	r24, 0x01	; 1
    87e6:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    87e8:	c9 01       	movw	r24, r18
    87ea:	df 91       	pop	r29
    87ec:	cf 91       	pop	r28
    87ee:	1f 91       	pop	r17
    87f0:	0f 91       	pop	r16
    87f2:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    87f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    87f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    87f8:	68 89       	ldd	r22, Y+16	; 0x10
    87fa:	79 89       	ldd	r23, Y+17	; 0x11
    87fc:	88 81       	ld	r24, Y
    87fe:	99 81       	ldd	r25, Y+1	; 0x01
    8800:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8804:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8806:	00 97       	sbiw	r24, 0x00	; 0
    8808:	59 f2       	breq	.-106    	; 0x87a0 <dir_register+0x48>
    880a:	ee cf       	rjmp	.-36     	; 0x87e8 <dir_register+0x90>

0000880c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    880c:	cf 93       	push	r28
    880e:	df 93       	push	r29
    8810:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    8812:	6c 81       	ldd	r22, Y+4	; 0x04
    8814:	7d 81       	ldd	r23, Y+5	; 0x05
    8816:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    881a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    881c:	00 97       	sbiw	r24, 0x00	; 0
    881e:	99 f4       	brne	.+38     	; 0x8846 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    8820:	4e 85       	ldd	r20, Y+14	; 0x0e
    8822:	5f 85       	ldd	r21, Y+15	; 0x0f
    8824:	68 89       	ldd	r22, Y+16	; 0x10
    8826:	79 89       	ldd	r23, Y+17	; 0x11
    8828:	88 81       	ld	r24, Y
    882a:	99 81       	ldd	r25, Y+1	; 0x01
    882c:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8830:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8832:	00 97       	sbiw	r24, 0x00	; 0
    8834:	41 f4       	brne	.+16     	; 0x8846 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    8836:	ea 89       	ldd	r30, Y+18	; 0x12
    8838:	fb 89       	ldd	r31, Y+19	; 0x13
    883a:	85 ee       	ldi	r24, 0xE5	; 229
    883c:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    883e:	e8 81       	ld	r30, Y
    8840:	f9 81       	ldd	r31, Y+1	; 0x01
    8842:	81 e0       	ldi	r24, 0x01	; 1
    8844:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    8846:	c9 01       	movw	r24, r18
    8848:	df 91       	pop	r29
    884a:	cf 91       	pop	r28
    884c:	08 95       	ret

0000884e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    884e:	0f 93       	push	r16
    8850:	cf 93       	push	r28
    8852:	df 93       	push	r29
    8854:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    8856:	40 e0       	ldi	r20, 0x00	; 0
    8858:	50 e0       	ldi	r21, 0x00	; 0
    885a:	60 e0       	ldi	r22, 0x00	; 0
    885c:	70 e0       	ldi	r23, 0x00	; 0
    885e:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8862:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8864:	00 97       	sbiw	r24, 0x00	; 0
    8866:	09 f0       	breq	.+2      	; 0x886a <sync+0x1c>
    8868:	60 c0       	rjmp	.+192    	; 0x892a <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    886a:	88 81       	ld	r24, Y
    886c:	83 30       	cpi	r24, 0x03	; 3
    886e:	09 f0       	breq	.+2      	; 0x8872 <sync+0x24>
    8870:	51 c0       	rjmp	.+162    	; 0x8914 <sync+0xc6>
    8872:	89 85       	ldd	r24, Y+9	; 0x09
    8874:	88 23       	and	r24, r24
    8876:	09 f4       	brne	.+2      	; 0x887a <sync+0x2c>
    8878:	4d c0       	rjmp	.+154    	; 0x8914 <sync+0xc6>
			fs->winsect = 0;
    887a:	1e a6       	std	Y+46, r1	; 0x2e
    887c:	1f a6       	std	Y+47, r1	; 0x2f
    887e:	18 aa       	std	Y+48, r1	; 0x30
    8880:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    8882:	be 01       	movw	r22, r28
    8884:	6e 5c       	subi	r22, 0xCE	; 206
    8886:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8888:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    888a:	ce 01       	movw	r24, r28
    888c:	8e 5c       	subi	r24, 0xCE	; 206
    888e:	9d 4f       	sbci	r25, 0xFD	; 253
    8890:	01 c0       	rjmp	.+2      	; 0x8894 <sync+0x46>
    8892:	11 92       	st	Z+, r1
    8894:	e8 17       	cp	r30, r24
    8896:	f9 07       	cpc	r31, r25
    8898:	e1 f7       	brne	.-8      	; 0x8892 <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    889a:	c0 5d       	subi	r28, 0xD0	; 208
    889c:	dd 4f       	sbci	r29, 0xFD	; 253
    889e:	85 e5       	ldi	r24, 0x55	; 85
    88a0:	9a ea       	ldi	r25, 0xAA	; 170
    88a2:	88 83       	st	Y, r24
    88a4:	99 83       	std	Y+1, r25	; 0x01
    88a6:	c0 53       	subi	r28, 0x30	; 48
    88a8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    88aa:	82 e5       	ldi	r24, 0x52	; 82
    88ac:	92 e5       	ldi	r25, 0x52	; 82
    88ae:	a1 e6       	ldi	r26, 0x61	; 97
    88b0:	b1 e4       	ldi	r27, 0x41	; 65
    88b2:	8a ab       	std	Y+50, r24	; 0x32
    88b4:	9b ab       	std	Y+51, r25	; 0x33
    88b6:	ac ab       	std	Y+52, r26	; 0x34
    88b8:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    88ba:	ca 5e       	subi	r28, 0xEA	; 234
    88bc:	dd 4f       	sbci	r29, 0xFD	; 253
    88be:	82 e7       	ldi	r24, 0x72	; 114
    88c0:	92 e7       	ldi	r25, 0x72	; 114
    88c2:	a1 e4       	ldi	r26, 0x41	; 65
    88c4:	b1 e6       	ldi	r27, 0x61	; 97
    88c6:	88 83       	st	Y, r24
    88c8:	99 83       	std	Y+1, r25	; 0x01
    88ca:	aa 83       	std	Y+2, r26	; 0x02
    88cc:	bb 83       	std	Y+3, r27	; 0x03
    88ce:	c6 51       	subi	r28, 0x16	; 22
    88d0:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    88d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    88d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    88d6:	a8 89       	ldd	r26, Y+16	; 0x10
    88d8:	b9 89       	ldd	r27, Y+17	; 0x11
    88da:	c6 5e       	subi	r28, 0xE6	; 230
    88dc:	dd 4f       	sbci	r29, 0xFD	; 253
    88de:	88 83       	st	Y, r24
    88e0:	99 83       	std	Y+1, r25	; 0x01
    88e2:	aa 83       	std	Y+2, r26	; 0x02
    88e4:	bb 83       	std	Y+3, r27	; 0x03
    88e6:	ca 51       	subi	r28, 0x1A	; 26
    88e8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    88ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    88ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    88ee:	ac 85       	ldd	r26, Y+12	; 0x0c
    88f0:	bd 85       	ldd	r27, Y+13	; 0x0d
    88f2:	c2 5e       	subi	r28, 0xE2	; 226
    88f4:	dd 4f       	sbci	r29, 0xFD	; 253
    88f6:	88 83       	st	Y, r24
    88f8:	99 83       	std	Y+1, r25	; 0x01
    88fa:	aa 83       	std	Y+2, r26	; 0x02
    88fc:	bb 83       	std	Y+3, r27	; 0x03
    88fe:	ce 51       	subi	r28, 0x1E	; 30
    8900:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    8902:	2a 89       	ldd	r18, Y+18	; 0x12
    8904:	3b 89       	ldd	r19, Y+19	; 0x13
    8906:	4c 89       	ldd	r20, Y+20	; 0x14
    8908:	5d 89       	ldd	r21, Y+21	; 0x15
    890a:	89 81       	ldd	r24, Y+1	; 0x01
    890c:	01 e0       	ldi	r16, 0x01	; 1
    890e:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
			fs->fsi_flag = 0;
    8912:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    8914:	89 81       	ldd	r24, Y+1	; 0x01
    8916:	60 e0       	ldi	r22, 0x00	; 0
    8918:	40 e0       	ldi	r20, 0x00	; 0
    891a:	50 e0       	ldi	r21, 0x00	; 0
    891c:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <disk_ioctl>
    8920:	00 97       	sbiw	r24, 0x00	; 0
    8922:	11 f0       	breq	.+4      	; 0x8928 <sync+0xda>
    8924:	81 e0       	ldi	r24, 0x01	; 1
    8926:	90 e0       	ldi	r25, 0x00	; 0
    8928:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    892a:	c9 01       	movw	r24, r18
    892c:	df 91       	pop	r29
    892e:	cf 91       	pop	r28
    8930:	0f 91       	pop	r16
    8932:	08 95       	ret

00008934 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    8934:	a4 e2       	ldi	r26, 0x24	; 36
    8936:	b0 e0       	ldi	r27, 0x00	; 0
    8938:	e0 ea       	ldi	r30, 0xA0	; 160
    893a:	f4 e4       	ldi	r31, 0x44	; 68
    893c:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
    8940:	8b a3       	std	Y+35, r24	; 0x23
    8942:	9c a3       	std	Y+36, r25	; 0x24
    8944:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8946:	8e 01       	movw	r16, r28
    8948:	03 5f       	subi	r16, 0xF3	; 243
    894a:	1f 4f       	sbci	r17, 0xFF	; 255
    894c:	ce 01       	movw	r24, r28
    894e:	83 96       	adiw	r24, 0x23	; 35
    8950:	b8 01       	movw	r22, r16
    8952:	41 e0       	ldi	r20, 0x01	; 1
    8954:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    8958:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    895a:	00 97       	sbiw	r24, 0x00	; 0
    895c:	69 f5       	brne	.+90     	; 0x89b8 <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    895e:	ce 01       	movw	r24, r28
    8960:	01 96       	adiw	r24, 0x01	; 1
    8962:	89 a3       	std	Y+33, r24	; 0x21
    8964:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8966:	6b a1       	ldd	r22, Y+35	; 0x23
    8968:	7c a1       	ldd	r23, Y+36	; 0x24
    896a:	c8 01       	movw	r24, r16
    896c:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8970:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8972:	00 97       	sbiw	r24, 0x00	; 0
    8974:	09 f5       	brne	.+66     	; 0x89b8 <f_utime+0x84>
    8976:	e9 a1       	ldd	r30, Y+33	; 0x21
    8978:	fa a1       	ldd	r31, Y+34	; 0x22
    897a:	83 85       	ldd	r24, Z+11	; 0x0b
    897c:	85 fd       	sbrc	r24, 5
    897e:	1a c0       	rjmp	.+52     	; 0x89b4 <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8980:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8982:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    8984:	30 97       	sbiw	r30, 0x00	; 0
    8986:	b1 f0       	breq	.+44     	; 0x89b4 <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    8988:	d7 01       	movw	r26, r14
    898a:	16 96       	adiw	r26, 0x06	; 6
    898c:	8d 91       	ld	r24, X+
    898e:	9c 91       	ld	r25, X
    8990:	17 97       	sbiw	r26, 0x07	; 7
    8992:	86 8b       	std	Z+22, r24	; 0x16
    8994:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    8996:	14 96       	adiw	r26, 0x04	; 4
    8998:	8d 91       	ld	r24, X+
    899a:	9c 91       	ld	r25, X
    899c:	15 97       	sbiw	r26, 0x05	; 5
    899e:	80 8f       	std	Z+24, r24	; 0x18
    89a0:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    89a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    89a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    89a6:	81 e0       	ldi	r24, 0x01	; 1
    89a8:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    89aa:	cf 01       	movw	r24, r30
    89ac:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    89b0:	9c 01       	movw	r18, r24
    89b2:	02 c0       	rjmp	.+4      	; 0x89b8 <f_utime+0x84>
    89b4:	26 e0       	ldi	r18, 0x06	; 6
    89b6:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    89b8:	c9 01       	movw	r24, r18
    89ba:	a4 96       	adiw	r28, 0x24	; 36
    89bc:	e6 e0       	ldi	r30, 0x06	; 6
    89be:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

000089c2 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    89c2:	a4 e2       	ldi	r26, 0x24	; 36
    89c4:	b0 e0       	ldi	r27, 0x00	; 0
    89c6:	e7 ee       	ldi	r30, 0xE7	; 231
    89c8:	f4 e4       	ldi	r31, 0x44	; 68
    89ca:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
    89ce:	8b a3       	std	Y+35, r24	; 0x23
    89d0:	9c a3       	std	Y+36, r25	; 0x24
    89d2:	e6 2e       	mov	r14, r22
    89d4:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    89d6:	8e 01       	movw	r16, r28
    89d8:	03 5f       	subi	r16, 0xF3	; 243
    89da:	1f 4f       	sbci	r17, 0xFF	; 255
    89dc:	ce 01       	movw	r24, r28
    89de:	83 96       	adiw	r24, 0x23	; 35
    89e0:	b8 01       	movw	r22, r16
    89e2:	41 e0       	ldi	r20, 0x01	; 1
    89e4:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    89e8:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    89ea:	00 97       	sbiw	r24, 0x00	; 0
    89ec:	49 f5       	brne	.+82     	; 0x8a40 <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    89ee:	ce 01       	movw	r24, r28
    89f0:	01 96       	adiw	r24, 0x01	; 1
    89f2:	89 a3       	std	Y+33, r24	; 0x21
    89f4:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    89f6:	6b a1       	ldd	r22, Y+35	; 0x23
    89f8:	7c a1       	ldd	r23, Y+36	; 0x24
    89fa:	c8 01       	movw	r24, r16
    89fc:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8a00:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8a02:	00 97       	sbiw	r24, 0x00	; 0
    8a04:	e9 f4       	brne	.+58     	; 0x8a40 <f_chmod+0x7e>
    8a06:	e9 a1       	ldd	r30, Y+33	; 0x21
    8a08:	fa a1       	ldd	r31, Y+34	; 0x22
    8a0a:	83 85       	ldd	r24, Z+11	; 0x0b
    8a0c:	85 fd       	sbrc	r24, 5
    8a0e:	16 c0       	rjmp	.+44     	; 0x8a3c <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8a10:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8a12:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    8a14:	30 97       	sbiw	r30, 0x00	; 0
    8a16:	91 f0       	breq	.+36     	; 0x8a3c <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8a18:	9f 2d       	mov	r25, r15
    8a1a:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8a1c:	89 2f       	mov	r24, r25
    8a1e:	80 95       	com	r24
    8a20:	23 85       	ldd	r18, Z+11	; 0x0b
    8a22:	82 23       	and	r24, r18
    8a24:	9e 21       	and	r25, r14
    8a26:	89 2b       	or	r24, r25
    8a28:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8a2a:	ed 85       	ldd	r30, Y+13	; 0x0d
    8a2c:	fe 85       	ldd	r31, Y+14	; 0x0e
    8a2e:	81 e0       	ldi	r24, 0x01	; 1
    8a30:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8a32:	cf 01       	movw	r24, r30
    8a34:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    8a38:	9c 01       	movw	r18, r24
    8a3a:	02 c0       	rjmp	.+4      	; 0x8a40 <f_chmod+0x7e>
    8a3c:	26 e0       	ldi	r18, 0x06	; 6
    8a3e:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8a40:	c9 01       	movw	r24, r18
    8a42:	a4 96       	adiw	r28, 0x24	; 36
    8a44:	e6 e0       	ldi	r30, 0x06	; 6
    8a46:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

00008a4a <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    8a4a:	af e4       	ldi	r26, 0x4F	; 79
    8a4c:	b0 e0       	ldi	r27, 0x00	; 0
    8a4e:	eb e2       	ldi	r30, 0x2B	; 43
    8a50:	f5 e4       	ldi	r31, 0x45	; 69
    8a52:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    8a56:	8e 01       	movw	r16, r28
    8a58:	02 5b       	subi	r16, 0xB2	; 178
    8a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a5c:	d8 01       	movw	r26, r16
    8a5e:	8d 93       	st	X+, r24
    8a60:	9c 93       	st	X, r25
    8a62:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    8a64:	ce 01       	movw	r24, r28
    8a66:	01 96       	adiw	r24, 0x01	; 1
    8a68:	8e ab       	std	Y+54, r24	; 0x36
    8a6a:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    8a6c:	32 e2       	ldi	r19, 0x22	; 34
    8a6e:	e3 2e       	mov	r14, r19
    8a70:	f1 2c       	mov	r15, r1
    8a72:	ec 0e       	add	r14, r28
    8a74:	fd 1e       	adc	r15, r29
    8a76:	c8 01       	movw	r24, r16
    8a78:	b7 01       	movw	r22, r14
    8a7a:	41 e0       	ldi	r20, 0x01	; 1
    8a7c:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    8a80:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8a82:	00 97       	sbiw	r24, 0x00	; 0
    8a84:	09 f0       	breq	.+2      	; 0x8a88 <f_rename+0x3e>
    8a86:	f0 c0       	rjmp	.+480    	; 0x8c68 <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    8a88:	8a a1       	ldd	r24, Y+34	; 0x22
    8a8a:	9b a1       	ldd	r25, Y+35	; 0x23
    8a8c:	88 af       	std	Y+56, r24	; 0x38
    8a8e:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    8a90:	f8 01       	movw	r30, r16
    8a92:	60 81       	ld	r22, Z
    8a94:	71 81       	ldd	r23, Z+1	; 0x01
    8a96:	c7 01       	movw	r24, r14
    8a98:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8a9c:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    8a9e:	00 97       	sbiw	r24, 0x00	; 0
    8aa0:	09 f0       	breq	.+2      	; 0x8aa4 <f_rename+0x5a>
    8aa2:	e2 c0       	rjmp	.+452    	; 0x8c68 <f_rename+0x21e>
    8aa4:	ee a9       	ldd	r30, Y+54	; 0x36
    8aa6:	ff a9       	ldd	r31, Y+55	; 0x37
    8aa8:	83 85       	ldd	r24, Z+11	; 0x0b
    8aaa:	85 ff       	sbrs	r24, 5
    8aac:	03 c0       	rjmp	.+6      	; 0x8ab4 <f_rename+0x6a>
    8aae:	26 e0       	ldi	r18, 0x06	; 6
    8ab0:	30 e0       	ldi	r19, 0x00	; 0
    8ab2:	da c0       	rjmp	.+436    	; 0x8c68 <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    8ab4:	8c a9       	ldd	r24, Y+52	; 0x34
    8ab6:	9d a9       	ldd	r25, Y+53	; 0x35
    8ab8:	00 97       	sbiw	r24, 0x00	; 0
    8aba:	19 f4       	brne	.+6      	; 0x8ac2 <f_rename+0x78>
    8abc:	24 e0       	ldi	r18, 0x04	; 4
    8abe:	30 e0       	ldi	r19, 0x00	; 0
    8ac0:	d3 c0       	rjmp	.+422    	; 0x8c68 <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8ac2:	de 01       	movw	r26, r28
    8ac4:	1d 96       	adiw	r26, 0x0d	; 13
    8ac6:	fc 01       	movw	r30, r24
    8ac8:	02 c0       	rjmp	.+4      	; 0x8ace <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8aca:	82 85       	ldd	r24, Z+10	; 0x0a
    8acc:	8d 93       	st	X+, r24
    8ace:	31 96       	adiw	r30, 0x01	; 1
    8ad0:	ae 15       	cp	r26, r14
    8ad2:	bf 05       	cpc	r27, r15
    8ad4:	d1 f7       	brne	.-12     	; 0x8aca <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8ad6:	de 01       	movw	r26, r28
    8ad8:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    8ada:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    8adc:	9d 01       	movw	r18, r26
    8ade:	02 c0       	rjmp	.+4      	; 0x8ae4 <f_rename+0x9a>
    8ae0:	81 91       	ld	r24, Z+
    8ae2:	8d 93       	st	X+, r24
    8ae4:	e2 17       	cp	r30, r18
    8ae6:	f3 07       	cpc	r31, r19
    8ae8:	d9 f7       	brne	.-10     	; 0x8ae0 <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    8aea:	8e 01       	movw	r16, r28
    8aec:	08 5c       	subi	r16, 0xC8	; 200
    8aee:	1f 4f       	sbci	r17, 0xFF	; 255
    8af0:	c8 01       	movw	r24, r16
    8af2:	b6 01       	movw	r22, r12
    8af4:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8af8:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    8afa:	00 97       	sbiw	r24, 0x00	; 0
    8afc:	19 f4       	brne	.+6      	; 0x8b04 <f_rename+0xba>
    8afe:	28 e0       	ldi	r18, 0x08	; 8
    8b00:	30 e0       	ldi	r19, 0x00	; 0
    8b02:	b2 c0       	rjmp	.+356    	; 0x8c68 <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    8b04:	84 30       	cpi	r24, 0x04	; 4
    8b06:	91 05       	cpc	r25, r1
    8b08:	09 f0       	breq	.+2      	; 0x8b0c <f_rename+0xc2>
    8b0a:	ae c0       	rjmp	.+348    	; 0x8c68 <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8b0c:	c8 01       	movw	r24, r16
    8b0e:	0e 94 ac 43 	call	0x8758	; 0x8758 <dir_register>
    8b12:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8b14:	00 97       	sbiw	r24, 0x00	; 0
    8b16:	09 f0       	breq	.+2      	; 0x8b1a <f_rename+0xd0>
    8b18:	a7 c0       	rjmp	.+334    	; 0x8c68 <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    8b1a:	fe 01       	movw	r30, r28
    8b1c:	e6 5b       	subi	r30, 0xB6	; 182
    8b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    8b20:	20 81       	ld	r18, Z
    8b22:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8b24:	de 01       	movw	r26, r28
    8b26:	1f 96       	adiw	r26, 0x0f	; 15
    8b28:	f9 01       	movw	r30, r18
    8b2a:	02 c0       	rjmp	.+4      	; 0x8b30 <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    8b2c:	8d 91       	ld	r24, X+
    8b2e:	84 87       	std	Z+12, r24	; 0x0c
    8b30:	31 96       	adiw	r30, 0x01	; 1
    8b32:	ae 15       	cp	r26, r14
    8b34:	bf 05       	cpc	r27, r15
    8b36:	d1 f7       	brne	.-12     	; 0x8b2c <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    8b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b3a:	80 62       	ori	r24, 0x20	; 32
    8b3c:	d9 01       	movw	r26, r18
    8b3e:	1b 96       	adiw	r26, 0x0b	; 11
    8b40:	8c 93       	st	X, r24
    8b42:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    8b44:	ea a1       	ldd	r30, Y+34	; 0x22
    8b46:	fb a1       	ldd	r31, Y+35	; 0x23
    8b48:	81 e0       	ldi	r24, 0x01	; 1
    8b4a:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    8b4c:	1b 96       	adiw	r26, 0x0b	; 11
    8b4e:	8c 91       	ld	r24, X
    8b50:	1b 97       	sbiw	r26, 0x0b	; 11
    8b52:	84 ff       	sbrs	r24, 4
    8b54:	7a c0       	rjmp	.+244    	; 0x8c4a <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    8b56:	c8 ac       	ldd	r12, Y+56	; 0x38
    8b58:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8b5a:	5a 96       	adiw	r26, 0x1a	; 26
    8b5c:	8d 91       	ld	r24, X+
    8b5e:	9c 91       	ld	r25, X
    8b60:	5b 97       	sbiw	r26, 0x1b	; 27
    8b62:	54 96       	adiw	r26, 0x14	; 20
    8b64:	2d 91       	ld	r18, X+
    8b66:	3c 91       	ld	r19, X
    8b68:	55 97       	sbiw	r26, 0x15	; 21
    8b6a:	82 2b       	or	r24, r18
    8b6c:	93 2b       	or	r25, r19
    8b6e:	7c 01       	movw	r14, r24
    8b70:	00 e0       	ldi	r16, 0x00	; 0
    8b72:	10 e0       	ldi	r17, 0x00	; 0
    8b74:	8e ef       	ldi	r24, 0xFE	; 254
    8b76:	9f ef       	ldi	r25, 0xFF	; 255
    8b78:	af ef       	ldi	r26, 0xFF	; 255
    8b7a:	bf ef       	ldi	r27, 0xFF	; 255
    8b7c:	e8 0e       	add	r14, r24
    8b7e:	f9 1e       	adc	r15, r25
    8b80:	0a 1f       	adc	r16, r26
    8b82:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8b84:	f6 01       	movw	r30, r12
    8b86:	86 8d       	ldd	r24, Z+30	; 0x1e
    8b88:	97 8d       	ldd	r25, Z+31	; 0x1f
    8b8a:	a0 a1       	ldd	r26, Z+32	; 0x20
    8b8c:	b1 a1       	ldd	r27, Z+33	; 0x21
    8b8e:	02 97       	sbiw	r24, 0x02	; 2
    8b90:	a1 09       	sbc	r26, r1
    8b92:	b1 09       	sbc	r27, r1
    8b94:	e8 16       	cp	r14, r24
    8b96:	f9 06       	cpc	r15, r25
    8b98:	0a 07       	cpc	r16, r26
    8b9a:	1b 07       	cpc	r17, r27
    8b9c:	08 f0       	brcs	.+2      	; 0x8ba0 <f_rename+0x156>
    8b9e:	62 c0       	rjmp	.+196    	; 0x8c64 <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    8ba0:	22 81       	ldd	r18, Z+2	; 0x02
    8ba2:	30 e0       	ldi	r19, 0x00	; 0
    8ba4:	40 e0       	ldi	r20, 0x00	; 0
    8ba6:	50 e0       	ldi	r21, 0x00	; 0
    8ba8:	c8 01       	movw	r24, r16
    8baa:	b7 01       	movw	r22, r14
    8bac:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    8bb0:	ab 01       	movw	r20, r22
    8bb2:	bc 01       	movw	r22, r24
    8bb4:	f6 01       	movw	r30, r12
    8bb6:	82 a5       	ldd	r24, Z+42	; 0x2a
    8bb8:	93 a5       	ldd	r25, Z+43	; 0x2b
    8bba:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8bbc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8bbe:	48 0f       	add	r20, r24
    8bc0:	59 1f       	adc	r21, r25
    8bc2:	6a 1f       	adc	r22, r26
    8bc4:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    8bc6:	41 15       	cp	r20, r1
    8bc8:	51 05       	cpc	r21, r1
    8bca:	61 05       	cpc	r22, r1
    8bcc:	71 05       	cpc	r23, r1
    8bce:	09 f4       	brne	.+2      	; 0x8bd2 <f_rename+0x188>
    8bd0:	49 c0       	rjmp	.+146    	; 0x8c64 <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    8bd2:	c6 01       	movw	r24, r12
    8bd4:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8bd8:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    8bda:	08 ad       	ldd	r16, Y+56	; 0x38
    8bdc:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    8bde:	00 97       	sbiw	r24, 0x00	; 0
    8be0:	09 f0       	breq	.+2      	; 0x8be4 <f_rename+0x19a>
    8be2:	42 c0       	rjmp	.+132    	; 0x8c68 <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    8be4:	b8 01       	movw	r22, r16
    8be6:	6e 5a       	subi	r22, 0xAE	; 174
    8be8:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    8bea:	db 01       	movw	r26, r22
    8bec:	11 96       	adiw	r26, 0x01	; 1
    8bee:	8c 91       	ld	r24, X
    8bf0:	8e 32       	cpi	r24, 0x2E	; 46
    8bf2:	59 f5       	brne	.+86     	; 0x8c4a <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    8bf4:	f8 01       	movw	r30, r16
    8bf6:	80 81       	ld	r24, Z
    8bf8:	83 30       	cpi	r24, 0x03	; 3
    8bfa:	a9 f4       	brne	.+42     	; 0x8c26 <f_rename+0x1dc>
    8bfc:	fe 01       	movw	r30, r28
    8bfe:	fe 96       	adiw	r30, 0x3e	; 62
    8c00:	20 81       	ld	r18, Z
    8c02:	31 81       	ldd	r19, Z+1	; 0x01
    8c04:	42 81       	ldd	r20, Z+2	; 0x02
    8c06:	53 81       	ldd	r21, Z+3	; 0x03
    8c08:	f8 01       	movw	r30, r16
    8c0a:	86 a1       	ldd	r24, Z+38	; 0x26
    8c0c:	97 a1       	ldd	r25, Z+39	; 0x27
    8c0e:	a0 a5       	ldd	r26, Z+40	; 0x28
    8c10:	b1 a5       	ldd	r27, Z+41	; 0x29
    8c12:	28 17       	cp	r18, r24
    8c14:	39 07       	cpc	r19, r25
    8c16:	4a 07       	cpc	r20, r26
    8c18:	5b 07       	cpc	r21, r27
    8c1a:	29 f4       	brne	.+10     	; 0x8c26 <f_rename+0x1dc>
    8c1c:	80 e0       	ldi	r24, 0x00	; 0
    8c1e:	90 e0       	ldi	r25, 0x00	; 0
    8c20:	a0 e0       	ldi	r26, 0x00	; 0
    8c22:	b0 e0       	ldi	r27, 0x00	; 0
    8c24:	06 c0       	rjmp	.+12     	; 0x8c32 <f_rename+0x1e8>
    8c26:	fe 01       	movw	r30, r28
    8c28:	fe 96       	adiw	r30, 0x3e	; 62
    8c2a:	80 81       	ld	r24, Z
    8c2c:	91 81       	ldd	r25, Z+1	; 0x01
    8c2e:	a2 81       	ldd	r26, Z+2	; 0x02
    8c30:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    8c32:	fb 01       	movw	r30, r22
    8c34:	82 8f       	std	Z+26, r24	; 0x1a
    8c36:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    8c38:	cd 01       	movw	r24, r26
    8c3a:	aa 27       	eor	r26, r26
    8c3c:	bb 27       	eor	r27, r27
    8c3e:	84 8b       	std	Z+20, r24	; 0x14
    8c40:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    8c42:	81 e0       	ldi	r24, 0x01	; 1
    8c44:	d8 01       	movw	r26, r16
    8c46:	14 96       	adiw	r26, 0x04	; 4
    8c48:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    8c4a:	ce 01       	movw	r24, r28
    8c4c:	82 96       	adiw	r24, 0x22	; 34
    8c4e:	0e 94 06 44 	call	0x880c	; 0x880c <dir_remove>
    8c52:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    8c54:	00 97       	sbiw	r24, 0x00	; 0
    8c56:	41 f4       	brne	.+16     	; 0x8c68 <f_rename+0x21e>
					res = sync(dj_old.fs);
    8c58:	8a a1       	ldd	r24, Y+34	; 0x22
    8c5a:	9b a1       	ldd	r25, Y+35	; 0x23
    8c5c:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    8c60:	9c 01       	movw	r18, r24
    8c62:	02 c0       	rjmp	.+4      	; 0x8c68 <f_rename+0x21e>
    8c64:	22 e0       	ldi	r18, 0x02	; 2
    8c66:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    8c68:	c9 01       	movw	r24, r18
    8c6a:	c1 5b       	subi	r28, 0xB1	; 177
    8c6c:	df 4f       	sbci	r29, 0xFF	; 255
    8c6e:	e8 e0       	ldi	r30, 0x08	; 8
    8c70:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>

00008c74 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    8c74:	ae e2       	ldi	r26, 0x2E	; 46
    8c76:	b0 e0       	ldi	r27, 0x00	; 0
    8c78:	e0 e4       	ldi	r30, 0x40	; 64
    8c7a:	f6 e4       	ldi	r31, 0x46	; 70
    8c7c:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    8c80:	8b a3       	std	Y+35, r24	; 0x23
    8c82:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    8c84:	ad e0       	ldi	r26, 0x0D	; 13
    8c86:	ea 2e       	mov	r14, r26
    8c88:	f1 2c       	mov	r15, r1
    8c8a:	ec 0e       	add	r14, r28
    8c8c:	fd 1e       	adc	r15, r29
    8c8e:	ce 01       	movw	r24, r28
    8c90:	83 96       	adiw	r24, 0x23	; 35
    8c92:	b7 01       	movw	r22, r14
    8c94:	41 e0       	ldi	r20, 0x01	; 1
    8c96:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    8c9a:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8c9c:	00 97       	sbiw	r24, 0x00	; 0
    8c9e:	09 f0       	breq	.+2      	; 0x8ca2 <f_mkdir+0x2e>
    8ca0:	3a c1       	rjmp	.+628    	; 0x8f16 <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    8ca2:	ce 01       	movw	r24, r28
    8ca4:	01 96       	adiw	r24, 0x01	; 1
    8ca6:	89 a3       	std	Y+33, r24	; 0x21
    8ca8:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8caa:	6b a1       	ldd	r22, Y+35	; 0x23
    8cac:	7c a1       	ldd	r23, Y+36	; 0x24
    8cae:	c7 01       	movw	r24, r14
    8cb0:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8cb4:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    8cb6:	00 97       	sbiw	r24, 0x00	; 0
    8cb8:	61 f0       	breq	.+24     	; 0x8cd2 <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    8cba:	84 30       	cpi	r24, 0x04	; 4
    8cbc:	91 05       	cpc	r25, r1
    8cbe:	09 f0       	breq	.+2      	; 0x8cc2 <f_mkdir+0x4e>
    8cc0:	2a c1       	rjmp	.+596    	; 0x8f16 <f_mkdir+0x2a2>
    8cc2:	e9 a1       	ldd	r30, Y+33	; 0x21
    8cc4:	fa a1       	ldd	r31, Y+34	; 0x22
    8cc6:	83 85       	ldd	r24, Z+11	; 0x0b
    8cc8:	85 ff       	sbrs	r24, 5
    8cca:	06 c0       	rjmp	.+12     	; 0x8cd8 <f_mkdir+0x64>
    8ccc:	06 e0       	ldi	r16, 0x06	; 6
    8cce:	10 e0       	ldi	r17, 0x00	; 0
    8cd0:	22 c1       	rjmp	.+580    	; 0x8f16 <f_mkdir+0x2a2>
    8cd2:	08 e0       	ldi	r16, 0x08	; 8
    8cd4:	10 e0       	ldi	r17, 0x00	; 0
    8cd6:	1f c1       	rjmp	.+574    	; 0x8f16 <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    8cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    8cdc:	40 e0       	ldi	r20, 0x00	; 0
    8cde:	50 e0       	ldi	r21, 0x00	; 0
    8ce0:	60 e0       	ldi	r22, 0x00	; 0
    8ce2:	70 e0       	ldi	r23, 0x00	; 0
    8ce4:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
    8ce8:	3b 01       	movw	r6, r22
    8cea:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    8cec:	61 15       	cp	r22, r1
    8cee:	71 05       	cpc	r23, r1
    8cf0:	81 05       	cpc	r24, r1
    8cf2:	91 05       	cpc	r25, r1
    8cf4:	19 f4       	brne	.+6      	; 0x8cfc <f_mkdir+0x88>
    8cf6:	07 e0       	ldi	r16, 0x07	; 7
    8cf8:	10 e0       	ldi	r17, 0x00	; 0
    8cfa:	0d c1       	rjmp	.+538    	; 0x8f16 <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    8cfc:	61 30       	cpi	r22, 0x01	; 1
    8cfe:	71 05       	cpc	r23, r1
    8d00:	81 05       	cpc	r24, r1
    8d02:	91 05       	cpc	r25, r1
    8d04:	19 f4       	brne	.+6      	; 0x8d0c <f_mkdir+0x98>
    8d06:	02 e0       	ldi	r16, 0x02	; 2
    8d08:	10 e0       	ldi	r17, 0x00	; 0
    8d0a:	05 c1       	rjmp	.+522    	; 0x8f16 <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    8d0c:	6f 3f       	cpi	r22, 0xFF	; 255
    8d0e:	3f ef       	ldi	r19, 0xFF	; 255
    8d10:	73 07       	cpc	r23, r19
    8d12:	3f ef       	ldi	r19, 0xFF	; 255
    8d14:	83 07       	cpc	r24, r19
    8d16:	3f ef       	ldi	r19, 0xFF	; 255
    8d18:	93 07       	cpc	r25, r19
    8d1a:	09 f4       	brne	.+2      	; 0x8d1e <f_mkdir+0xaa>
    8d1c:	01 c1       	rjmp	.+514    	; 0x8f20 <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    8d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d22:	40 e0       	ldi	r20, 0x00	; 0
    8d24:	50 e0       	ldi	r21, 0x00	; 0
    8d26:	60 e0       	ldi	r22, 0x00	; 0
    8d28:	70 e0       	ldi	r23, 0x00	; 0
    8d2a:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8d2e:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8d30:	00 97       	sbiw	r24, 0x00	; 0
    8d32:	09 f0       	breq	.+2      	; 0x8d36 <f_mkdir+0xc2>
    8d34:	f0 c0       	rjmp	.+480    	; 0x8f16 <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    8d36:	cd 84       	ldd	r12, Y+13	; 0x0d
    8d38:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8d3a:	fe ef       	ldi	r31, 0xFE	; 254
    8d3c:	ef 2e       	mov	r14, r31
    8d3e:	ff ef       	ldi	r31, 0xFF	; 255
    8d40:	ff 2e       	mov	r15, r31
    8d42:	ff ef       	ldi	r31, 0xFF	; 255
    8d44:	0f 2f       	mov	r16, r31
    8d46:	ff ef       	ldi	r31, 0xFF	; 255
    8d48:	1f 2f       	mov	r17, r31
    8d4a:	e6 0c       	add	r14, r6
    8d4c:	f7 1c       	adc	r15, r7
    8d4e:	08 1d       	adc	r16, r8
    8d50:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8d52:	f6 01       	movw	r30, r12
    8d54:	86 8d       	ldd	r24, Z+30	; 0x1e
    8d56:	97 8d       	ldd	r25, Z+31	; 0x1f
    8d58:	a0 a1       	ldd	r26, Z+32	; 0x20
    8d5a:	b1 a1       	ldd	r27, Z+33	; 0x21
    8d5c:	02 97       	sbiw	r24, 0x02	; 2
    8d5e:	a1 09       	sbc	r26, r1
    8d60:	b1 09       	sbc	r27, r1
    8d62:	e8 16       	cp	r14, r24
    8d64:	f9 06       	cpc	r15, r25
    8d66:	0a 07       	cpc	r16, r26
    8d68:	1b 07       	cpc	r17, r27
    8d6a:	20 f0       	brcs	.+8      	; 0x8d74 <f_mkdir+0x100>
    8d6c:	22 24       	eor	r2, r2
    8d6e:	33 24       	eor	r3, r3
    8d70:	21 01       	movw	r4, r2
    8d72:	15 c0       	rjmp	.+42     	; 0x8d9e <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    8d74:	d6 01       	movw	r26, r12
    8d76:	12 96       	adiw	r26, 0x02	; 2
    8d78:	2c 91       	ld	r18, X
    8d7a:	30 e0       	ldi	r19, 0x00	; 0
    8d7c:	40 e0       	ldi	r20, 0x00	; 0
    8d7e:	50 e0       	ldi	r21, 0x00	; 0
    8d80:	c8 01       	movw	r24, r16
    8d82:	b7 01       	movw	r22, r14
    8d84:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    8d88:	1b 01       	movw	r2, r22
    8d8a:	2c 01       	movw	r4, r24
    8d8c:	f6 01       	movw	r30, r12
    8d8e:	82 a5       	ldd	r24, Z+42	; 0x2a
    8d90:	93 a5       	ldd	r25, Z+43	; 0x2b
    8d92:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8d94:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8d96:	28 0e       	add	r2, r24
    8d98:	39 1e       	adc	r3, r25
    8d9a:	4a 1e       	adc	r4, r26
    8d9c:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    8d9e:	e2 e3       	ldi	r30, 0x32	; 50
    8da0:	ae 2e       	mov	r10, r30
    8da2:	b1 2c       	mov	r11, r1
    8da4:	ac 0c       	add	r10, r12
    8da6:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8da8:	ad a2       	std	Y+37, r10	; 0x25
    8daa:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    8dac:	c6 01       	movw	r24, r12
    8dae:	8e 5c       	subi	r24, 0xCE	; 206
    8db0:	9d 4f       	sbci	r25, 0xFD	; 253
    8db2:	05 c0       	rjmp	.+10     	; 0x8dbe <f_mkdir+0x14a>
    8db4:	ad a1       	ldd	r26, Y+37	; 0x25
    8db6:	be a1       	ldd	r27, Y+38	; 0x26
    8db8:	1d 92       	st	X+, r1
    8dba:	ad a3       	std	Y+37, r26	; 0x25
    8dbc:	be a3       	std	Y+38, r27	; 0x26
    8dbe:	ed a1       	ldd	r30, Y+37	; 0x25
    8dc0:	fe a1       	ldd	r31, Y+38	; 0x26
    8dc2:	e8 17       	cp	r30, r24
    8dc4:	f9 07       	cpc	r31, r25
    8dc6:	b1 f7       	brne	.-20     	; 0x8db4 <f_mkdir+0x140>
    8dc8:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    8dca:	c5 01       	movw	r24, r10
    8dcc:	0b 96       	adiw	r24, 0x0b	; 11
    8dce:	20 e2       	ldi	r18, 0x20	; 32
    8dd0:	01 c0       	rjmp	.+2      	; 0x8dd4 <f_mkdir+0x160>
    8dd2:	21 93       	st	Z+, r18
    8dd4:	e8 17       	cp	r30, r24
    8dd6:	f9 07       	cpc	r31, r25
    8dd8:	e1 f7       	brne	.-8      	; 0x8dd2 <f_mkdir+0x15e>
    8dda:	8e e2       	ldi	r24, 0x2E	; 46
    8ddc:	d6 01       	movw	r26, r12
    8dde:	d2 96       	adiw	r26, 0x32	; 50
    8de0:	8c 93       	st	X, r24
    8de2:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    8de4:	80 e1       	ldi	r24, 0x10	; 16
    8de6:	dd 96       	adiw	r26, 0x3d	; 61
    8de8:	8c 93       	st	X, r24
	tim = get_fattime();
    8dea:	0e 94 f5 55 	call	0xabea	; 0xabea <get_fattime>
    8dee:	6f a3       	std	Y+39, r22	; 0x27
    8df0:	78 a7       	std	Y+40, r23	; 0x28
    8df2:	89 a7       	std	Y+41, r24	; 0x29
    8df4:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    8df6:	f5 01       	movw	r30, r10
    8df8:	66 8b       	std	Z+22, r22	; 0x16
    8dfa:	77 8b       	std	Z+23, r23	; 0x17
    8dfc:	80 8f       	std	Z+24, r24	; 0x18
    8dfe:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    8e00:	6d a6       	std	Y+45, r6	; 0x2d
    8e02:	7e a6       	std	Y+46, r7	; 0x2e
    8e04:	62 8e       	std	Z+26, r6	; 0x1a
    8e06:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8e08:	c4 01       	movw	r24, r8
    8e0a:	aa 27       	eor	r26, r26
    8e0c:	bb 27       	eor	r27, r27
    8e0e:	8b a7       	std	Y+43, r24	; 0x2b
    8e10:	9c a7       	std	Y+44, r25	; 0x2c
    8e12:	84 8b       	std	Z+20, r24	; 0x14
    8e14:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8e16:	95 01       	movw	r18, r10
    8e18:	20 5e       	subi	r18, 0xE0	; 224
    8e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e1c:	03 c0       	rjmp	.+6      	; 0x8e24 <f_mkdir+0x1b0>
    8e1e:	80 81       	ld	r24, Z
    8e20:	80 a3       	std	Z+32, r24	; 0x20
    8e22:	31 96       	adiw	r30, 0x01	; 1
    8e24:	e2 17       	cp	r30, r18
    8e26:	f3 07       	cpc	r31, r19
    8e28:	d1 f7       	brne	.-12     	; 0x8e1e <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    8e2a:	23 e5       	ldi	r18, 0x53	; 83
    8e2c:	30 e0       	ldi	r19, 0x00	; 0
    8e2e:	c2 0e       	add	r12, r18
    8e30:	d3 1e       	adc	r13, r19
    8e32:	8e e2       	ldi	r24, 0x2E	; 46
    8e34:	d6 01       	movw	r26, r12
    8e36:	8c 93       	st	X, r24
	pclst = dj.sclust;
    8e38:	2b 89       	ldd	r18, Y+19	; 0x13
    8e3a:	3c 89       	ldd	r19, Y+20	; 0x14
    8e3c:	4d 89       	ldd	r20, Y+21	; 0x15
    8e3e:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    8e40:	ed 85       	ldd	r30, Y+13	; 0x0d
    8e42:	fe 85       	ldd	r31, Y+14	; 0x0e
    8e44:	80 81       	ld	r24, Z
    8e46:	83 30       	cpi	r24, 0x03	; 3
    8e48:	69 f4       	brne	.+26     	; 0x8e64 <f_mkdir+0x1f0>
    8e4a:	86 a1       	ldd	r24, Z+38	; 0x26
    8e4c:	97 a1       	ldd	r25, Z+39	; 0x27
    8e4e:	a0 a5       	ldd	r26, Z+40	; 0x28
    8e50:	b1 a5       	ldd	r27, Z+41	; 0x29
    8e52:	28 17       	cp	r18, r24
    8e54:	39 07       	cpc	r19, r25
    8e56:	4a 07       	cpc	r20, r26
    8e58:	5b 07       	cpc	r21, r27
    8e5a:	21 f4       	brne	.+8      	; 0x8e64 <f_mkdir+0x1f0>
    8e5c:	20 e0       	ldi	r18, 0x00	; 0
    8e5e:	30 e0       	ldi	r19, 0x00	; 0
    8e60:	40 e0       	ldi	r20, 0x00	; 0
    8e62:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    8e64:	f5 01       	movw	r30, r10
    8e66:	22 af       	std	Z+58, r18	; 0x3a
    8e68:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    8e6a:	ca 01       	movw	r24, r20
    8e6c:	aa 27       	eor	r26, r26
    8e6e:	bb 27       	eor	r27, r27
    8e70:	84 ab       	std	Z+52, r24	; 0x34
    8e72:	95 ab       	std	Z+53, r25	; 0x35
    8e74:	72 01       	movw	r14, r4
    8e76:	61 01       	movw	r12, r2
    8e78:	1d c0       	rjmp	.+58     	; 0x8eb4 <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8e7a:	c6 a6       	std	Z+46, r12	; 0x2e
    8e7c:	d7 a6       	std	Z+47, r13	; 0x2f
    8e7e:	e0 aa       	std	Z+48, r14	; 0x30
    8e80:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    8e82:	21 e0       	ldi	r18, 0x01	; 1
    8e84:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    8e86:	cf 01       	movw	r24, r30
    8e88:	40 e0       	ldi	r20, 0x00	; 0
    8e8a:	50 e0       	ldi	r21, 0x00	; 0
    8e8c:	60 e0       	ldi	r22, 0x00	; 0
    8e8e:	70 e0       	ldi	r23, 0x00	; 0
    8e90:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8e94:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    8e96:	00 97       	sbiw	r24, 0x00	; 0
    8e98:	f1 f5       	brne	.+124    	; 0x8f16 <f_mkdir+0x2a2>
    8e9a:	f5 01       	movw	r30, r10
    8e9c:	01 c0       	rjmp	.+2      	; 0x8ea0 <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8e9e:	11 92       	st	Z+, r1
    8ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    8ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    8ea4:	e8 17       	cp	r30, r24
    8ea6:	f9 07       	cpc	r31, r25
    8ea8:	d1 f7       	brne	.-12     	; 0x8e9e <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    8eaa:	08 94       	sec
    8eac:	c1 1c       	adc	r12, r1
    8eae:	d1 1c       	adc	r13, r1
    8eb0:	e1 1c       	adc	r14, r1
    8eb2:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    8eb4:	ed 85       	ldd	r30, Y+13	; 0x0d
    8eb6:	fe 85       	ldd	r31, Y+14	; 0x0e
    8eb8:	9c 2d       	mov	r25, r12
    8eba:	92 19       	sub	r25, r2
    8ebc:	82 81       	ldd	r24, Z+2	; 0x02
    8ebe:	98 17       	cp	r25, r24
    8ec0:	e0 f2       	brcs	.-72     	; 0x8e7a <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    8ec2:	ce 01       	movw	r24, r28
    8ec4:	0d 96       	adiw	r24, 0x0d	; 13
    8ec6:	0e 94 ac 43 	call	0x8758	; 0x8758 <dir_register>
    8eca:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    8ecc:	00 97       	sbiw	r24, 0x00	; 0
    8ece:	39 f0       	breq	.+14     	; 0x8ede <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    8ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    8ed4:	b4 01       	movw	r22, r8
    8ed6:	a3 01       	movw	r20, r6
    8ed8:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <remove_chain>
    8edc:	1c c0       	rjmp	.+56     	; 0x8f16 <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    8ede:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8ee0:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    8ee2:	80 e1       	ldi	r24, 0x10	; 16
    8ee4:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    8ee6:	8f a1       	ldd	r24, Y+39	; 0x27
    8ee8:	98 a5       	ldd	r25, Y+40	; 0x28
    8eea:	a9 a5       	ldd	r26, Y+41	; 0x29
    8eec:	ba a5       	ldd	r27, Y+42	; 0x2a
    8eee:	86 8b       	std	Z+22, r24	; 0x16
    8ef0:	97 8b       	std	Z+23, r25	; 0x17
    8ef2:	a0 8f       	std	Z+24, r26	; 0x18
    8ef4:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    8ef6:	ad a5       	ldd	r26, Y+45	; 0x2d
    8ef8:	be a5       	ldd	r27, Y+46	; 0x2e
    8efa:	a2 8f       	std	Z+26, r26	; 0x1a
    8efc:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    8efe:	2b a5       	ldd	r18, Y+43	; 0x2b
    8f00:	3c a5       	ldd	r19, Y+44	; 0x2c
    8f02:	24 8b       	std	Z+20, r18	; 0x14
    8f04:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    8f06:	ed 85       	ldd	r30, Y+13	; 0x0d
    8f08:	fe 85       	ldd	r31, Y+14	; 0x0e
    8f0a:	81 e0       	ldi	r24, 0x01	; 1
    8f0c:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    8f0e:	cf 01       	movw	r24, r30
    8f10:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    8f14:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    8f16:	c8 01       	movw	r24, r16
    8f18:	ae 96       	adiw	r28, 0x2e	; 46
    8f1a:	e2 e1       	ldi	r30, 0x12	; 18
    8f1c:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    8f20:	01 e0       	ldi	r16, 0x01	; 1
    8f22:	10 e0       	ldi	r17, 0x00	; 0
    8f24:	f8 cf       	rjmp	.-16     	; 0x8f16 <f_mkdir+0x2a2>

00008f26 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8f26:	cf 93       	push	r28
    8f28:	df 93       	push	r29
    8f2a:	ec 01       	movw	r28, r24
    8f2c:	24 e0       	ldi	r18, 0x04	; 4
    8f2e:	30 e0       	ldi	r19, 0x00	; 0
    8f30:	19 c0       	rjmp	.+50     	; 0x8f64 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    8f32:	88 81       	ld	r24, Y
    8f34:	99 81       	ldd	r25, Y+1	; 0x01
    8f36:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    8f3a:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8f3c:	00 97       	sbiw	r24, 0x00	; 0
    8f3e:	f1 f4       	brne	.+60     	; 0x8f7c <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8f40:	ea 89       	ldd	r30, Y+18	; 0x12
    8f42:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    8f44:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8f46:	88 23       	and	r24, r24
    8f48:	09 f1       	breq	.+66     	; 0x8f8c <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    8f4a:	85 3e       	cpi	r24, 0xE5	; 229
    8f4c:	19 f0       	breq	.+6      	; 0x8f54 <dir_read+0x2e>
    8f4e:	83 85       	ldd	r24, Z+11	; 0x0b
    8f50:	83 ff       	sbrs	r24, 3
    8f52:	18 c0       	rjmp	.+48     	; 0x8f84 <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    8f54:	ce 01       	movw	r24, r28
    8f56:	60 e0       	ldi	r22, 0x00	; 0
    8f58:	70 e0       	ldi	r23, 0x00	; 0
    8f5a:	0e 94 1c 40 	call	0x8038	; 0x8038 <dir_next>
    8f5e:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    8f60:	00 97       	sbiw	r24, 0x00	; 0
    8f62:	61 f4       	brne	.+24     	; 0x8f7c <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    8f64:	4e 85       	ldd	r20, Y+14	; 0x0e
    8f66:	5f 85       	ldd	r21, Y+15	; 0x0f
    8f68:	68 89       	ldd	r22, Y+16	; 0x10
    8f6a:	79 89       	ldd	r23, Y+17	; 0x11
    8f6c:	41 15       	cp	r20, r1
    8f6e:	51 05       	cpc	r21, r1
    8f70:	61 05       	cpc	r22, r1
    8f72:	71 05       	cpc	r23, r1
    8f74:	f1 f6       	brne	.-68     	; 0x8f32 <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8f76:	21 15       	cp	r18, r1
    8f78:	31 05       	cpc	r19, r1
    8f7a:	21 f0       	breq	.+8      	; 0x8f84 <dir_read+0x5e>
    8f7c:	1e 86       	std	Y+14, r1	; 0x0e
    8f7e:	1f 86       	std	Y+15, r1	; 0x0f
    8f80:	18 8a       	std	Y+16, r1	; 0x10
    8f82:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    8f84:	c9 01       	movw	r24, r18
    8f86:	df 91       	pop	r29
    8f88:	cf 91       	pop	r28
    8f8a:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    8f8c:	24 e0       	ldi	r18, 0x04	; 4
    8f8e:	30 e0       	ldi	r19, 0x00	; 0
    8f90:	f5 cf       	rjmp	.-22     	; 0x8f7c <dir_read+0x56>

00008f92 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    8f92:	aa e3       	ldi	r26, 0x3A	; 58
    8f94:	b0 e0       	ldi	r27, 0x00	; 0
    8f96:	ef ec       	ldi	r30, 0xCF	; 207
    8f98:	f7 e4       	ldi	r31, 0x47	; 71
    8f9a:	0c 94 28 59 	jmp	0xb250	; 0xb250 <__prologue_saves__+0x14>
    8f9e:	89 af       	std	Y+57, r24	; 0x39
    8fa0:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    8fa2:	8d e0       	ldi	r24, 0x0D	; 13
    8fa4:	c8 2e       	mov	r12, r24
    8fa6:	d1 2c       	mov	r13, r1
    8fa8:	cc 0e       	add	r12, r28
    8faa:	dd 1e       	adc	r13, r29
    8fac:	ce 01       	movw	r24, r28
    8fae:	c9 96       	adiw	r24, 0x39	; 57
    8fb0:	b6 01       	movw	r22, r12
    8fb2:	41 e0       	ldi	r20, 0x01	; 1
    8fb4:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
    8fb8:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    8fba:	00 97       	sbiw	r24, 0x00	; 0
    8fbc:	09 f0       	breq	.+2      	; 0x8fc0 <f_unlink+0x2e>
    8fbe:	79 c0       	rjmp	.+242    	; 0x90b2 <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    8fc0:	ce 01       	movw	r24, r28
    8fc2:	01 96       	adiw	r24, 0x01	; 1
    8fc4:	89 a3       	std	Y+33, r24	; 0x21
    8fc6:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    8fc8:	69 ad       	ldd	r22, Y+57	; 0x39
    8fca:	7a ad       	ldd	r23, Y+58	; 0x3a
    8fcc:	c6 01       	movw	r24, r12
    8fce:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    8fd2:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8fd4:	00 97       	sbiw	r24, 0x00	; 0
    8fd6:	09 f0       	breq	.+2      	; 0x8fda <f_unlink+0x48>
    8fd8:	6c c0       	rjmp	.+216    	; 0x90b2 <f_unlink+0x120>
    8fda:	e9 a1       	ldd	r30, Y+33	; 0x21
    8fdc:	fa a1       	ldd	r31, Y+34	; 0x22
    8fde:	83 85       	ldd	r24, Z+11	; 0x0b
    8fe0:	85 fd       	sbrc	r24, 5
    8fe2:	62 c0       	rjmp	.+196    	; 0x90a8 <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    8fe4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8fe6:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    8fe8:	30 97       	sbiw	r30, 0x00	; 0
    8fea:	09 f4       	brne	.+2      	; 0x8fee <f_unlink+0x5c>
    8fec:	5d c0       	rjmp	.+186    	; 0x90a8 <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    8fee:	83 85       	ldd	r24, Z+11	; 0x0b
    8ff0:	28 2f       	mov	r18, r24
    8ff2:	80 fd       	sbrc	r24, 0
    8ff4:	5c c0       	rjmp	.+184    	; 0x90ae <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8ff6:	84 89       	ldd	r24, Z+20	; 0x14
    8ff8:	95 89       	ldd	r25, Z+21	; 0x15
    8ffa:	a0 e0       	ldi	r26, 0x00	; 0
    8ffc:	b0 e0       	ldi	r27, 0x00	; 0
    8ffe:	8c 01       	movw	r16, r24
    9000:	ff 24       	eor	r15, r15
    9002:	ee 24       	eor	r14, r14
    9004:	82 8d       	ldd	r24, Z+26	; 0x1a
    9006:	93 8d       	ldd	r25, Z+27	; 0x1b
    9008:	a0 e0       	ldi	r26, 0x00	; 0
    900a:	b0 e0       	ldi	r27, 0x00	; 0
    900c:	e8 2a       	or	r14, r24
    900e:	f9 2a       	or	r15, r25
    9010:	0a 2b       	or	r16, r26
    9012:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    9014:	24 ff       	sbrs	r18, 4
    9016:	2d c0       	rjmp	.+90     	; 0x9072 <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    9018:	82 e0       	ldi	r24, 0x02	; 2
    901a:	e8 16       	cp	r14, r24
    901c:	f1 04       	cpc	r15, r1
    901e:	01 05       	cpc	r16, r1
    9020:	11 05       	cpc	r17, r1
    9022:	18 f4       	brcc	.+6      	; 0x902a <f_unlink+0x98>
    9024:	22 e0       	ldi	r18, 0x02	; 2
    9026:	30 e0       	ldi	r19, 0x00	; 0
    9028:	44 c0       	rjmp	.+136    	; 0x90b2 <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    902a:	de 01       	movw	r26, r28
    902c:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    902e:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    9030:	9d 01       	movw	r18, r26
    9032:	02 c0       	rjmp	.+4      	; 0x9038 <f_unlink+0xa6>
    9034:	81 91       	ld	r24, Z+
    9036:	8d 93       	st	X+, r24
    9038:	e2 17       	cp	r30, r18
    903a:	f3 07       	cpc	r31, r19
    903c:	d9 f7       	brne	.-10     	; 0x9034 <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    903e:	e9 a6       	std	Y+41, r14	; 0x29
    9040:	fa a6       	std	Y+42, r15	; 0x2a
    9042:	0b a7       	std	Y+43, r16	; 0x2b
    9044:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    9046:	b3 e2       	ldi	r27, 0x23	; 35
    9048:	cb 2e       	mov	r12, r27
    904a:	d1 2c       	mov	r13, r1
    904c:	cc 0e       	add	r12, r28
    904e:	dd 1e       	adc	r13, r29
    9050:	c6 01       	movw	r24, r12
    9052:	62 e0       	ldi	r22, 0x02	; 2
    9054:	70 e0       	ldi	r23, 0x00	; 0
    9056:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    905a:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    905c:	00 97       	sbiw	r24, 0x00	; 0
    905e:	49 f5       	brne	.+82     	; 0x90b2 <f_unlink+0x120>
		res = dir_read(&sdj);
    9060:	c6 01       	movw	r24, r12
    9062:	0e 94 93 47 	call	0x8f26	; 0x8f26 <dir_read>
    9066:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    9068:	00 97       	sbiw	r24, 0x00	; 0
    906a:	09 f1       	breq	.+66     	; 0x90ae <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    906c:	84 30       	cpi	r24, 0x04	; 4
    906e:	91 05       	cpc	r25, r1
    9070:	01 f5       	brne	.+64     	; 0x90b2 <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    9072:	ce 01       	movw	r24, r28
    9074:	0d 96       	adiw	r24, 0x0d	; 13
    9076:	0e 94 06 44 	call	0x880c	; 0x880c <dir_remove>
    907a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    907c:	00 97       	sbiw	r24, 0x00	; 0
    907e:	c9 f4       	brne	.+50     	; 0x90b2 <f_unlink+0x120>
		if (dclst)
    9080:	e1 14       	cp	r14, r1
    9082:	f1 04       	cpc	r15, r1
    9084:	01 05       	cpc	r16, r1
    9086:	11 05       	cpc	r17, r1
    9088:	49 f0       	breq	.+18     	; 0x909c <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    908a:	8d 85       	ldd	r24, Y+13	; 0x0d
    908c:	9e 85       	ldd	r25, Y+14	; 0x0e
    908e:	b8 01       	movw	r22, r16
    9090:	a7 01       	movw	r20, r14
    9092:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <remove_chain>
    9096:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    9098:	00 97       	sbiw	r24, 0x00	; 0
    909a:	59 f4       	brne	.+22     	; 0x90b2 <f_unlink+0x120>
    909c:	8d 85       	ldd	r24, Y+13	; 0x0d
    909e:	9e 85       	ldd	r25, Y+14	; 0x0e
    90a0:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    90a4:	9c 01       	movw	r18, r24
    90a6:	05 c0       	rjmp	.+10     	; 0x90b2 <f_unlink+0x120>
    90a8:	26 e0       	ldi	r18, 0x06	; 6
    90aa:	30 e0       	ldi	r19, 0x00	; 0
    90ac:	02 c0       	rjmp	.+4      	; 0x90b2 <f_unlink+0x120>
    90ae:	27 e0       	ldi	r18, 0x07	; 7
    90b0:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    90b2:	c9 01       	movw	r24, r18
    90b4:	ea 96       	adiw	r28, 0x3a	; 58
    90b6:	e8 e0       	ldi	r30, 0x08	; 8
    90b8:	0c 94 44 59 	jmp	0xb288	; 0xb288 <__epilogue_restores__+0x14>

000090bc <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    90bc:	ac e0       	ldi	r26, 0x0C	; 12
    90be:	b0 e0       	ldi	r27, 0x00	; 0
    90c0:	e4 e6       	ldi	r30, 0x64	; 100
    90c2:	f8 e4       	ldi	r31, 0x48	; 72
    90c4:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
    90c8:	8c 01       	movw	r16, r24
    90ca:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    90cc:	fc 01       	movw	r30, r24
    90ce:	62 81       	ldd	r22, Z+2	; 0x02
    90d0:	73 81       	ldd	r23, Z+3	; 0x03
    90d2:	80 81       	ld	r24, Z
    90d4:	91 81       	ldd	r25, Z+1	; 0x01
    90d6:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
	if (res == FR_OK) {
    90da:	00 97       	sbiw	r24, 0x00	; 0
    90dc:	69 f4       	brne	.+26     	; 0x90f8 <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    90de:	ce 01       	movw	r24, r28
    90e0:	01 96       	adiw	r24, 0x01	; 1
    90e2:	f8 01       	movw	r30, r16
    90e4:	84 8b       	std	Z+20, r24	; 0x14
    90e6:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    90e8:	e1 14       	cp	r14, r1
    90ea:	f1 04       	cpc	r15, r1
    90ec:	39 f4       	brne	.+14     	; 0x90fc <f_readdir+0x40>
			res = dir_seek(dj, 0);
    90ee:	c8 01       	movw	r24, r16
    90f0:	60 e0       	ldi	r22, 0x00	; 0
    90f2:	70 e0       	ldi	r23, 0x00	; 0
    90f4:	0e 94 a6 3a 	call	0x754c	; 0x754c <dir_seek>
    90f8:	9c 01       	movw	r18, r24
    90fa:	23 c0       	rjmp	.+70     	; 0x9142 <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    90fc:	c8 01       	movw	r24, r16
    90fe:	0e 94 93 47 	call	0x8f26	; 0x8f26 <dir_read>
    9102:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    9104:	84 30       	cpi	r24, 0x04	; 4
    9106:	91 05       	cpc	r25, r1
    9108:	31 f4       	brne	.+12     	; 0x9116 <f_readdir+0x5a>
				dj->sect = 0;
    910a:	f8 01       	movw	r30, r16
    910c:	16 86       	std	Z+14, r1	; 0x0e
    910e:	17 86       	std	Z+15, r1	; 0x0f
    9110:	10 8a       	std	Z+16, r1	; 0x10
    9112:	11 8a       	std	Z+17, r1	; 0x11
    9114:	02 c0       	rjmp	.+4      	; 0x911a <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    9116:	00 97       	sbiw	r24, 0x00	; 0
    9118:	a1 f4       	brne	.+40     	; 0x9142 <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    911a:	c8 01       	movw	r24, r16
    911c:	b7 01       	movw	r22, r14
    911e:	0e 94 15 32 	call	0x642a	; 0x642a <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    9122:	c8 01       	movw	r24, r16
    9124:	60 e0       	ldi	r22, 0x00	; 0
    9126:	70 e0       	ldi	r23, 0x00	; 0
    9128:	0e 94 1c 40 	call	0x8038	; 0x8038 <dir_next>
    912c:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    912e:	84 30       	cpi	r24, 0x04	; 4
    9130:	91 05       	cpc	r25, r1
    9132:	39 f4       	brne	.+14     	; 0x9142 <f_readdir+0x86>
					dj->sect = 0;
    9134:	f8 01       	movw	r30, r16
    9136:	16 86       	std	Z+14, r1	; 0x0e
    9138:	17 86       	std	Z+15, r1	; 0x0f
    913a:	10 8a       	std	Z+16, r1	; 0x10
    913c:	11 8a       	std	Z+17, r1	; 0x11
    913e:	20 e0       	ldi	r18, 0x00	; 0
    9140:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    9142:	c9 01       	movw	r24, r18
    9144:	2c 96       	adiw	r28, 0x0c	; 12
    9146:	e6 e0       	ldi	r30, 0x06	; 6
    9148:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

0000914c <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    914c:	a4 e0       	ldi	r26, 0x04	; 4
    914e:	b0 e0       	ldi	r27, 0x00	; 0
    9150:	ec ea       	ldi	r30, 0xAC	; 172
    9152:	f8 e4       	ldi	r31, 0x48	; 72
    9154:	0c 94 1f 59 	jmp	0xb23e	; 0xb23e <__prologue_saves__+0x2>
    9158:	89 83       	std	Y+1, r24	; 0x01
    915a:	9a 83       	std	Y+2, r25	; 0x02
    915c:	6b 83       	std	Y+3, r22	; 0x03
    915e:	7c 83       	std	Y+4, r23	; 0x04
    9160:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    9162:	ce 01       	movw	r24, r28
    9164:	01 96       	adiw	r24, 0x01	; 1
    9166:	ba 01       	movw	r22, r20
    9168:	40 e0       	ldi	r20, 0x00	; 0
    916a:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    916e:	00 97       	sbiw	r24, 0x00	; 0
    9170:	11 f0       	breq	.+4      	; 0x9176 <f_getfree+0x2a>
    9172:	9c 01       	movw	r18, r24
    9174:	c1 c0       	rjmp	.+386    	; 0x92f8 <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    9176:	d2 01       	movw	r26, r4
    9178:	ed 91       	ld	r30, X+
    917a:	fc 91       	ld	r31, X
    917c:	26 85       	ldd	r18, Z+14	; 0x0e
    917e:	37 85       	ldd	r19, Z+15	; 0x0f
    9180:	40 89       	ldd	r20, Z+16	; 0x10
    9182:	51 89       	ldd	r21, Z+17	; 0x11
    9184:	e6 8c       	ldd	r14, Z+30	; 0x1e
    9186:	f7 8c       	ldd	r15, Z+31	; 0x1f
    9188:	00 a1       	ldd	r16, Z+32	; 0x20
    918a:	11 a1       	ldd	r17, Z+33	; 0x21
    918c:	d8 01       	movw	r26, r16
    918e:	c7 01       	movw	r24, r14
    9190:	02 97       	sbiw	r24, 0x02	; 2
    9192:	a1 09       	sbc	r26, r1
    9194:	b1 09       	sbc	r27, r1
    9196:	82 17       	cp	r24, r18
    9198:	93 07       	cpc	r25, r19
    919a:	a4 07       	cpc	r26, r20
    919c:	b5 07       	cpc	r27, r21
    919e:	38 f0       	brcs	.+14     	; 0x91ae <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    91a0:	eb 81       	ldd	r30, Y+3	; 0x03
    91a2:	fc 81       	ldd	r31, Y+4	; 0x04
    91a4:	20 83       	st	Z, r18
    91a6:	31 83       	std	Z+1, r19	; 0x01
    91a8:	42 83       	std	Z+2, r20	; 0x02
    91aa:	53 83       	std	Z+3, r21	; 0x03
    91ac:	a3 c0       	rjmp	.+326    	; 0x92f4 <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    91ae:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    91b0:	21 e0       	ldi	r18, 0x01	; 1
    91b2:	32 16       	cp	r3, r18
    91b4:	f1 f5       	brne	.+124    	; 0x9232 <f_getfree+0xe6>
    91b6:	aa 24       	eor	r10, r10
    91b8:	bb 24       	eor	r11, r11
    91ba:	65 01       	movw	r12, r10
    91bc:	92 e0       	ldi	r25, 0x02	; 2
    91be:	e9 2e       	mov	r14, r25
    91c0:	f1 2c       	mov	r15, r1
    91c2:	01 2d       	mov	r16, r1
    91c4:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    91c6:	d2 01       	movw	r26, r4
    91c8:	8d 91       	ld	r24, X+
    91ca:	9c 91       	ld	r25, X
    91cc:	b8 01       	movw	r22, r16
    91ce:	a7 01       	movw	r20, r14
    91d0:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    91d4:	6f 3f       	cpi	r22, 0xFF	; 255
    91d6:	bf ef       	ldi	r27, 0xFF	; 255
    91d8:	7b 07       	cpc	r23, r27
    91da:	bf ef       	ldi	r27, 0xFF	; 255
    91dc:	8b 07       	cpc	r24, r27
    91de:	bf ef       	ldi	r27, 0xFF	; 255
    91e0:	9b 07       	cpc	r25, r27
    91e2:	19 f4       	brne	.+6      	; 0x91ea <f_getfree+0x9e>
    91e4:	21 e0       	ldi	r18, 0x01	; 1
    91e6:	30 e0       	ldi	r19, 0x00	; 0
    91e8:	87 c0       	rjmp	.+270    	; 0x92f8 <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    91ea:	61 30       	cpi	r22, 0x01	; 1
    91ec:	71 05       	cpc	r23, r1
    91ee:	81 05       	cpc	r24, r1
    91f0:	91 05       	cpc	r25, r1
    91f2:	19 f4       	brne	.+6      	; 0x91fa <f_getfree+0xae>
    91f4:	22 e0       	ldi	r18, 0x02	; 2
    91f6:	30 e0       	ldi	r19, 0x00	; 0
    91f8:	7f c0       	rjmp	.+254    	; 0x92f8 <f_getfree+0x1ac>
			if (stat == 0) n++;
    91fa:	61 15       	cp	r22, r1
    91fc:	71 05       	cpc	r23, r1
    91fe:	81 05       	cpc	r24, r1
    9200:	91 05       	cpc	r25, r1
    9202:	29 f4       	brne	.+10     	; 0x920e <f_getfree+0xc2>
    9204:	08 94       	sec
    9206:	a1 1c       	adc	r10, r1
    9208:	b1 1c       	adc	r11, r1
    920a:	c1 1c       	adc	r12, r1
    920c:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    920e:	08 94       	sec
    9210:	e1 1c       	adc	r14, r1
    9212:	f1 1c       	adc	r15, r1
    9214:	01 1d       	adc	r16, r1
    9216:	11 1d       	adc	r17, r1
    9218:	d2 01       	movw	r26, r4
    921a:	ed 91       	ld	r30, X+
    921c:	fc 91       	ld	r31, X
    921e:	86 8d       	ldd	r24, Z+30	; 0x1e
    9220:	97 8d       	ldd	r25, Z+31	; 0x1f
    9222:	a0 a1       	ldd	r26, Z+32	; 0x20
    9224:	b1 a1       	ldd	r27, Z+33	; 0x21
    9226:	e8 16       	cp	r14, r24
    9228:	f9 06       	cpc	r15, r25
    922a:	0a 07       	cpc	r16, r26
    922c:	1b 07       	cpc	r17, r27
    922e:	58 f2       	brcs	.-106    	; 0x91c6 <f_getfree+0x7a>
    9230:	4f c0       	rjmp	.+158    	; 0x92d0 <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    9232:	62 a0       	ldd	r6, Z+34	; 0x22
    9234:	73 a0       	ldd	r7, Z+35	; 0x23
    9236:	84 a0       	ldd	r8, Z+36	; 0x24
    9238:	95 a0       	ldd	r9, Z+37	; 0x25
    923a:	aa 24       	eor	r10, r10
    923c:	bb 24       	eor	r11, r11
    923e:	65 01       	movw	r12, r10
    9240:	20 e0       	ldi	r18, 0x00	; 0
    9242:	30 e0       	ldi	r19, 0x00	; 0
    9244:	e0 e0       	ldi	r30, 0x00	; 0
    9246:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    9248:	21 15       	cp	r18, r1
    924a:	31 05       	cpc	r19, r1
    924c:	b1 f4       	brne	.+44     	; 0x927a <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    924e:	f2 01       	movw	r30, r4
    9250:	80 81       	ld	r24, Z
    9252:	91 81       	ldd	r25, Z+1	; 0x01
    9254:	b4 01       	movw	r22, r8
    9256:	a3 01       	movw	r20, r6
    9258:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    925c:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    925e:	00 97       	sbiw	r24, 0x00	; 0
    9260:	09 f0       	breq	.+2      	; 0x9264 <f_getfree+0x118>
    9262:	4a c0       	rjmp	.+148    	; 0x92f8 <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    9264:	08 94       	sec
    9266:	61 1c       	adc	r6, r1
    9268:	71 1c       	adc	r7, r1
    926a:	81 1c       	adc	r8, r1
    926c:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    926e:	d2 01       	movw	r26, r4
    9270:	ed 91       	ld	r30, X+
    9272:	fc 91       	ld	r31, X
    9274:	f2 96       	adiw	r30, 0x32	; 50
    9276:	20 e0       	ldi	r18, 0x00	; 0
    9278:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    927a:	b2 e0       	ldi	r27, 0x02	; 2
    927c:	3b 16       	cp	r3, r27
    927e:	69 f4       	brne	.+26     	; 0x929a <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    9280:	80 81       	ld	r24, Z
    9282:	91 81       	ldd	r25, Z+1	; 0x01
    9284:	89 2b       	or	r24, r25
    9286:	29 f4       	brne	.+10     	; 0x9292 <f_getfree+0x146>
    9288:	08 94       	sec
    928a:	a1 1c       	adc	r10, r1
    928c:	b1 1c       	adc	r11, r1
    928e:	c1 1c       	adc	r12, r1
    9290:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    9292:	32 96       	adiw	r30, 0x02	; 2
    9294:	22 50       	subi	r18, 0x02	; 2
    9296:	30 40       	sbci	r19, 0x00	; 0
    9298:	10 c0       	rjmp	.+32     	; 0x92ba <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    929a:	80 81       	ld	r24, Z
    929c:	91 81       	ldd	r25, Z+1	; 0x01
    929e:	a2 81       	ldd	r26, Z+2	; 0x02
    92a0:	b3 81       	ldd	r27, Z+3	; 0x03
    92a2:	00 97       	sbiw	r24, 0x00	; 0
    92a4:	a1 05       	cpc	r26, r1
    92a6:	b1 05       	cpc	r27, r1
    92a8:	29 f4       	brne	.+10     	; 0x92b4 <f_getfree+0x168>
    92aa:	08 94       	sec
    92ac:	a1 1c       	adc	r10, r1
    92ae:	b1 1c       	adc	r11, r1
    92b0:	c1 1c       	adc	r12, r1
    92b2:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    92b4:	34 96       	adiw	r30, 0x04	; 4
    92b6:	24 50       	subi	r18, 0x04	; 4
    92b8:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    92ba:	08 94       	sec
    92bc:	e1 08       	sbc	r14, r1
    92be:	f1 08       	sbc	r15, r1
    92c0:	01 09       	sbc	r16, r1
    92c2:	11 09       	sbc	r17, r1
    92c4:	e1 14       	cp	r14, r1
    92c6:	f1 04       	cpc	r15, r1
    92c8:	01 05       	cpc	r16, r1
    92ca:	11 05       	cpc	r17, r1
    92cc:	09 f0       	breq	.+2      	; 0x92d0 <f_getfree+0x184>
    92ce:	bc cf       	rjmp	.-136    	; 0x9248 <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    92d0:	d2 01       	movw	r26, r4
    92d2:	ed 91       	ld	r30, X+
    92d4:	fc 91       	ld	r31, X
    92d6:	a6 86       	std	Z+14, r10	; 0x0e
    92d8:	b7 86       	std	Z+15, r11	; 0x0f
    92da:	c0 8a       	std	Z+16, r12	; 0x10
    92dc:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    92de:	b3 e0       	ldi	r27, 0x03	; 3
    92e0:	3b 16       	cp	r3, r27
    92e2:	11 f4       	brne	.+4      	; 0x92e8 <f_getfree+0x19c>
    92e4:	81 e0       	ldi	r24, 0x01	; 1
    92e6:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    92e8:	eb 81       	ldd	r30, Y+3	; 0x03
    92ea:	fc 81       	ldd	r31, Y+4	; 0x04
    92ec:	a0 82       	st	Z, r10
    92ee:	b1 82       	std	Z+1, r11	; 0x01
    92f0:	c2 82       	std	Z+2, r12	; 0x02
    92f2:	d3 82       	std	Z+3, r13	; 0x03
    92f4:	20 e0       	ldi	r18, 0x00	; 0
    92f6:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    92f8:	c9 01       	movw	r24, r18
    92fa:	24 96       	adiw	r28, 0x04	; 4
    92fc:	e1 e1       	ldi	r30, 0x11	; 17
    92fe:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <__epilogue_restores__+0x2>

00009302 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    9302:	0f 93       	push	r16
    9304:	1f 93       	push	r17
    9306:	cf 93       	push	r28
    9308:	df 93       	push	r29
    930a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    930c:	6a 81       	ldd	r22, Y+2	; 0x02
    930e:	7b 81       	ldd	r23, Y+3	; 0x03
    9310:	88 81       	ld	r24, Y
    9312:	99 81       	ldd	r25, Y+1	; 0x01
    9314:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
    9318:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    931a:	00 97       	sbiw	r24, 0x00	; 0
    931c:	e1 f5       	brne	.+120    	; 0x9396 <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    931e:	8c 81       	ldd	r24, Y+4	; 0x04
    9320:	85 ff       	sbrs	r24, 5
    9322:	39 c0       	rjmp	.+114    	; 0x9396 <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    9324:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9326:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9328:	6c 8d       	ldd	r22, Y+28	; 0x1c
    932a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    932c:	88 81       	ld	r24, Y
    932e:	99 81       	ldd	r25, Y+1	; 0x01
    9330:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    9334:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    9336:	00 97       	sbiw	r24, 0x00	; 0
    9338:	71 f5       	brne	.+92     	; 0x9396 <f_sync+0x94>
				dir = fp->dir_ptr;
    933a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    933c:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    933e:	f8 01       	movw	r30, r16
    9340:	83 85       	ldd	r24, Z+11	; 0x0b
    9342:	80 62       	ori	r24, 0x20	; 32
    9344:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    9346:	8a 85       	ldd	r24, Y+10	; 0x0a
    9348:	9b 85       	ldd	r25, Y+11	; 0x0b
    934a:	ac 85       	ldd	r26, Y+12	; 0x0c
    934c:	bd 85       	ldd	r27, Y+13	; 0x0d
    934e:	84 8f       	std	Z+28, r24	; 0x1c
    9350:	95 8f       	std	Z+29, r25	; 0x1d
    9352:	a6 8f       	std	Z+30, r26	; 0x1e
    9354:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    9356:	8e 85       	ldd	r24, Y+14	; 0x0e
    9358:	9f 85       	ldd	r25, Y+15	; 0x0f
    935a:	82 8f       	std	Z+26, r24	; 0x1a
    935c:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    935e:	8e 85       	ldd	r24, Y+14	; 0x0e
    9360:	9f 85       	ldd	r25, Y+15	; 0x0f
    9362:	a8 89       	ldd	r26, Y+16	; 0x10
    9364:	b9 89       	ldd	r27, Y+17	; 0x11
    9366:	cd 01       	movw	r24, r26
    9368:	aa 27       	eor	r26, r26
    936a:	bb 27       	eor	r27, r27
    936c:	84 8b       	std	Z+20, r24	; 0x14
    936e:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    9370:	0e 94 f5 55 	call	0xabea	; 0xabea <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    9374:	f8 01       	movw	r30, r16
    9376:	66 8b       	std	Z+22, r22	; 0x16
    9378:	77 8b       	std	Z+23, r23	; 0x17
    937a:	80 8f       	std	Z+24, r24	; 0x18
    937c:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    937e:	8c 81       	ldd	r24, Y+4	; 0x04
    9380:	8f 7d       	andi	r24, 0xDF	; 223
    9382:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    9384:	e8 81       	ld	r30, Y
    9386:	f9 81       	ldd	r31, Y+1	; 0x01
    9388:	81 e0       	ldi	r24, 0x01	; 1
    938a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    938c:	88 81       	ld	r24, Y
    938e:	99 81       	ldd	r25, Y+1	; 0x01
    9390:	0e 94 27 44 	call	0x884e	; 0x884e <sync>
    9394:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    9396:	c9 01       	movw	r24, r18
    9398:	df 91       	pop	r29
    939a:	cf 91       	pop	r28
    939c:	1f 91       	pop	r17
    939e:	0f 91       	pop	r16
    93a0:	08 95       	ret

000093a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    93a2:	cf 93       	push	r28
    93a4:	df 93       	push	r29
    93a6:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    93a8:	0e 94 81 49 	call	0x9302	; 0x9302 <f_sync>
    93ac:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    93ae:	00 97       	sbiw	r24, 0x00	; 0
    93b0:	11 f4       	brne	.+4      	; 0x93b6 <f_close+0x14>
    93b2:	18 82       	st	Y, r1
    93b4:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    93b6:	c9 01       	movw	r24, r18
    93b8:	df 91       	pop	r29
    93ba:	cf 91       	pop	r28
    93bc:	08 95       	ret

000093be <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    93be:	a4 e0       	ldi	r26, 0x04	; 4
    93c0:	b0 e0       	ldi	r27, 0x00	; 0
    93c2:	e5 ee       	ldi	r30, 0xE5	; 229
    93c4:	f9 e4       	ldi	r31, 0x49	; 73
    93c6:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    93ca:	8b 83       	std	Y+3, r24	; 0x03
    93cc:	9c 83       	std	Y+4, r25	; 0x04
    93ce:	16 2f       	mov	r17, r22
    93d0:	07 2f       	mov	r16, r23
    93d2:	3a 01       	movw	r6, r20
    93d4:	29 83       	std	Y+1, r18	; 0x01
    93d6:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    93d8:	d9 01       	movw	r26, r18
    93da:	1d 92       	st	X+, r1
    93dc:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    93de:	fc 01       	movw	r30, r24
    93e0:	62 81       	ldd	r22, Z+2	; 0x02
    93e2:	73 81       	ldd	r23, Z+3	; 0x03
    93e4:	80 81       	ld	r24, Z
    93e6:	91 81       	ldd	r25, Z+1	; 0x01
    93e8:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
    93ec:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    93ee:	00 97       	sbiw	r24, 0x00	; 0
    93f0:	09 f0       	breq	.+2      	; 0x93f4 <f_write+0x36>
    93f2:	09 c2       	rjmp	.+1042   	; 0x9806 <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    93f4:	ab 81       	ldd	r26, Y+3	; 0x03
    93f6:	bc 81       	ldd	r27, Y+4	; 0x04
    93f8:	14 96       	adiw	r26, 0x04	; 4
    93fa:	8c 91       	ld	r24, X
    93fc:	87 fd       	sbrc	r24, 7
    93fe:	78 c0       	rjmp	.+240    	; 0x94f0 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    9400:	81 fd       	sbrc	r24, 1
    9402:	04 c0       	rjmp	.+8      	; 0x940c <f_write+0x4e>
    9404:	f7 e0       	ldi	r31, 0x07	; 7
    9406:	8f 2e       	mov	r8, r31
    9408:	91 2c       	mov	r9, r1
    940a:	fd c1       	rjmp	.+1018   	; 0x9806 <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    940c:	eb 81       	ldd	r30, Y+3	; 0x03
    940e:	fc 81       	ldd	r31, Y+4	; 0x04
    9410:	22 85       	ldd	r18, Z+10	; 0x0a
    9412:	33 85       	ldd	r19, Z+11	; 0x0b
    9414:	44 85       	ldd	r20, Z+12	; 0x0c
    9416:	55 85       	ldd	r21, Z+13	; 0x0d
    9418:	c3 01       	movw	r24, r6
    941a:	a0 e0       	ldi	r26, 0x00	; 0
    941c:	b0 e0       	ldi	r27, 0x00	; 0
    941e:	82 0f       	add	r24, r18
    9420:	93 1f       	adc	r25, r19
    9422:	a4 1f       	adc	r26, r20
    9424:	b5 1f       	adc	r27, r21
    9426:	82 17       	cp	r24, r18
    9428:	93 07       	cpc	r25, r19
    942a:	a4 07       	cpc	r26, r20
    942c:	b5 07       	cpc	r27, r21
    942e:	10 f4       	brcc	.+4      	; 0x9434 <f_write+0x76>
    9430:	66 24       	eor	r6, r6
    9432:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9434:	81 2f       	mov	r24, r17
    9436:	90 2f       	mov	r25, r16
    9438:	9c 01       	movw	r18, r24
    943a:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    943c:	22 24       	eor	r2, r2
    943e:	23 94       	inc	r2
    9440:	bd c1       	rjmp	.+890    	; 0x97bc <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9442:	ab 81       	ldd	r26, Y+3	; 0x03
    9444:	bc 81       	ldd	r27, Y+4	; 0x04
    9446:	16 96       	adiw	r26, 0x06	; 6
    9448:	2d 91       	ld	r18, X+
    944a:	3d 91       	ld	r19, X+
    944c:	4d 91       	ld	r20, X+
    944e:	5c 91       	ld	r21, X
    9450:	19 97       	sbiw	r26, 0x09	; 9
    9452:	da 01       	movw	r26, r20
    9454:	c9 01       	movw	r24, r18
    9456:	91 70       	andi	r25, 0x01	; 1
    9458:	a0 70       	andi	r26, 0x00	; 0
    945a:	b0 70       	andi	r27, 0x00	; 0
    945c:	00 97       	sbiw	r24, 0x00	; 0
    945e:	a1 05       	cpc	r26, r1
    9460:	b1 05       	cpc	r27, r1
    9462:	09 f0       	breq	.+2      	; 0x9466 <f_write+0xa8>
    9464:	4a c1       	rjmp	.+660    	; 0x96fa <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9466:	ab 81       	ldd	r26, Y+3	; 0x03
    9468:	bc 81       	ldd	r27, Y+4	; 0x04
    946a:	ed 91       	ld	r30, X+
    946c:	fc 91       	ld	r31, X
    946e:	11 97       	sbiw	r26, 0x01	; 1
    9470:	15 96       	adiw	r26, 0x05	; 5
    9472:	9c 91       	ld	r25, X
    9474:	15 97       	sbiw	r26, 0x05	; 5
    9476:	82 81       	ldd	r24, Z+2	; 0x02
    9478:	98 17       	cp	r25, r24
    947a:	08 f4       	brcc	.+2      	; 0x947e <f_write+0xc0>
    947c:	55 c0       	rjmp	.+170    	; 0x9528 <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    947e:	21 15       	cp	r18, r1
    9480:	31 05       	cpc	r19, r1
    9482:	41 05       	cpc	r20, r1
    9484:	51 05       	cpc	r21, r1
    9486:	c9 f4       	brne	.+50     	; 0x94ba <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    9488:	1e 96       	adiw	r26, 0x0e	; 14
    948a:	6d 91       	ld	r22, X+
    948c:	7d 91       	ld	r23, X+
    948e:	8d 91       	ld	r24, X+
    9490:	9c 91       	ld	r25, X
    9492:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    9494:	61 15       	cp	r22, r1
    9496:	71 05       	cpc	r23, r1
    9498:	81 05       	cpc	r24, r1
    949a:	91 05       	cpc	r25, r1
    949c:	f9 f4       	brne	.+62     	; 0x94dc <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    949e:	cf 01       	movw	r24, r30
    94a0:	40 e0       	ldi	r20, 0x00	; 0
    94a2:	50 e0       	ldi	r21, 0x00	; 0
    94a4:	60 e0       	ldi	r22, 0x00	; 0
    94a6:	70 e0       	ldi	r23, 0x00	; 0
    94a8:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
    94ac:	eb 81       	ldd	r30, Y+3	; 0x03
    94ae:	fc 81       	ldd	r31, Y+4	; 0x04
    94b0:	66 87       	std	Z+14, r22	; 0x0e
    94b2:	77 87       	std	Z+15, r23	; 0x0f
    94b4:	80 8b       	std	Z+16, r24	; 0x10
    94b6:	91 8b       	std	Z+17, r25	; 0x11
    94b8:	0b c0       	rjmp	.+22     	; 0x94d0 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    94ba:	ab 81       	ldd	r26, Y+3	; 0x03
    94bc:	bc 81       	ldd	r27, Y+4	; 0x04
    94be:	52 96       	adiw	r26, 0x12	; 18
    94c0:	4d 91       	ld	r20, X+
    94c2:	5d 91       	ld	r21, X+
    94c4:	6d 91       	ld	r22, X+
    94c6:	7c 91       	ld	r23, X
    94c8:	55 97       	sbiw	r26, 0x15	; 21
    94ca:	cf 01       	movw	r24, r30
    94cc:	0e 94 66 3c 	call	0x78cc	; 0x78cc <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    94d0:	61 15       	cp	r22, r1
    94d2:	71 05       	cpc	r23, r1
    94d4:	81 05       	cpc	r24, r1
    94d6:	91 05       	cpc	r25, r1
    94d8:	09 f4       	brne	.+2      	; 0x94dc <f_write+0x11e>
    94da:	74 c1       	rjmp	.+744    	; 0x97c4 <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    94dc:	61 30       	cpi	r22, 0x01	; 1
    94de:	71 05       	cpc	r23, r1
    94e0:	81 05       	cpc	r24, r1
    94e2:	91 05       	cpc	r25, r1
    94e4:	49 f4       	brne	.+18     	; 0x94f8 <f_write+0x13a>
    94e6:	eb 81       	ldd	r30, Y+3	; 0x03
    94e8:	fc 81       	ldd	r31, Y+4	; 0x04
    94ea:	84 81       	ldd	r24, Z+4	; 0x04
    94ec:	80 68       	ori	r24, 0x80	; 128
    94ee:	84 83       	std	Z+4, r24	; 0x04
    94f0:	e2 e0       	ldi	r30, 0x02	; 2
    94f2:	8e 2e       	mov	r8, r30
    94f4:	91 2c       	mov	r9, r1
    94f6:	87 c1       	rjmp	.+782    	; 0x9806 <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    94f8:	6f 3f       	cpi	r22, 0xFF	; 255
    94fa:	ff ef       	ldi	r31, 0xFF	; 255
    94fc:	7f 07       	cpc	r23, r31
    94fe:	ff ef       	ldi	r31, 0xFF	; 255
    9500:	8f 07       	cpc	r24, r31
    9502:	ff ef       	ldi	r31, 0xFF	; 255
    9504:	9f 07       	cpc	r25, r31
    9506:	49 f4       	brne	.+18     	; 0x951a <f_write+0x15c>
    9508:	ab 81       	ldd	r26, Y+3	; 0x03
    950a:	bc 81       	ldd	r27, Y+4	; 0x04
    950c:	14 96       	adiw	r26, 0x04	; 4
    950e:	8c 91       	ld	r24, X
    9510:	14 97       	sbiw	r26, 0x04	; 4
    9512:	80 68       	ori	r24, 0x80	; 128
    9514:	14 96       	adiw	r26, 0x04	; 4
    9516:	8c 93       	st	X, r24
    9518:	09 c1       	rjmp	.+530    	; 0x972c <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    951a:	eb 81       	ldd	r30, Y+3	; 0x03
    951c:	fc 81       	ldd	r31, Y+4	; 0x04
    951e:	62 8b       	std	Z+18, r22	; 0x12
    9520:	73 8b       	std	Z+19, r23	; 0x13
    9522:	84 8b       	std	Z+20, r24	; 0x14
    9524:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    9526:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    9528:	ab 81       	ldd	r26, Y+3	; 0x03
    952a:	bc 81       	ldd	r27, Y+4	; 0x04
    952c:	ed 91       	ld	r30, X+
    952e:	fc 91       	ld	r31, X
    9530:	11 97       	sbiw	r26, 0x01	; 1
    9532:	26 a5       	ldd	r18, Z+46	; 0x2e
    9534:	37 a5       	ldd	r19, Z+47	; 0x2f
    9536:	40 a9       	ldd	r20, Z+48	; 0x30
    9538:	51 a9       	ldd	r21, Z+49	; 0x31
    953a:	56 96       	adiw	r26, 0x16	; 22
    953c:	ed 90       	ld	r14, X+
    953e:	fd 90       	ld	r15, X+
    9540:	0d 91       	ld	r16, X+
    9542:	1c 91       	ld	r17, X
    9544:	59 97       	sbiw	r26, 0x19	; 25
    9546:	2e 15       	cp	r18, r14
    9548:	3f 05       	cpc	r19, r15
    954a:	40 07       	cpc	r20, r16
    954c:	51 07       	cpc	r21, r17
    954e:	51 f4       	brne	.+20     	; 0x9564 <f_write+0x1a6>
    9550:	cf 01       	movw	r24, r30
    9552:	40 e0       	ldi	r20, 0x00	; 0
    9554:	50 e0       	ldi	r21, 0x00	; 0
    9556:	60 e0       	ldi	r22, 0x00	; 0
    9558:	70 e0       	ldi	r23, 0x00	; 0
    955a:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    955e:	89 2b       	or	r24, r25
    9560:	09 f0       	breq	.+2      	; 0x9564 <f_write+0x1a6>
    9562:	df c0       	rjmp	.+446    	; 0x9722 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9564:	ab 81       	ldd	r26, Y+3	; 0x03
    9566:	bc 81       	ldd	r27, Y+4	; 0x04
    9568:	0d 91       	ld	r16, X+
    956a:	1c 91       	ld	r17, X
    956c:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    956e:	52 96       	adiw	r26, 0x12	; 18
    9570:	2d 91       	ld	r18, X+
    9572:	3d 91       	ld	r19, X+
    9574:	4d 91       	ld	r20, X+
    9576:	5c 91       	ld	r21, X
    9578:	55 97       	sbiw	r26, 0x15	; 21
    957a:	22 50       	subi	r18, 0x02	; 2
    957c:	30 40       	sbci	r19, 0x00	; 0
    957e:	40 40       	sbci	r20, 0x00	; 0
    9580:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9582:	f8 01       	movw	r30, r16
    9584:	86 8d       	ldd	r24, Z+30	; 0x1e
    9586:	97 8d       	ldd	r25, Z+31	; 0x1f
    9588:	a0 a1       	ldd	r26, Z+32	; 0x20
    958a:	b1 a1       	ldd	r27, Z+33	; 0x21
    958c:	02 97       	sbiw	r24, 0x02	; 2
    958e:	a1 09       	sbc	r26, r1
    9590:	b1 09       	sbc	r27, r1
    9592:	28 17       	cp	r18, r24
    9594:	39 07       	cpc	r19, r25
    9596:	4a 07       	cpc	r20, r26
    9598:	5b 07       	cpc	r21, r27
    959a:	b8 f4       	brcc	.+46     	; 0x95ca <f_write+0x20c>
	return clst * fs->csize + fs->database;
    959c:	32 80       	ldd	r3, Z+2	; 0x02
    959e:	63 2d       	mov	r22, r3
    95a0:	70 e0       	ldi	r23, 0x00	; 0
    95a2:	80 e0       	ldi	r24, 0x00	; 0
    95a4:	90 e0       	ldi	r25, 0x00	; 0
    95a6:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    95aa:	9b 01       	movw	r18, r22
    95ac:	ac 01       	movw	r20, r24
    95ae:	f8 01       	movw	r30, r16
    95b0:	82 a5       	ldd	r24, Z+42	; 0x2a
    95b2:	93 a5       	ldd	r25, Z+43	; 0x2b
    95b4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    95b6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    95b8:	28 0f       	add	r18, r24
    95ba:	39 1f       	adc	r19, r25
    95bc:	4a 1f       	adc	r20, r26
    95be:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    95c0:	21 15       	cp	r18, r1
    95c2:	31 05       	cpc	r19, r1
    95c4:	41 05       	cpc	r20, r1
    95c6:	51 05       	cpc	r21, r1
    95c8:	49 f4       	brne	.+18     	; 0x95dc <f_write+0x21e>
    95ca:	ab 81       	ldd	r26, Y+3	; 0x03
    95cc:	bc 81       	ldd	r27, Y+4	; 0x04
    95ce:	14 96       	adiw	r26, 0x04	; 4
    95d0:	8c 91       	ld	r24, X
    95d2:	14 97       	sbiw	r26, 0x04	; 4
    95d4:	80 68       	ori	r24, 0x80	; 128
    95d6:	14 96       	adiw	r26, 0x04	; 4
    95d8:	8c 93       	st	X, r24
    95da:	8a cf       	rjmp	.-236    	; 0x94f0 <f_write+0x132>
			sect += fp->csect;
    95dc:	eb 81       	ldd	r30, Y+3	; 0x03
    95de:	fc 81       	ldd	r31, Y+4	; 0x04
    95e0:	85 81       	ldd	r24, Z+5	; 0x05
    95e2:	59 01       	movw	r10, r18
    95e4:	6a 01       	movw	r12, r20
    95e6:	a8 0e       	add	r10, r24
    95e8:	b1 1c       	adc	r11, r1
    95ea:	c1 1c       	adc	r12, r1
    95ec:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    95ee:	73 01       	movw	r14, r6
    95f0:	ef 2c       	mov	r14, r15
    95f2:	ff 24       	eor	r15, r15
    95f4:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    95f6:	e1 14       	cp	r14, r1
    95f8:	f1 04       	cpc	r15, r1
    95fa:	09 f4       	brne	.+2      	; 0x95fe <f_write+0x240>
    95fc:	51 c0       	rjmp	.+162    	; 0x96a0 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    95fe:	28 2f       	mov	r18, r24
    9600:	30 e0       	ldi	r19, 0x00	; 0
    9602:	c7 01       	movw	r24, r14
    9604:	82 0f       	add	r24, r18
    9606:	93 1f       	adc	r25, r19
    9608:	63 2d       	mov	r22, r3
    960a:	70 e0       	ldi	r23, 0x00	; 0
    960c:	68 17       	cp	r22, r24
    960e:	79 07       	cpc	r23, r25
    9610:	18 f4       	brcc	.+6      	; 0x9618 <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    9612:	7b 01       	movw	r14, r22
    9614:	e2 1a       	sub	r14, r18
    9616:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    9618:	d8 01       	movw	r26, r16
    961a:	11 96       	adiw	r26, 0x01	; 1
    961c:	8c 91       	ld	r24, X
    961e:	b2 01       	movw	r22, r4
    9620:	a6 01       	movw	r20, r12
    9622:	95 01       	movw	r18, r10
    9624:	0e 2d       	mov	r16, r14
    9626:	0e 94 6d 52 	call	0xa4da	; 0xa4da <disk_write>
    962a:	89 2b       	or	r24, r25
    962c:	09 f0       	breq	.+2      	; 0x9630 <f_write+0x272>
    962e:	79 c0       	rjmp	.+242    	; 0x9722 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    9630:	ab 81       	ldd	r26, Y+3	; 0x03
    9632:	bc 81       	ldd	r27, Y+4	; 0x04
    9634:	ed 91       	ld	r30, X+
    9636:	fc 91       	ld	r31, X
    9638:	26 a5       	ldd	r18, Z+46	; 0x2e
    963a:	37 a5       	ldd	r19, Z+47	; 0x2f
    963c:	40 a9       	ldd	r20, Z+48	; 0x30
    963e:	51 a9       	ldd	r21, Z+49	; 0x31
    9640:	2a 19       	sub	r18, r10
    9642:	3b 09       	sbc	r19, r11
    9644:	4c 09       	sbc	r20, r12
    9646:	5d 09       	sbc	r21, r13
    9648:	c7 01       	movw	r24, r14
    964a:	a0 e0       	ldi	r26, 0x00	; 0
    964c:	b0 e0       	ldi	r27, 0x00	; 0
    964e:	28 17       	cp	r18, r24
    9650:	39 07       	cpc	r19, r25
    9652:	4a 07       	cpc	r20, r26
    9654:	5b 07       	cpc	r21, r27
    9656:	d0 f4       	brcc	.+52     	; 0x968c <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9658:	df 01       	movw	r26, r30
    965a:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    965c:	69 e0       	ldi	r22, 0x09	; 9
    965e:	22 0f       	add	r18, r18
    9660:	33 1f       	adc	r19, r19
    9662:	44 1f       	adc	r20, r20
    9664:	55 1f       	adc	r21, r21
    9666:	6a 95       	dec	r22
    9668:	d1 f7       	brne	.-12     	; 0x965e <f_write+0x2a0>
    966a:	f2 01       	movw	r30, r4
    966c:	e2 0f       	add	r30, r18
    966e:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    9670:	9f 01       	movw	r18, r30
    9672:	20 50       	subi	r18, 0x00	; 0
    9674:	3e 4f       	sbci	r19, 0xFE	; 254
    9676:	02 c0       	rjmp	.+4      	; 0x967c <f_write+0x2be>
    9678:	81 91       	ld	r24, Z+
    967a:	8d 93       	st	X+, r24
    967c:	e2 17       	cp	r30, r18
    967e:	f3 07       	cpc	r31, r19
    9680:	d9 f7       	brne	.-10     	; 0x9678 <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    9682:	ab 81       	ldd	r26, Y+3	; 0x03
    9684:	bc 81       	ldd	r27, Y+4	; 0x04
    9686:	ed 91       	ld	r30, X+
    9688:	fc 91       	ld	r31, X
    968a:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    968c:	eb 81       	ldd	r30, Y+3	; 0x03
    968e:	fc 81       	ldd	r31, Y+4	; 0x04
    9690:	85 81       	ldd	r24, Z+5	; 0x05
    9692:	8e 0d       	add	r24, r14
    9694:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9696:	b7 01       	movw	r22, r14
    9698:	76 2f       	mov	r23, r22
    969a:	66 27       	eor	r22, r22
    969c:	77 0f       	add	r23, r23
    969e:	71 c0       	rjmp	.+226    	; 0x9782 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    96a0:	ab 81       	ldd	r26, Y+3	; 0x03
    96a2:	bc 81       	ldd	r27, Y+4	; 0x04
    96a4:	16 96       	adiw	r26, 0x06	; 6
    96a6:	2d 91       	ld	r18, X+
    96a8:	3d 91       	ld	r19, X+
    96aa:	4d 91       	ld	r20, X+
    96ac:	5c 91       	ld	r21, X
    96ae:	19 97       	sbiw	r26, 0x09	; 9
    96b0:	1a 96       	adiw	r26, 0x0a	; 10
    96b2:	8d 91       	ld	r24, X+
    96b4:	9d 91       	ld	r25, X+
    96b6:	0d 90       	ld	r0, X+
    96b8:	bc 91       	ld	r27, X
    96ba:	a0 2d       	mov	r26, r0
    96bc:	28 17       	cp	r18, r24
    96be:	39 07       	cpc	r19, r25
    96c0:	4a 07       	cpc	r20, r26
    96c2:	5b 07       	cpc	r21, r27
    96c4:	88 f0       	brcs	.+34     	; 0x96e8 <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    96c6:	c8 01       	movw	r24, r16
    96c8:	40 e0       	ldi	r20, 0x00	; 0
    96ca:	50 e0       	ldi	r21, 0x00	; 0
    96cc:	60 e0       	ldi	r22, 0x00	; 0
    96ce:	70 e0       	ldi	r23, 0x00	; 0
    96d0:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    96d4:	89 2b       	or	r24, r25
    96d6:	29 f5       	brne	.+74     	; 0x9722 <f_write+0x364>
				fp->fs->winsect = sect;
    96d8:	ab 81       	ldd	r26, Y+3	; 0x03
    96da:	bc 81       	ldd	r27, Y+4	; 0x04
    96dc:	ed 91       	ld	r30, X+
    96de:	fc 91       	ld	r31, X
    96e0:	a6 a6       	std	Z+46, r10	; 0x2e
    96e2:	b7 a6       	std	Z+47, r11	; 0x2f
    96e4:	c0 aa       	std	Z+48, r12	; 0x30
    96e6:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    96e8:	eb 81       	ldd	r30, Y+3	; 0x03
    96ea:	fc 81       	ldd	r31, Y+4	; 0x04
    96ec:	a6 8a       	std	Z+22, r10	; 0x16
    96ee:	b7 8a       	std	Z+23, r11	; 0x17
    96f0:	c0 8e       	std	Z+24, r12	; 0x18
    96f2:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    96f4:	85 81       	ldd	r24, Z+5	; 0x05
    96f6:	8f 5f       	subi	r24, 0xFF	; 255
    96f8:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    96fa:	ab 81       	ldd	r26, Y+3	; 0x03
    96fc:	bc 81       	ldd	r27, Y+4	; 0x04
    96fe:	16 96       	adiw	r26, 0x06	; 6
    9700:	cd 90       	ld	r12, X+
    9702:	dd 90       	ld	r13, X+
    9704:	ed 90       	ld	r14, X+
    9706:	fc 90       	ld	r15, X
    9708:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    970a:	56 96       	adiw	r26, 0x16	; 22
    970c:	4d 91       	ld	r20, X+
    970e:	5d 91       	ld	r21, X+
    9710:	6d 91       	ld	r22, X+
    9712:	7c 91       	ld	r23, X
    9714:	59 97       	sbiw	r26, 0x19	; 25
    9716:	8d 91       	ld	r24, X+
    9718:	9c 91       	ld	r25, X
    971a:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    971e:	89 2b       	or	r24, r25
    9720:	49 f0       	breq	.+18     	; 0x9734 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    9722:	eb 81       	ldd	r30, Y+3	; 0x03
    9724:	fc 81       	ldd	r31, Y+4	; 0x04
    9726:	84 81       	ldd	r24, Z+4	; 0x04
    9728:	80 68       	ori	r24, 0x80	; 128
    972a:	84 83       	std	Z+4, r24	; 0x04
    972c:	31 e0       	ldi	r19, 0x01	; 1
    972e:	83 2e       	mov	r8, r19
    9730:	91 2c       	mov	r9, r1
    9732:	69 c0       	rjmp	.+210    	; 0x9806 <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9734:	c6 01       	movw	r24, r12
    9736:	91 70       	andi	r25, 0x01	; 1
    9738:	20 e0       	ldi	r18, 0x00	; 0
    973a:	32 e0       	ldi	r19, 0x02	; 2
    973c:	28 1b       	sub	r18, r24
    973e:	39 0b       	sbc	r19, r25
    9740:	b3 01       	movw	r22, r6
    9742:	26 15       	cp	r18, r6
    9744:	37 05       	cpc	r19, r7
    9746:	08 f4       	brcc	.+2      	; 0x974a <f_write+0x38c>
    9748:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    974a:	ab 81       	ldd	r26, Y+3	; 0x03
    974c:	bc 81       	ldd	r27, Y+4	; 0x04
    974e:	16 96       	adiw	r26, 0x06	; 6
    9750:	8d 91       	ld	r24, X+
    9752:	9c 91       	ld	r25, X
    9754:	17 97       	sbiw	r26, 0x07	; 7
    9756:	91 70       	andi	r25, 0x01	; 1
    9758:	c2 96       	adiw	r24, 0x32	; 50
    975a:	0d 90       	ld	r0, X+
    975c:	bc 91       	ld	r27, X
    975e:	a0 2d       	mov	r26, r0
    9760:	a8 0f       	add	r26, r24
    9762:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    9764:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    9766:	92 01       	movw	r18, r4
    9768:	26 0f       	add	r18, r22
    976a:	37 1f       	adc	r19, r23
    976c:	02 c0       	rjmp	.+4      	; 0x9772 <f_write+0x3b4>
    976e:	81 91       	ld	r24, Z+
    9770:	8d 93       	st	X+, r24
    9772:	e2 17       	cp	r30, r18
    9774:	f3 07       	cpc	r31, r19
    9776:	d9 f7       	brne	.-10     	; 0x976e <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9778:	ab 81       	ldd	r26, Y+3	; 0x03
    977a:	bc 81       	ldd	r27, Y+4	; 0x04
    977c:	ed 91       	ld	r30, X+
    977e:	fc 91       	ld	r31, X
    9780:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    9782:	46 0e       	add	r4, r22
    9784:	57 1e       	adc	r5, r23
    9786:	cb 01       	movw	r24, r22
    9788:	a0 e0       	ldi	r26, 0x00	; 0
    978a:	b0 e0       	ldi	r27, 0x00	; 0
    978c:	eb 81       	ldd	r30, Y+3	; 0x03
    978e:	fc 81       	ldd	r31, Y+4	; 0x04
    9790:	26 81       	ldd	r18, Z+6	; 0x06
    9792:	37 81       	ldd	r19, Z+7	; 0x07
    9794:	40 85       	ldd	r20, Z+8	; 0x08
    9796:	51 85       	ldd	r21, Z+9	; 0x09
    9798:	28 0f       	add	r18, r24
    979a:	39 1f       	adc	r19, r25
    979c:	4a 1f       	adc	r20, r26
    979e:	5b 1f       	adc	r21, r27
    97a0:	26 83       	std	Z+6, r18	; 0x06
    97a2:	37 83       	std	Z+7, r19	; 0x07
    97a4:	40 87       	std	Z+8, r20	; 0x08
    97a6:	51 87       	std	Z+9, r21	; 0x09
    97a8:	e9 81       	ldd	r30, Y+1	; 0x01
    97aa:	fa 81       	ldd	r31, Y+2	; 0x02
    97ac:	80 81       	ld	r24, Z
    97ae:	91 81       	ldd	r25, Z+1	; 0x01
    97b0:	86 0f       	add	r24, r22
    97b2:	97 1f       	adc	r25, r23
    97b4:	80 83       	st	Z, r24
    97b6:	91 83       	std	Z+1, r25	; 0x01
    97b8:	66 1a       	sub	r6, r22
    97ba:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    97bc:	61 14       	cp	r6, r1
    97be:	71 04       	cpc	r7, r1
    97c0:	09 f0       	breq	.+2      	; 0x97c4 <f_write+0x406>
    97c2:	3f ce       	rjmp	.-898    	; 0x9442 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    97c4:	ab 81       	ldd	r26, Y+3	; 0x03
    97c6:	bc 81       	ldd	r27, Y+4	; 0x04
    97c8:	16 96       	adiw	r26, 0x06	; 6
    97ca:	2d 91       	ld	r18, X+
    97cc:	3d 91       	ld	r19, X+
    97ce:	4d 91       	ld	r20, X+
    97d0:	5c 91       	ld	r21, X
    97d2:	19 97       	sbiw	r26, 0x09	; 9
    97d4:	1a 96       	adiw	r26, 0x0a	; 10
    97d6:	8d 91       	ld	r24, X+
    97d8:	9d 91       	ld	r25, X+
    97da:	0d 90       	ld	r0, X+
    97dc:	bc 91       	ld	r27, X
    97de:	a0 2d       	mov	r26, r0
    97e0:	82 17       	cp	r24, r18
    97e2:	93 07       	cpc	r25, r19
    97e4:	a4 07       	cpc	r26, r20
    97e6:	b5 07       	cpc	r27, r21
    97e8:	30 f4       	brcc	.+12     	; 0x97f6 <f_write+0x438>
    97ea:	eb 81       	ldd	r30, Y+3	; 0x03
    97ec:	fc 81       	ldd	r31, Y+4	; 0x04
    97ee:	22 87       	std	Z+10, r18	; 0x0a
    97f0:	33 87       	std	Z+11, r19	; 0x0b
    97f2:	44 87       	std	Z+12, r20	; 0x0c
    97f4:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    97f6:	ab 81       	ldd	r26, Y+3	; 0x03
    97f8:	bc 81       	ldd	r27, Y+4	; 0x04
    97fa:	14 96       	adiw	r26, 0x04	; 4
    97fc:	8c 91       	ld	r24, X
    97fe:	14 97       	sbiw	r26, 0x04	; 4
    9800:	80 62       	ori	r24, 0x20	; 32
    9802:	14 96       	adiw	r26, 0x04	; 4
    9804:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    9806:	c4 01       	movw	r24, r8
    9808:	24 96       	adiw	r28, 0x04	; 4
    980a:	e2 e1       	ldi	r30, 0x12	; 18
    980c:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00009810 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    9810:	a3 e0       	ldi	r26, 0x03	; 3
    9812:	b0 e0       	ldi	r27, 0x00	; 0
    9814:	ee e0       	ldi	r30, 0x0E	; 14
    9816:	fc e4       	ldi	r31, 0x4C	; 76
    9818:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
    981c:	7c 01       	movw	r14, r24
    981e:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    9820:	8a e0       	ldi	r24, 0x0A	; 10
    9822:	e8 16       	cp	r14, r24
    9824:	f1 04       	cpc	r15, r1
    9826:	21 f4       	brne	.+8      	; 0x9830 <f_putc+0x20>
    9828:	8d e0       	ldi	r24, 0x0D	; 13
    982a:	90 e0       	ldi	r25, 0x00	; 0
    982c:	0e 94 08 4c 	call	0x9810	; 0x9810 <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    9830:	01 15       	cp	r16, r1
    9832:	11 05       	cpc	r17, r1
    9834:	99 f0       	breq	.+38     	; 0x985c <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    9836:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    9838:	c8 01       	movw	r24, r16
    983a:	be 01       	movw	r22, r28
    983c:	6f 5f       	subi	r22, 0xFF	; 255
    983e:	7f 4f       	sbci	r23, 0xFF	; 255
    9840:	41 e0       	ldi	r20, 0x01	; 1
    9842:	50 e0       	ldi	r21, 0x00	; 0
    9844:	9e 01       	movw	r18, r28
    9846:	2e 5f       	subi	r18, 0xFE	; 254
    9848:	3f 4f       	sbci	r19, 0xFF	; 255
    984a:	0e 94 df 49 	call	0x93be	; 0x93be <f_write>
	return bw ? chr : EOF;		/* Return the result */
    984e:	8a 81       	ldd	r24, Y+2	; 0x02
    9850:	9b 81       	ldd	r25, Y+3	; 0x03
    9852:	89 2b       	or	r24, r25
    9854:	19 f4       	brne	.+6      	; 0x985c <f_putc+0x4c>
    9856:	ee 24       	eor	r14, r14
    9858:	ea 94       	dec	r14
    985a:	fe 2c       	mov	r15, r14
}
    985c:	c7 01       	movw	r24, r14
    985e:	23 96       	adiw	r28, 0x03	; 3
    9860:	e6 e0       	ldi	r30, 0x06	; 6
    9862:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

00009866 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9866:	ef 92       	push	r14
    9868:	ff 92       	push	r15
    986a:	0f 93       	push	r16
    986c:	1f 93       	push	r17
    986e:	cf 93       	push	r28
    9870:	df 93       	push	r29
    9872:	8c 01       	movw	r16, r24
    9874:	7b 01       	movw	r14, r22
    9876:	c0 e0       	ldi	r28, 0x00	; 0
    9878:	d0 e0       	ldi	r29, 0x00	; 0
    987a:	0f c0       	rjmp	.+30     	; 0x989a <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    987c:	99 27       	eor	r25, r25
    987e:	87 fd       	sbrc	r24, 7
    9880:	90 95       	com	r25
    9882:	b7 01       	movw	r22, r14
    9884:	0e 94 08 4c 	call	0x9810	; 0x9810 <f_putc>
    9888:	8f 5f       	subi	r24, 0xFF	; 255
    988a:	9f 4f       	sbci	r25, 0xFF	; 255
    988c:	19 f4       	brne	.+6      	; 0x9894 <f_puts+0x2e>
    988e:	cf ef       	ldi	r28, 0xFF	; 255
    9890:	df ef       	ldi	r29, 0xFF	; 255
    9892:	07 c0       	rjmp	.+14     	; 0x98a2 <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    9894:	0f 5f       	subi	r16, 0xFF	; 255
    9896:	1f 4f       	sbci	r17, 0xFF	; 255
    9898:	21 96       	adiw	r28, 0x01	; 1
    989a:	f8 01       	movw	r30, r16
    989c:	80 81       	ld	r24, Z
    989e:	88 23       	and	r24, r24
    98a0:	69 f7       	brne	.-38     	; 0x987c <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    98a2:	ce 01       	movw	r24, r28
    98a4:	cd b7       	in	r28, 0x3d	; 61
    98a6:	de b7       	in	r29, 0x3e	; 62
    98a8:	e6 e0       	ldi	r30, 0x06	; 6
    98aa:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

000098ae <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    98ae:	a3 e1       	ldi	r26, 0x13	; 19
    98b0:	b0 e0       	ldi	r27, 0x00	; 0
    98b2:	ed e5       	ldi	r30, 0x5D	; 93
    98b4:	fc e4       	ldi	r31, 0x4C	; 76
    98b6:	0c 94 1e 59 	jmp	0xb23c	; 0xb23c <__prologue_saves__>
    98ba:	6b a4       	ldd	r6, Y+43	; 0x2b
    98bc:	7c a4       	ldd	r7, Y+44	; 0x2c
    98be:	8e 01       	movw	r16, r28
    98c0:	03 5d       	subi	r16, 0xD3	; 211
    98c2:	1f 4f       	sbci	r17, 0xFF	; 255
    98c4:	19 8a       	std	Y+17, r1	; 0x11
    98c6:	1a 8a       	std	Y+18, r1	; 0x12
    98c8:	20 e0       	ldi	r18, 0x00	; 0
    98ca:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    98cc:	d3 01       	movw	r26, r6
    98ce:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    98d0:	88 23       	and	r24, r24
    98d2:	09 f4       	brne	.+2      	; 0x98d6 <f_printf+0x28>
    98d4:	17 c1       	rjmp	.+558    	; 0x9b04 <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    98d6:	08 94       	sec
    98d8:	61 1c       	adc	r6, r1
    98da:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    98dc:	85 32       	cpi	r24, 0x25	; 37
    98de:	71 f0       	breq	.+28     	; 0x98fc <f_printf+0x4e>
			cc = f_putc(c, fil);
    98e0:	90 e0       	ldi	r25, 0x00	; 0
    98e2:	69 a5       	ldd	r22, Y+41	; 0x29
    98e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    98e6:	0e 94 08 4c 	call	0x9810	; 0x9810 <f_putc>
    98ea:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    98ec:	bf ef       	ldi	r27, 0xFF	; 255
    98ee:	8f 3f       	cpi	r24, 0xFF	; 255
    98f0:	9b 07       	cpc	r25, r27
    98f2:	11 f4       	brne	.+4      	; 0x98f8 <f_printf+0x4a>
    98f4:	48 01       	movw	r8, r16
    98f6:	fa c0       	rjmp	.+500    	; 0x9aec <f_printf+0x23e>
    98f8:	48 01       	movw	r8, r16
    98fa:	4c c0       	rjmp	.+152    	; 0x9994 <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    98fc:	d3 01       	movw	r26, r6
    98fe:	ed 91       	ld	r30, X+
    9900:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9902:	e0 33       	cpi	r30, 0x30	; 48
    9904:	11 f0       	breq	.+4      	; 0x990a <f_printf+0x5c>
    9906:	1b 8a       	std	Y+19, r1	; 0x13
    9908:	04 c0       	rjmp	.+8      	; 0x9912 <f_printf+0x64>
			f = 1; c = *str++;
    990a:	ed 91       	ld	r30, X+
    990c:	3d 01       	movw	r6, r26
    990e:	b1 e0       	ldi	r27, 0x01	; 1
    9910:	bb 8b       	std	Y+19, r27	; 0x13
    9912:	aa 24       	eor	r10, r10
    9914:	bb 24       	eor	r11, r11
    9916:	13 c0       	rjmp	.+38     	; 0x993e <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9918:	c5 01       	movw	r24, r10
    991a:	53 e0       	ldi	r21, 0x03	; 3
    991c:	88 0f       	add	r24, r24
    991e:	99 1f       	adc	r25, r25
    9920:	5a 95       	dec	r21
    9922:	e1 f7       	brne	.-8      	; 0x991c <f_printf+0x6e>
    9924:	aa 0c       	add	r10, r10
    9926:	bb 1c       	adc	r11, r11
    9928:	a8 0e       	add	r10, r24
    992a:	b9 1e       	adc	r11, r25
    992c:	ae 0e       	add	r10, r30
    992e:	b1 1c       	adc	r11, r1
    9930:	e0 ed       	ldi	r30, 0xD0	; 208
    9932:	ff ef       	ldi	r31, 0xFF	; 255
    9934:	ae 0e       	add	r10, r30
    9936:	bf 1e       	adc	r11, r31
			c = *str++;
    9938:	d3 01       	movw	r26, r6
    993a:	ed 91       	ld	r30, X+
    993c:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    993e:	8e 2f       	mov	r24, r30
    9940:	80 53       	subi	r24, 0x30	; 48
    9942:	8a 30       	cpi	r24, 0x0A	; 10
    9944:	48 f3       	brcs	.-46     	; 0x9918 <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9946:	ec 36       	cpi	r30, 0x6C	; 108
    9948:	31 f4       	brne	.+12     	; 0x9956 <f_printf+0xa8>
			f |= 2; c = *str++;
    994a:	bb 89       	ldd	r27, Y+19	; 0x13
    994c:	b2 60       	ori	r27, 0x02	; 2
    994e:	bb 8b       	std	Y+19, r27	; 0x13
    9950:	d3 01       	movw	r26, r6
    9952:	ed 91       	ld	r30, X+
    9954:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9956:	e3 37       	cpi	r30, 0x73	; 115
    9958:	49 f4       	brne	.+18     	; 0x996c <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    995a:	92 e0       	ldi	r25, 0x02	; 2
    995c:	89 2e       	mov	r8, r25
    995e:	91 2c       	mov	r9, r1
    9960:	80 0e       	add	r8, r16
    9962:	91 1e       	adc	r9, r17
    9964:	f8 01       	movw	r30, r16
    9966:	80 81       	ld	r24, Z
    9968:	91 81       	ldd	r25, Z+1	; 0x01
    996a:	bb c0       	rjmp	.+374    	; 0x9ae2 <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    996c:	e3 36       	cpi	r30, 0x63	; 99
    996e:	a9 f4       	brne	.+42     	; 0x999a <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    9970:	82 e0       	ldi	r24, 0x02	; 2
    9972:	88 2e       	mov	r8, r24
    9974:	91 2c       	mov	r9, r1
    9976:	80 0e       	add	r8, r16
    9978:	91 1e       	adc	r9, r17
    997a:	d8 01       	movw	r26, r16
    997c:	8d 91       	ld	r24, X+
    997e:	9c 91       	ld	r25, X
    9980:	69 a5       	ldd	r22, Y+41	; 0x29
    9982:	7a a5       	ldd	r23, Y+42	; 0x2a
    9984:	0e 94 08 4c 	call	0x9810	; 0x9810 <f_putc>
    9988:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    998a:	bf ef       	ldi	r27, 0xFF	; 255
    998c:	8f 3f       	cpi	r24, 0xFF	; 255
    998e:	9b 07       	cpc	r25, r27
    9990:	09 f4       	brne	.+2      	; 0x9994 <f_printf+0xe6>
    9992:	ac c0       	rjmp	.+344    	; 0x9aec <f_printf+0x23e>
    9994:	21 e0       	ldi	r18, 0x01	; 1
    9996:	30 e0       	ldi	r19, 0x00	; 0
    9998:	a9 c0       	rjmp	.+338    	; 0x9aec <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    999a:	e4 36       	cpi	r30, 0x64	; 100
    999c:	39 f0       	breq	.+14     	; 0x99ac <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    999e:	e5 37       	cpi	r30, 0x75	; 117
    99a0:	29 f0       	breq	.+10     	; 0x99ac <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    99a2:	e8 35       	cpi	r30, 0x58	; 88
    99a4:	09 f0       	breq	.+2      	; 0x99a8 <f_printf+0xfa>
    99a6:	ae c0       	rjmp	.+348    	; 0x9b04 <f_printf+0x256>
    99a8:	20 e1       	ldi	r18, 0x10	; 16
    99aa:	01 c0       	rjmp	.+2      	; 0x99ae <f_printf+0x100>
    99ac:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    99ae:	fb 89       	ldd	r31, Y+19	; 0x13
    99b0:	f1 ff       	sbrs	r31, 1
    99b2:	0d c0       	rjmp	.+26     	; 0x99ce <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    99b4:	b4 e0       	ldi	r27, 0x04	; 4
    99b6:	8b 2e       	mov	r8, r27
    99b8:	91 2c       	mov	r9, r1
    99ba:	80 0e       	add	r8, r16
    99bc:	91 1e       	adc	r9, r17
    99be:	d8 01       	movw	r26, r16
    99c0:	ed 90       	ld	r14, X+
    99c2:	fd 90       	ld	r15, X+
    99c4:	0d 91       	ld	r16, X+
    99c6:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    99c8:	e4 36       	cpi	r30, 0x64	; 100
    99ca:	09 f5       	brne	.+66     	; 0x9a0e <f_printf+0x160>
    99cc:	13 c0       	rjmp	.+38     	; 0x99f4 <f_printf+0x146>
    99ce:	c8 01       	movw	r24, r16
    99d0:	02 96       	adiw	r24, 0x02	; 2
    99d2:	d8 01       	movw	r26, r16
    99d4:	6d 91       	ld	r22, X+
    99d6:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    99d8:	e4 36       	cpi	r30, 0x64	; 100
    99da:	39 f4       	brne	.+14     	; 0x99ea <f_printf+0x13c>
    99dc:	4c 01       	movw	r8, r24
    99de:	7b 01       	movw	r14, r22
    99e0:	00 27       	eor	r16, r16
    99e2:	f7 fc       	sbrc	r15, 7
    99e4:	00 95       	com	r16
    99e6:	10 2f       	mov	r17, r16
    99e8:	05 c0       	rjmp	.+10     	; 0x99f4 <f_printf+0x146>
    99ea:	4c 01       	movw	r8, r24
    99ec:	7b 01       	movw	r14, r22
    99ee:	00 e0       	ldi	r16, 0x00	; 0
    99f0:	10 e0       	ldi	r17, 0x00	; 0
    99f2:	0d c0       	rjmp	.+26     	; 0x9a0e <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    99f4:	17 ff       	sbrs	r17, 7
    99f6:	0b c0       	rjmp	.+22     	; 0x9a0e <f_printf+0x160>
				val = 0 - val;
    99f8:	10 95       	com	r17
    99fa:	00 95       	com	r16
    99fc:	f0 94       	com	r15
    99fe:	e0 94       	com	r14
    9a00:	e1 1c       	adc	r14, r1
    9a02:	f1 1c       	adc	r15, r1
    9a04:	01 1d       	adc	r16, r1
    9a06:	11 1d       	adc	r17, r1
				f |= 4;
    9a08:	bb 89       	ldd	r27, Y+19	; 0x13
    9a0a:	b4 60       	ori	r27, 0x04	; 4
    9a0c:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9a0e:	18 8a       	std	Y+16, r1	; 0x10
    9a10:	af e0       	ldi	r26, 0x0F	; 15
    9a12:	ca 2e       	mov	r12, r26
    9a14:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9a16:	22 2e       	mov	r2, r18
    9a18:	33 24       	eor	r3, r3
    9a1a:	44 24       	eor	r4, r4
    9a1c:	55 24       	eor	r5, r5
    9a1e:	c8 01       	movw	r24, r16
    9a20:	b7 01       	movw	r22, r14
    9a22:	a2 01       	movw	r20, r4
    9a24:	91 01       	movw	r18, r2
    9a26:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    9a2a:	86 2f       	mov	r24, r22
    9a2c:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9a2e:	8a 33       	cpi	r24, 0x3A	; 58
    9a30:	08 f0       	brcs	.+2      	; 0x9a34 <f_printf+0x186>
    9a32:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9a34:	08 94       	sec
    9a36:	c1 08       	sbc	r12, r1
    9a38:	d1 08       	sbc	r13, r1
    9a3a:	e1 e0       	ldi	r30, 0x01	; 1
    9a3c:	f0 e0       	ldi	r31, 0x00	; 0
    9a3e:	ec 0f       	add	r30, r28
    9a40:	fd 1f       	adc	r31, r29
    9a42:	ec 0d       	add	r30, r12
    9a44:	fd 1d       	adc	r31, r13
    9a46:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9a48:	c1 14       	cp	r12, r1
    9a4a:	d1 04       	cpc	r13, r1
    9a4c:	e9 f0       	breq	.+58     	; 0x9a88 <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9a4e:	c8 01       	movw	r24, r16
    9a50:	b7 01       	movw	r22, r14
    9a52:	a2 01       	movw	r20, r4
    9a54:	91 01       	movw	r18, r2
    9a56:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    9a5a:	c9 01       	movw	r24, r18
    9a5c:	da 01       	movw	r26, r20
    9a5e:	7c 01       	movw	r14, r24
    9a60:	8d 01       	movw	r16, r26
		} while (i && val);
    9a62:	e1 14       	cp	r14, r1
    9a64:	f1 04       	cpc	r15, r1
    9a66:	01 05       	cpc	r16, r1
    9a68:	11 05       	cpc	r17, r1
    9a6a:	c9 f6       	brne	.-78     	; 0x9a1e <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    9a6c:	eb 89       	ldd	r30, Y+19	; 0x13
    9a6e:	e2 ff       	sbrs	r30, 2
    9a70:	0b c0       	rjmp	.+22     	; 0x9a88 <f_printf+0x1da>
    9a72:	08 94       	sec
    9a74:	c1 08       	sbc	r12, r1
    9a76:	d1 08       	sbc	r13, r1
    9a78:	e1 e0       	ldi	r30, 0x01	; 1
    9a7a:	f0 e0       	ldi	r31, 0x00	; 0
    9a7c:	ec 0f       	add	r30, r28
    9a7e:	fd 1f       	adc	r31, r29
    9a80:	ec 0d       	add	r30, r12
    9a82:	fd 1d       	adc	r31, r13
    9a84:	4d e2       	ldi	r20, 0x2D	; 45
    9a86:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9a88:	8f e0       	ldi	r24, 0x0F	; 15
    9a8a:	90 e0       	ldi	r25, 0x00	; 0
    9a8c:	8a 19       	sub	r24, r10
    9a8e:	9b 09       	sbc	r25, r11
    9a90:	08 94       	sec
    9a92:	c1 08       	sbc	r12, r1
    9a94:	d1 08       	sbc	r13, r1
    9a96:	e1 e0       	ldi	r30, 0x01	; 1
    9a98:	f0 e0       	ldi	r31, 0x00	; 0
    9a9a:	ec 0f       	add	r30, r28
    9a9c:	fd 1f       	adc	r31, r29
    9a9e:	ec 0d       	add	r30, r12
    9aa0:	fd 1d       	adc	r31, r13
    9aa2:	08 94       	sec
    9aa4:	c1 1c       	adc	r12, r1
    9aa6:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9aa8:	ab 89       	ldd	r26, Y+19	; 0x13
    9aaa:	2a 2f       	mov	r18, r26
    9aac:	30 e0       	ldi	r19, 0x00	; 0
    9aae:	21 70       	andi	r18, 0x01	; 1
    9ab0:	30 70       	andi	r19, 0x00	; 0
    9ab2:	0b c0       	rjmp	.+22     	; 0x9aca <f_printf+0x21c>
    9ab4:	08 94       	sec
    9ab6:	c1 08       	sbc	r12, r1
    9ab8:	d1 08       	sbc	r13, r1
    9aba:	21 15       	cp	r18, r1
    9abc:	31 05       	cpc	r19, r1
    9abe:	11 f4       	brne	.+4      	; 0x9ac4 <f_printf+0x216>
    9ac0:	40 e2       	ldi	r20, 0x20	; 32
    9ac2:	01 c0       	rjmp	.+2      	; 0x9ac6 <f_printf+0x218>
    9ac4:	40 e3       	ldi	r20, 0x30	; 48
    9ac6:	40 83       	st	Z, r20
    9ac8:	31 97       	sbiw	r30, 0x01	; 1
    9aca:	c1 14       	cp	r12, r1
    9acc:	d1 04       	cpc	r13, r1
    9ace:	19 f0       	breq	.+6      	; 0x9ad6 <f_printf+0x228>
    9ad0:	8c 15       	cp	r24, r12
    9ad2:	9d 05       	cpc	r25, r13
    9ad4:	7c f3       	brlt	.-34     	; 0x9ab4 <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    9ad6:	81 e0       	ldi	r24, 0x01	; 1
    9ad8:	90 e0       	ldi	r25, 0x00	; 0
    9ada:	8c 0f       	add	r24, r28
    9adc:	9d 1f       	adc	r25, r29
    9ade:	8c 0d       	add	r24, r12
    9ae0:	9d 1d       	adc	r25, r13
    9ae2:	69 a5       	ldd	r22, Y+41	; 0x29
    9ae4:	7a a5       	ldd	r23, Y+42	; 0x2a
    9ae6:	0e 94 33 4c 	call	0x9866	; 0x9866 <f_puts>
    9aea:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9aec:	e9 89       	ldd	r30, Y+17	; 0x11
    9aee:	fa 89       	ldd	r31, Y+18	; 0x12
    9af0:	e2 0f       	add	r30, r18
    9af2:	f3 1f       	adc	r31, r19
    9af4:	e9 8b       	std	Y+17, r30	; 0x11
    9af6:	fa 8b       	std	Y+18, r31	; 0x12
    9af8:	ff ef       	ldi	r31, 0xFF	; 255
    9afa:	2f 3f       	cpi	r18, 0xFF	; 255
    9afc:	3f 07       	cpc	r19, r31
    9afe:	41 f0       	breq	.+16     	; 0x9b10 <f_printf+0x262>
    9b00:	84 01       	movw	r16, r8
    9b02:	e4 ce       	rjmp	.-568    	; 0x98cc <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9b04:	4f ef       	ldi	r20, 0xFF	; 255
    9b06:	2f 3f       	cpi	r18, 0xFF	; 255
    9b08:	34 07       	cpc	r19, r20
    9b0a:	11 f0       	breq	.+4      	; 0x9b10 <f_printf+0x262>
    9b0c:	29 89       	ldd	r18, Y+17	; 0x11
    9b0e:	3a 89       	ldd	r19, Y+18	; 0x12
}
    9b10:	c9 01       	movw	r24, r18
    9b12:	63 96       	adiw	r28, 0x13	; 19
    9b14:	e2 e1       	ldi	r30, 0x12	; 18
    9b16:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <__epilogue_restores__>

00009b1a <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9b1a:	a4 e2       	ldi	r26, 0x24	; 36
    9b1c:	b0 e0       	ldi	r27, 0x00	; 0
    9b1e:	e3 e9       	ldi	r30, 0x93	; 147
    9b20:	fd e4       	ldi	r31, 0x4D	; 77
    9b22:	0c 94 21 59 	jmp	0xb242	; 0xb242 <__prologue_saves__+0x6>
    9b26:	5c 01       	movw	r10, r24
    9b28:	6b a3       	std	Y+35, r22	; 0x23
    9b2a:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    9b2c:	dc 01       	movw	r26, r24
    9b2e:	1d 92       	st	X+, r1
    9b30:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    9b32:	0f e1       	ldi	r16, 0x1F	; 31
    9b34:	50 2e       	mov	r5, r16
    9b36:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    9b38:	8e 01       	movw	r16, r28
    9b3a:	03 5f       	subi	r16, 0xF3	; 243
    9b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    9b3e:	4e 71       	andi	r20, 0x1E	; 30
    9b40:	ce 01       	movw	r24, r28
    9b42:	83 96       	adiw	r24, 0x23	; 35
    9b44:	b8 01       	movw	r22, r16
    9b46:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9b4a:	00 97       	sbiw	r24, 0x00	; 0
    9b4c:	11 f0       	breq	.+4      	; 0x9b52 <f_open+0x38>
    9b4e:	9c 01       	movw	r18, r24
    9b50:	f6 c0       	rjmp	.+492    	; 0x9d3e <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    9b52:	ce 01       	movw	r24, r28
    9b54:	01 96       	adiw	r24, 0x01	; 1
    9b56:	89 a3       	std	Y+33, r24	; 0x21
    9b58:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    9b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    9b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    9b5e:	c8 01       	movw	r24, r16
    9b60:	0e 94 88 41 	call	0x8310	; 0x8310 <follow_path>
    9b64:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9b66:	45 2d       	mov	r20, r5
    9b68:	50 e0       	ldi	r21, 0x00	; 0
    9b6a:	ca 01       	movw	r24, r20
    9b6c:	8c 71       	andi	r24, 0x1C	; 28
    9b6e:	90 70       	andi	r25, 0x00	; 0
    9b70:	89 2b       	or	r24, r25
    9b72:	09 f4       	brne	.+2      	; 0x9b76 <f_open+0x5c>
    9b74:	7e c0       	rjmp	.+252    	; 0x9c72 <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    9b76:	21 15       	cp	r18, r1
    9b78:	31 05       	cpc	r19, r1
    9b7a:	81 f0       	breq	.+32     	; 0x9b9c <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    9b7c:	24 30       	cpi	r18, 0x04	; 4
    9b7e:	31 05       	cpc	r19, r1
    9b80:	09 f0       	breq	.+2      	; 0x9b84 <f_open+0x6a>
    9b82:	dd c0       	rjmp	.+442    	; 0x9d3e <f_open+0x224>
				res = dir_register(&dj);
    9b84:	c8 01       	movw	r24, r16
    9b86:	0e 94 ac 43 	call	0x8758	; 0x8758 <dir_register>
    9b8a:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9b8c:	00 97       	sbiw	r24, 0x00	; 0
    9b8e:	09 f0       	breq	.+2      	; 0x9b92 <f_open+0x78>
    9b90:	d6 c0       	rjmp	.+428    	; 0x9d3e <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    9b92:	b8 e0       	ldi	r27, 0x08	; 8
    9b94:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    9b96:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9b98:	d8 a0       	ldd	r13, Y+32	; 0x20
    9b9a:	57 c0       	rjmp	.+174    	; 0x9c4a <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    9b9c:	52 fe       	sbrs	r5, 2
    9b9e:	03 c0       	rjmp	.+6      	; 0x9ba6 <f_open+0x8c>
    9ba0:	28 e0       	ldi	r18, 0x08	; 8
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	cc c0       	rjmp	.+408    	; 0x9d3e <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    9ba6:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9ba8:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    9baa:	c1 14       	cp	r12, r1
    9bac:	d1 04       	cpc	r13, r1
    9bae:	09 f4       	brne	.+2      	; 0x9bb2 <f_open+0x98>
    9bb0:	c1 c0       	rjmp	.+386    	; 0x9d34 <f_open+0x21a>
    9bb2:	f6 01       	movw	r30, r12
    9bb4:	83 85       	ldd	r24, Z+11	; 0x0b
    9bb6:	81 71       	andi	r24, 0x11	; 17
    9bb8:	09 f0       	breq	.+2      	; 0x9bbc <f_open+0xa2>
    9bba:	bc c0       	rjmp	.+376    	; 0x9d34 <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    9bbc:	53 fe       	sbrs	r5, 3
    9bbe:	45 c0       	rjmp	.+138    	; 0x9c4a <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    9bc0:	84 89       	ldd	r24, Z+20	; 0x14
    9bc2:	95 89       	ldd	r25, Z+21	; 0x15
    9bc4:	a0 e0       	ldi	r26, 0x00	; 0
    9bc6:	b0 e0       	ldi	r27, 0x00	; 0
    9bc8:	8c 01       	movw	r16, r24
    9bca:	ff 24       	eor	r15, r15
    9bcc:	ee 24       	eor	r14, r14
    9bce:	82 8d       	ldd	r24, Z+26	; 0x1a
    9bd0:	93 8d       	ldd	r25, Z+27	; 0x1b
    9bd2:	a0 e0       	ldi	r26, 0x00	; 0
    9bd4:	b0 e0       	ldi	r27, 0x00	; 0
    9bd6:	e8 2a       	or	r14, r24
    9bd8:	f9 2a       	or	r15, r25
    9bda:	0a 2b       	or	r16, r26
    9bdc:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    9bde:	14 8a       	std	Z+20, r1	; 0x14
    9be0:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    9be2:	12 8e       	std	Z+26, r1	; 0x1a
    9be4:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    9be6:	d6 01       	movw	r26, r12
    9be8:	5c 96       	adiw	r26, 0x1c	; 28
    9bea:	1d 92       	st	X+, r1
    9bec:	1d 92       	st	X+, r1
    9bee:	1d 92       	st	X+, r1
    9bf0:	1c 92       	st	X, r1
    9bf2:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    9bf4:	ed 85       	ldd	r30, Y+13	; 0x0d
    9bf6:	fe 85       	ldd	r31, Y+14	; 0x0e
    9bf8:	81 e0       	ldi	r24, 0x01	; 1
    9bfa:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    9bfc:	66 a4       	ldd	r6, Z+46	; 0x2e
    9bfe:	77 a4       	ldd	r7, Z+47	; 0x2f
    9c00:	80 a8       	ldd	r8, Z+48	; 0x30
    9c02:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    9c04:	e1 14       	cp	r14, r1
    9c06:	f1 04       	cpc	r15, r1
    9c08:	01 05       	cpc	r16, r1
    9c0a:	11 05       	cpc	r17, r1
    9c0c:	a1 f0       	breq	.+40     	; 0x9c36 <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    9c0e:	cf 01       	movw	r24, r30
    9c10:	b8 01       	movw	r22, r16
    9c12:	a7 01       	movw	r20, r14
    9c14:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <remove_chain>
    9c18:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    9c1a:	00 97       	sbiw	r24, 0x00	; 0
    9c1c:	09 f0       	breq	.+2      	; 0x9c20 <f_open+0x106>
    9c1e:	8f c0       	rjmp	.+286    	; 0x9d3e <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9c20:	ed 85       	ldd	r30, Y+13	; 0x0d
    9c22:	fe 85       	ldd	r31, Y+14	; 0x0e
    9c24:	08 94       	sec
    9c26:	e1 08       	sbc	r14, r1
    9c28:	f1 08       	sbc	r15, r1
    9c2a:	01 09       	sbc	r16, r1
    9c2c:	11 09       	sbc	r17, r1
    9c2e:	e2 86       	std	Z+10, r14	; 0x0a
    9c30:	f3 86       	std	Z+11, r15	; 0x0b
    9c32:	04 87       	std	Z+12, r16	; 0x0c
    9c34:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    9c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    9c3a:	b4 01       	movw	r22, r8
    9c3c:	a3 01       	movw	r20, r6
    9c3e:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    9c42:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9c44:	00 97       	sbiw	r24, 0x00	; 0
    9c46:	09 f0       	breq	.+2      	; 0x9c4a <f_open+0x130>
    9c48:	7a c0       	rjmp	.+244    	; 0x9d3e <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    9c4a:	53 fe       	sbrs	r5, 3
    9c4c:	24 c0       	rjmp	.+72     	; 0x9c96 <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9c4e:	f6 01       	movw	r30, r12
    9c50:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    9c52:	0e 94 f5 55 	call	0xabea	; 0xabea <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    9c56:	d6 01       	movw	r26, r12
    9c58:	1e 96       	adiw	r26, 0x0e	; 14
    9c5a:	6d 93       	st	X+, r22
    9c5c:	7d 93       	st	X+, r23
    9c5e:	8d 93       	st	X+, r24
    9c60:	9c 93       	st	X, r25
    9c62:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    9c64:	ed 85       	ldd	r30, Y+13	; 0x0d
    9c66:	fe 85       	ldd	r31, Y+14	; 0x0e
    9c68:	81 e0       	ldi	r24, 0x01	; 1
    9c6a:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    9c6c:	b0 e2       	ldi	r27, 0x20	; 32
    9c6e:	5b 2a       	or	r5, r27
    9c70:	12 c0       	rjmp	.+36     	; 0x9c96 <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    9c72:	21 15       	cp	r18, r1
    9c74:	31 05       	cpc	r19, r1
    9c76:	09 f0       	breq	.+2      	; 0x9c7a <f_open+0x160>
    9c78:	62 c0       	rjmp	.+196    	; 0x9d3e <f_open+0x224>
		dir = dj.dir;
    9c7a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9c7c:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    9c7e:	c1 14       	cp	r12, r1
    9c80:	d1 04       	cpc	r13, r1
    9c82:	09 f4       	brne	.+2      	; 0x9c86 <f_open+0x16c>
    9c84:	5a c0       	rjmp	.+180    	; 0x9d3a <f_open+0x220>
    9c86:	f6 01       	movw	r30, r12
    9c88:	83 85       	ldd	r24, Z+11	; 0x0b
    9c8a:	84 fd       	sbrc	r24, 4
    9c8c:	56 c0       	rjmp	.+172    	; 0x9d3a <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9c8e:	51 fe       	sbrs	r5, 1
    9c90:	02 c0       	rjmp	.+4      	; 0x9c96 <f_open+0x17c>
    9c92:	80 fd       	sbrc	r24, 0
    9c94:	4f c0       	rjmp	.+158    	; 0x9d34 <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    9c96:	6d 85       	ldd	r22, Y+13	; 0x0d
    9c98:	7e 85       	ldd	r23, Y+14	; 0x0e
    9c9a:	db 01       	movw	r26, r22
    9c9c:	9e 96       	adiw	r26, 0x2e	; 46
    9c9e:	2d 91       	ld	r18, X+
    9ca0:	3d 91       	ld	r19, X+
    9ca2:	4d 91       	ld	r20, X+
    9ca4:	5c 91       	ld	r21, X
    9ca6:	d1 97       	sbiw	r26, 0x31	; 49
    9ca8:	f5 01       	movw	r30, r10
    9caa:	22 8f       	std	Z+26, r18	; 0x1a
    9cac:	33 8f       	std	Z+27, r19	; 0x1b
    9cae:	44 8f       	std	Z+28, r20	; 0x1c
    9cb0:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    9cb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9cb4:	98 a1       	ldd	r25, Y+32	; 0x20
    9cb6:	86 8f       	std	Z+30, r24	; 0x1e
    9cb8:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    9cba:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    9cbc:	d6 01       	movw	r26, r12
    9cbe:	54 96       	adiw	r26, 0x14	; 20
    9cc0:	8d 91       	ld	r24, X+
    9cc2:	9c 91       	ld	r25, X
    9cc4:	55 97       	sbiw	r26, 0x15	; 21
    9cc6:	a0 e0       	ldi	r26, 0x00	; 0
    9cc8:	b0 e0       	ldi	r27, 0x00	; 0
    9cca:	dc 01       	movw	r26, r24
    9ccc:	99 27       	eor	r25, r25
    9cce:	88 27       	eor	r24, r24
    9cd0:	f6 01       	movw	r30, r12
    9cd2:	22 8d       	ldd	r18, Z+26	; 0x1a
    9cd4:	33 8d       	ldd	r19, Z+27	; 0x1b
    9cd6:	40 e0       	ldi	r20, 0x00	; 0
    9cd8:	50 e0       	ldi	r21, 0x00	; 0
    9cda:	82 2b       	or	r24, r18
    9cdc:	93 2b       	or	r25, r19
    9cde:	a4 2b       	or	r26, r20
    9ce0:	b5 2b       	or	r27, r21
    9ce2:	f5 01       	movw	r30, r10
    9ce4:	86 87       	std	Z+14, r24	; 0x0e
    9ce6:	97 87       	std	Z+15, r25	; 0x0f
    9ce8:	a0 8b       	std	Z+16, r26	; 0x10
    9cea:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9cec:	f6 01       	movw	r30, r12
    9cee:	84 8d       	ldd	r24, Z+28	; 0x1c
    9cf0:	95 8d       	ldd	r25, Z+29	; 0x1d
    9cf2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9cf4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9cf6:	f5 01       	movw	r30, r10
    9cf8:	82 87       	std	Z+10, r24	; 0x0a
    9cfa:	93 87       	std	Z+11, r25	; 0x0b
    9cfc:	a4 87       	std	Z+12, r26	; 0x0c
    9cfe:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    9d00:	d5 01       	movw	r26, r10
    9d02:	16 96       	adiw	r26, 0x06	; 6
    9d04:	1d 92       	st	X+, r1
    9d06:	1d 92       	st	X+, r1
    9d08:	1d 92       	st	X+, r1
    9d0a:	1c 92       	st	X, r1
    9d0c:	19 97       	sbiw	r26, 0x09	; 9
    9d0e:	8f ef       	ldi	r24, 0xFF	; 255
    9d10:	15 96       	adiw	r26, 0x05	; 5
    9d12:	8c 93       	st	X, r24
	fp->dsect = 0;
    9d14:	16 8a       	std	Z+22, r1	; 0x16
    9d16:	17 8a       	std	Z+23, r1	; 0x17
    9d18:	10 8e       	std	Z+24, r1	; 0x18
    9d1a:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    9d1c:	60 83       	st	Z, r22
    9d1e:	71 83       	std	Z+1, r23	; 0x01
    9d20:	db 01       	movw	r26, r22
    9d22:	15 96       	adiw	r26, 0x05	; 5
    9d24:	8d 91       	ld	r24, X+
    9d26:	9c 91       	ld	r25, X
    9d28:	16 97       	sbiw	r26, 0x06	; 6
    9d2a:	82 83       	std	Z+2, r24	; 0x02
    9d2c:	93 83       	std	Z+3, r25	; 0x03
    9d2e:	20 e0       	ldi	r18, 0x00	; 0
    9d30:	30 e0       	ldi	r19, 0x00	; 0
    9d32:	05 c0       	rjmp	.+10     	; 0x9d3e <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    9d34:	27 e0       	ldi	r18, 0x07	; 7
    9d36:	30 e0       	ldi	r19, 0x00	; 0
    9d38:	02 c0       	rjmp	.+4      	; 0x9d3e <f_open+0x224>
    9d3a:	24 e0       	ldi	r18, 0x04	; 4
    9d3c:	30 e0       	ldi	r19, 0x00	; 0
}
    9d3e:	c9 01       	movw	r24, r18
    9d40:	a4 96       	adiw	r28, 0x24	; 36
    9d42:	ef e0       	ldi	r30, 0x0F	; 15
    9d44:	0c 94 3d 59 	jmp	0xb27a	; 0xb27a <__epilogue_restores__+0x6>

00009d48 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9d48:	a4 e0       	ldi	r26, 0x04	; 4
    9d4a:	b0 e0       	ldi	r27, 0x00	; 0
    9d4c:	ea ea       	ldi	r30, 0xAA	; 170
    9d4e:	fe e4       	ldi	r31, 0x4E	; 78
    9d50:	0c 94 1f 59 	jmp	0xb23e	; 0xb23e <__prologue_saves__+0x2>
    9d54:	8b 83       	std	Y+3, r24	; 0x03
    9d56:	9c 83       	std	Y+4, r25	; 0x04
    9d58:	16 2f       	mov	r17, r22
    9d5a:	07 2f       	mov	r16, r23
    9d5c:	3a 01       	movw	r6, r20
    9d5e:	29 83       	std	Y+1, r18	; 0x01
    9d60:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    9d62:	d9 01       	movw	r26, r18
    9d64:	1d 92       	st	X+, r1
    9d66:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9d68:	fc 01       	movw	r30, r24
    9d6a:	62 81       	ldd	r22, Z+2	; 0x02
    9d6c:	73 81       	ldd	r23, Z+3	; 0x03
    9d6e:	80 81       	ld	r24, Z
    9d70:	91 81       	ldd	r25, Z+1	; 0x01
    9d72:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <validate>
    9d76:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9d78:	00 97       	sbiw	r24, 0x00	; 0
    9d7a:	09 f0       	breq	.+2      	; 0x9d7e <f_read+0x36>
    9d7c:	8a c1       	rjmp	.+788    	; 0xa092 <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    9d7e:	ab 81       	ldd	r26, Y+3	; 0x03
    9d80:	bc 81       	ldd	r27, Y+4	; 0x04
    9d82:	14 96       	adiw	r26, 0x04	; 4
    9d84:	8c 91       	ld	r24, X
    9d86:	87 fd       	sbrc	r24, 7
    9d88:	60 c0       	rjmp	.+192    	; 0x9e4a <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    9d8a:	80 fd       	sbrc	r24, 0
    9d8c:	04 c0       	rjmp	.+8      	; 0x9d96 <f_read+0x4e>
    9d8e:	97 e0       	ldi	r25, 0x07	; 7
    9d90:	89 2e       	mov	r8, r25
    9d92:	91 2c       	mov	r9, r1
    9d94:	7e c1       	rjmp	.+764    	; 0xa092 <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    9d96:	eb 81       	ldd	r30, Y+3	; 0x03
    9d98:	fc 81       	ldd	r31, Y+4	; 0x04
    9d9a:	22 85       	ldd	r18, Z+10	; 0x0a
    9d9c:	33 85       	ldd	r19, Z+11	; 0x0b
    9d9e:	44 85       	ldd	r20, Z+12	; 0x0c
    9da0:	55 85       	ldd	r21, Z+13	; 0x0d
    9da2:	86 81       	ldd	r24, Z+6	; 0x06
    9da4:	97 81       	ldd	r25, Z+7	; 0x07
    9da6:	a0 85       	ldd	r26, Z+8	; 0x08
    9da8:	b1 85       	ldd	r27, Z+9	; 0x09
    9daa:	28 1b       	sub	r18, r24
    9dac:	39 0b       	sbc	r19, r25
    9dae:	4a 0b       	sbc	r20, r26
    9db0:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    9db2:	c3 01       	movw	r24, r6
    9db4:	a0 e0       	ldi	r26, 0x00	; 0
    9db6:	b0 e0       	ldi	r27, 0x00	; 0
    9db8:	28 17       	cp	r18, r24
    9dba:	39 07       	cpc	r19, r25
    9dbc:	4a 07       	cpc	r20, r26
    9dbe:	5b 07       	cpc	r21, r27
    9dc0:	08 f4       	brcc	.+2      	; 0x9dc4 <f_read+0x7c>
    9dc2:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    9dc4:	81 2f       	mov	r24, r17
    9dc6:	90 2f       	mov	r25, r16
    9dc8:	9c 01       	movw	r18, r24
    9dca:	29 01       	movw	r4, r18
    9dcc:	5e c1       	rjmp	.+700    	; 0xa08a <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    9dce:	ab 81       	ldd	r26, Y+3	; 0x03
    9dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    9dd2:	16 96       	adiw	r26, 0x06	; 6
    9dd4:	2d 91       	ld	r18, X+
    9dd6:	3d 91       	ld	r19, X+
    9dd8:	4d 91       	ld	r20, X+
    9dda:	5c 91       	ld	r21, X
    9ddc:	19 97       	sbiw	r26, 0x09	; 9
    9dde:	da 01       	movw	r26, r20
    9de0:	c9 01       	movw	r24, r18
    9de2:	91 70       	andi	r25, 0x01	; 1
    9de4:	a0 70       	andi	r26, 0x00	; 0
    9de6:	b0 70       	andi	r27, 0x00	; 0
    9de8:	00 97       	sbiw	r24, 0x00	; 0
    9dea:	a1 05       	cpc	r26, r1
    9dec:	b1 05       	cpc	r27, r1
    9dee:	09 f0       	breq	.+2      	; 0x9df2 <f_read+0xaa>
    9df0:	ef c0       	rjmp	.+478    	; 0x9fd0 <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    9df2:	ab 81       	ldd	r26, Y+3	; 0x03
    9df4:	bc 81       	ldd	r27, Y+4	; 0x04
    9df6:	ed 91       	ld	r30, X+
    9df8:	fc 91       	ld	r31, X
    9dfa:	11 97       	sbiw	r26, 0x01	; 1
    9dfc:	15 96       	adiw	r26, 0x05	; 5
    9dfe:	9c 91       	ld	r25, X
    9e00:	15 97       	sbiw	r26, 0x05	; 5
    9e02:	82 81       	ldd	r24, Z+2	; 0x02
    9e04:	98 17       	cp	r25, r24
    9e06:	e8 f1       	brcs	.+122    	; 0x9e82 <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    9e08:	21 15       	cp	r18, r1
    9e0a:	31 05       	cpc	r19, r1
    9e0c:	41 05       	cpc	r20, r1
    9e0e:	51 05       	cpc	r21, r1
    9e10:	39 f4       	brne	.+14     	; 0x9e20 <f_read+0xd8>
    9e12:	1e 96       	adiw	r26, 0x0e	; 14
    9e14:	6d 91       	ld	r22, X+
    9e16:	7d 91       	ld	r23, X+
    9e18:	8d 91       	ld	r24, X+
    9e1a:	9c 91       	ld	r25, X
    9e1c:	51 97       	sbiw	r26, 0x11	; 17
    9e1e:	0b c0       	rjmp	.+22     	; 0x9e36 <f_read+0xee>
    9e20:	ab 81       	ldd	r26, Y+3	; 0x03
    9e22:	bc 81       	ldd	r27, Y+4	; 0x04
    9e24:	52 96       	adiw	r26, 0x12	; 18
    9e26:	4d 91       	ld	r20, X+
    9e28:	5d 91       	ld	r21, X+
    9e2a:	6d 91       	ld	r22, X+
    9e2c:	7c 91       	ld	r23, X
    9e2e:	55 97       	sbiw	r26, 0x15	; 21
    9e30:	cf 01       	movw	r24, r30
    9e32:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    9e36:	62 30       	cpi	r22, 0x02	; 2
    9e38:	71 05       	cpc	r23, r1
    9e3a:	81 05       	cpc	r24, r1
    9e3c:	91 05       	cpc	r25, r1
    9e3e:	48 f4       	brcc	.+18     	; 0x9e52 <f_read+0x10a>
    9e40:	eb 81       	ldd	r30, Y+3	; 0x03
    9e42:	fc 81       	ldd	r31, Y+4	; 0x04
    9e44:	84 81       	ldd	r24, Z+4	; 0x04
    9e46:	80 68       	ori	r24, 0x80	; 128
    9e48:	84 83       	std	Z+4, r24	; 0x04
    9e4a:	82 e0       	ldi	r24, 0x02	; 2
    9e4c:	88 2e       	mov	r8, r24
    9e4e:	91 2c       	mov	r9, r1
    9e50:	20 c1       	rjmp	.+576    	; 0xa092 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9e52:	6f 3f       	cpi	r22, 0xFF	; 255
    9e54:	ff ef       	ldi	r31, 0xFF	; 255
    9e56:	7f 07       	cpc	r23, r31
    9e58:	ff ef       	ldi	r31, 0xFF	; 255
    9e5a:	8f 07       	cpc	r24, r31
    9e5c:	ff ef       	ldi	r31, 0xFF	; 255
    9e5e:	9f 07       	cpc	r25, r31
    9e60:	49 f4       	brne	.+18     	; 0x9e74 <f_read+0x12c>
    9e62:	ab 81       	ldd	r26, Y+3	; 0x03
    9e64:	bc 81       	ldd	r27, Y+4	; 0x04
    9e66:	14 96       	adiw	r26, 0x04	; 4
    9e68:	8c 91       	ld	r24, X
    9e6a:	14 97       	sbiw	r26, 0x04	; 4
    9e6c:	80 68       	ori	r24, 0x80	; 128
    9e6e:	14 96       	adiw	r26, 0x04	; 4
    9e70:	8c 93       	st	X, r24
    9e72:	c7 c0       	rjmp	.+398    	; 0xa002 <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    9e74:	eb 81       	ldd	r30, Y+3	; 0x03
    9e76:	fc 81       	ldd	r31, Y+4	; 0x04
    9e78:	62 8b       	std	Z+18, r22	; 0x12
    9e7a:	73 8b       	std	Z+19, r23	; 0x13
    9e7c:	84 8b       	std	Z+20, r24	; 0x14
    9e7e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    9e80:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    9e82:	ab 81       	ldd	r26, Y+3	; 0x03
    9e84:	bc 81       	ldd	r27, Y+4	; 0x04
    9e86:	0d 91       	ld	r16, X+
    9e88:	1c 91       	ld	r17, X
    9e8a:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9e8c:	52 96       	adiw	r26, 0x12	; 18
    9e8e:	2d 91       	ld	r18, X+
    9e90:	3d 91       	ld	r19, X+
    9e92:	4d 91       	ld	r20, X+
    9e94:	5c 91       	ld	r21, X
    9e96:	55 97       	sbiw	r26, 0x15	; 21
    9e98:	22 50       	subi	r18, 0x02	; 2
    9e9a:	30 40       	sbci	r19, 0x00	; 0
    9e9c:	40 40       	sbci	r20, 0x00	; 0
    9e9e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9ea0:	f8 01       	movw	r30, r16
    9ea2:	86 8d       	ldd	r24, Z+30	; 0x1e
    9ea4:	97 8d       	ldd	r25, Z+31	; 0x1f
    9ea6:	a0 a1       	ldd	r26, Z+32	; 0x20
    9ea8:	b1 a1       	ldd	r27, Z+33	; 0x21
    9eaa:	02 97       	sbiw	r24, 0x02	; 2
    9eac:	a1 09       	sbc	r26, r1
    9eae:	b1 09       	sbc	r27, r1
    9eb0:	28 17       	cp	r18, r24
    9eb2:	39 07       	cpc	r19, r25
    9eb4:	4a 07       	cpc	r20, r26
    9eb6:	5b 07       	cpc	r21, r27
    9eb8:	b8 f4       	brcc	.+46     	; 0x9ee8 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    9eba:	32 80       	ldd	r3, Z+2	; 0x02
    9ebc:	63 2d       	mov	r22, r3
    9ebe:	70 e0       	ldi	r23, 0x00	; 0
    9ec0:	80 e0       	ldi	r24, 0x00	; 0
    9ec2:	90 e0       	ldi	r25, 0x00	; 0
    9ec4:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    9ec8:	9b 01       	movw	r18, r22
    9eca:	ac 01       	movw	r20, r24
    9ecc:	f8 01       	movw	r30, r16
    9ece:	82 a5       	ldd	r24, Z+42	; 0x2a
    9ed0:	93 a5       	ldd	r25, Z+43	; 0x2b
    9ed2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9ed4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9ed6:	28 0f       	add	r18, r24
    9ed8:	39 1f       	adc	r19, r25
    9eda:	4a 1f       	adc	r20, r26
    9edc:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9ede:	21 15       	cp	r18, r1
    9ee0:	31 05       	cpc	r19, r1
    9ee2:	41 05       	cpc	r20, r1
    9ee4:	51 05       	cpc	r21, r1
    9ee6:	49 f4       	brne	.+18     	; 0x9efa <f_read+0x1b2>
    9ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    9eea:	bc 81       	ldd	r27, Y+4	; 0x04
    9eec:	14 96       	adiw	r26, 0x04	; 4
    9eee:	8c 91       	ld	r24, X
    9ef0:	14 97       	sbiw	r26, 0x04	; 4
    9ef2:	80 68       	ori	r24, 0x80	; 128
    9ef4:	14 96       	adiw	r26, 0x04	; 4
    9ef6:	8c 93       	st	X, r24
    9ef8:	a8 cf       	rjmp	.-176    	; 0x9e4a <f_read+0x102>
			sect += fp->csect;
    9efa:	eb 81       	ldd	r30, Y+3	; 0x03
    9efc:	fc 81       	ldd	r31, Y+4	; 0x04
    9efe:	85 81       	ldd	r24, Z+5	; 0x05
    9f00:	69 01       	movw	r12, r18
    9f02:	7a 01       	movw	r14, r20
    9f04:	c8 0e       	add	r12, r24
    9f06:	d1 1c       	adc	r13, r1
    9f08:	e1 1c       	adc	r14, r1
    9f0a:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    9f0c:	53 01       	movw	r10, r6
    9f0e:	ab 2c       	mov	r10, r11
    9f10:	bb 24       	eor	r11, r11
    9f12:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    9f14:	a1 14       	cp	r10, r1
    9f16:	b1 04       	cpc	r11, r1
    9f18:	09 f4       	brne	.+2      	; 0x9f1c <f_read+0x1d4>
    9f1a:	52 c0       	rjmp	.+164    	; 0x9fc0 <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9f1c:	28 2f       	mov	r18, r24
    9f1e:	30 e0       	ldi	r19, 0x00	; 0
    9f20:	c5 01       	movw	r24, r10
    9f22:	82 0f       	add	r24, r18
    9f24:	93 1f       	adc	r25, r19
    9f26:	63 2d       	mov	r22, r3
    9f28:	70 e0       	ldi	r23, 0x00	; 0
    9f2a:	68 17       	cp	r22, r24
    9f2c:	79 07       	cpc	r23, r25
    9f2e:	18 f4       	brcc	.+6      	; 0x9f36 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    9f30:	5b 01       	movw	r10, r22
    9f32:	a2 1a       	sub	r10, r18
    9f34:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    9f36:	d8 01       	movw	r26, r16
    9f38:	11 96       	adiw	r26, 0x01	; 1
    9f3a:	8c 91       	ld	r24, X
    9f3c:	b2 01       	movw	r22, r4
    9f3e:	a7 01       	movw	r20, r14
    9f40:	96 01       	movw	r18, r12
    9f42:	0a 2d       	mov	r16, r10
    9f44:	0e 94 08 52 	call	0xa410	; 0xa410 <disk_read>
    9f48:	89 2b       	or	r24, r25
    9f4a:	09 f0       	breq	.+2      	; 0x9f4e <f_read+0x206>
    9f4c:	55 c0       	rjmp	.+170    	; 0x9ff8 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    9f4e:	ab 81       	ldd	r26, Y+3	; 0x03
    9f50:	bc 81       	ldd	r27, Y+4	; 0x04
    9f52:	6d 91       	ld	r22, X+
    9f54:	7c 91       	ld	r23, X
    9f56:	fb 01       	movw	r30, r22
    9f58:	84 81       	ldd	r24, Z+4	; 0x04
    9f5a:	88 23       	and	r24, r24
    9f5c:	21 f1       	breq	.+72     	; 0x9fa6 <f_read+0x25e>
    9f5e:	26 a5       	ldd	r18, Z+46	; 0x2e
    9f60:	37 a5       	ldd	r19, Z+47	; 0x2f
    9f62:	40 a9       	ldd	r20, Z+48	; 0x30
    9f64:	51 a9       	ldd	r21, Z+49	; 0x31
    9f66:	2c 19       	sub	r18, r12
    9f68:	3d 09       	sbc	r19, r13
    9f6a:	4e 09       	sbc	r20, r14
    9f6c:	5f 09       	sbc	r21, r15
    9f6e:	c5 01       	movw	r24, r10
    9f70:	a0 e0       	ldi	r26, 0x00	; 0
    9f72:	b0 e0       	ldi	r27, 0x00	; 0
    9f74:	28 17       	cp	r18, r24
    9f76:	39 07       	cpc	r19, r25
    9f78:	4a 07       	cpc	r20, r26
    9f7a:	5b 07       	cpc	r21, r27
    9f7c:	a0 f4       	brcc	.+40     	; 0x9fa6 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9f7e:	a9 e0       	ldi	r26, 0x09	; 9
    9f80:	22 0f       	add	r18, r18
    9f82:	33 1f       	adc	r19, r19
    9f84:	44 1f       	adc	r20, r20
    9f86:	55 1f       	adc	r21, r21
    9f88:	aa 95       	dec	r26
    9f8a:	d1 f7       	brne	.-12     	; 0x9f80 <f_read+0x238>
    9f8c:	d2 01       	movw	r26, r4
    9f8e:	a2 0f       	add	r26, r18
    9f90:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    9f92:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    9f94:	9b 01       	movw	r18, r22
    9f96:	2e 5c       	subi	r18, 0xCE	; 206
    9f98:	3d 4f       	sbci	r19, 0xFD	; 253
    9f9a:	02 c0       	rjmp	.+4      	; 0x9fa0 <f_read+0x258>
    9f9c:	81 91       	ld	r24, Z+
    9f9e:	8d 93       	st	X+, r24
    9fa0:	e2 17       	cp	r30, r18
    9fa2:	f3 07       	cpc	r31, r19
    9fa4:	d9 f7       	brne	.-10     	; 0x9f9c <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9fa6:	ab 81       	ldd	r26, Y+3	; 0x03
    9fa8:	bc 81       	ldd	r27, Y+4	; 0x04
    9faa:	15 96       	adiw	r26, 0x05	; 5
    9fac:	8c 91       	ld	r24, X
    9fae:	15 97       	sbiw	r26, 0x05	; 5
    9fb0:	8a 0d       	add	r24, r10
    9fb2:	15 96       	adiw	r26, 0x05	; 5
    9fb4:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9fb6:	b5 01       	movw	r22, r10
    9fb8:	76 2f       	mov	r23, r22
    9fba:	66 27       	eor	r22, r22
    9fbc:	77 0f       	add	r23, r23
    9fbe:	48 c0       	rjmp	.+144    	; 0xa050 <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    9fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    9fc4:	c6 8a       	std	Z+22, r12	; 0x16
    9fc6:	d7 8a       	std	Z+23, r13	; 0x17
    9fc8:	e0 8e       	std	Z+24, r14	; 0x18
    9fca:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9fcc:	8f 5f       	subi	r24, 0xFF	; 255
    9fce:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9fd0:	ab 81       	ldd	r26, Y+3	; 0x03
    9fd2:	bc 81       	ldd	r27, Y+4	; 0x04
    9fd4:	16 96       	adiw	r26, 0x06	; 6
    9fd6:	cd 90       	ld	r12, X+
    9fd8:	dd 90       	ld	r13, X+
    9fda:	ed 90       	ld	r14, X+
    9fdc:	fc 90       	ld	r15, X
    9fde:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9fe0:	56 96       	adiw	r26, 0x16	; 22
    9fe2:	4d 91       	ld	r20, X+
    9fe4:	5d 91       	ld	r21, X+
    9fe6:	6d 91       	ld	r22, X+
    9fe8:	7c 91       	ld	r23, X
    9fea:	59 97       	sbiw	r26, 0x19	; 25
    9fec:	8d 91       	ld	r24, X+
    9fee:	9c 91       	ld	r25, X
    9ff0:	0e 94 86 39 	call	0x730c	; 0x730c <move_window>
    9ff4:	89 2b       	or	r24, r25
    9ff6:	49 f0       	breq	.+18     	; 0xa00a <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    9ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    9ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    9ffc:	84 81       	ldd	r24, Z+4	; 0x04
    9ffe:	80 68       	ori	r24, 0x80	; 128
    a000:	84 83       	std	Z+4, r24	; 0x04
    a002:	81 e0       	ldi	r24, 0x01	; 1
    a004:	88 2e       	mov	r8, r24
    a006:	91 2c       	mov	r9, r1
    a008:	44 c0       	rjmp	.+136    	; 0xa092 <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a00a:	c6 01       	movw	r24, r12
    a00c:	91 70       	andi	r25, 0x01	; 1
    a00e:	20 e0       	ldi	r18, 0x00	; 0
    a010:	32 e0       	ldi	r19, 0x02	; 2
    a012:	28 1b       	sub	r18, r24
    a014:	39 0b       	sbc	r19, r25
    a016:	b3 01       	movw	r22, r6
    a018:	26 15       	cp	r18, r6
    a01a:	37 05       	cpc	r19, r7
    a01c:	08 f4       	brcc	.+2      	; 0xa020 <f_read+0x2d8>
    a01e:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    a020:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    a022:	ab 81       	ldd	r26, Y+3	; 0x03
    a024:	bc 81       	ldd	r27, Y+4	; 0x04
    a026:	16 96       	adiw	r26, 0x06	; 6
    a028:	8d 91       	ld	r24, X+
    a02a:	9c 91       	ld	r25, X
    a02c:	17 97       	sbiw	r26, 0x07	; 7
    a02e:	91 70       	andi	r25, 0x01	; 1
    a030:	c2 96       	adiw	r24, 0x32	; 50
    a032:	ed 91       	ld	r30, X+
    a034:	fc 91       	ld	r31, X
    a036:	e8 0f       	add	r30, r24
    a038:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    a03a:	9f 01       	movw	r18, r30
    a03c:	26 0f       	add	r18, r22
    a03e:	37 1f       	adc	r19, r23
    a040:	04 c0       	rjmp	.+8      	; 0xa04a <f_read+0x302>
    a042:	81 91       	ld	r24, Z+
    a044:	da 01       	movw	r26, r20
    a046:	8d 93       	st	X+, r24
    a048:	ad 01       	movw	r20, r26
    a04a:	e2 17       	cp	r30, r18
    a04c:	f3 07       	cpc	r31, r19
    a04e:	c9 f7       	brne	.-14     	; 0xa042 <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a050:	46 0e       	add	r4, r22
    a052:	57 1e       	adc	r5, r23
    a054:	cb 01       	movw	r24, r22
    a056:	a0 e0       	ldi	r26, 0x00	; 0
    a058:	b0 e0       	ldi	r27, 0x00	; 0
    a05a:	eb 81       	ldd	r30, Y+3	; 0x03
    a05c:	fc 81       	ldd	r31, Y+4	; 0x04
    a05e:	26 81       	ldd	r18, Z+6	; 0x06
    a060:	37 81       	ldd	r19, Z+7	; 0x07
    a062:	40 85       	ldd	r20, Z+8	; 0x08
    a064:	51 85       	ldd	r21, Z+9	; 0x09
    a066:	28 0f       	add	r18, r24
    a068:	39 1f       	adc	r19, r25
    a06a:	4a 1f       	adc	r20, r26
    a06c:	5b 1f       	adc	r21, r27
    a06e:	26 83       	std	Z+6, r18	; 0x06
    a070:	37 83       	std	Z+7, r19	; 0x07
    a072:	40 87       	std	Z+8, r20	; 0x08
    a074:	51 87       	std	Z+9, r21	; 0x09
    a076:	e9 81       	ldd	r30, Y+1	; 0x01
    a078:	fa 81       	ldd	r31, Y+2	; 0x02
    a07a:	80 81       	ld	r24, Z
    a07c:	91 81       	ldd	r25, Z+1	; 0x01
    a07e:	86 0f       	add	r24, r22
    a080:	97 1f       	adc	r25, r23
    a082:	80 83       	st	Z, r24
    a084:	91 83       	std	Z+1, r25	; 0x01
    a086:	66 1a       	sub	r6, r22
    a088:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    a08a:	61 14       	cp	r6, r1
    a08c:	71 04       	cpc	r7, r1
    a08e:	09 f0       	breq	.+2      	; 0xa092 <f_read+0x34a>
    a090:	9e ce       	rjmp	.-708    	; 0x9dce <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    a092:	c4 01       	movw	r24, r8
    a094:	24 96       	adiw	r28, 0x04	; 4
    a096:	e1 e1       	ldi	r30, 0x11	; 17
    a098:	0c 94 3b 59 	jmp	0xb276	; 0xb276 <__epilogue_restores__+0x2>

0000a09c <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    a09c:	a2 e0       	ldi	r26, 0x02	; 2
    a09e:	b0 e0       	ldi	r27, 0x00	; 0
    a0a0:	e4 e5       	ldi	r30, 0x54	; 84
    a0a2:	f0 e5       	ldi	r31, 0x50	; 80
    a0a4:	0c 94 22 59 	jmp	0xb244	; 0xb244 <__prologue_saves__+0x8>
    a0a8:	6c 01       	movw	r12, r24
    a0aa:	5b 01       	movw	r10, r22
    a0ac:	4a 01       	movw	r8, r20
    a0ae:	8c 01       	movw	r16, r24
    a0b0:	ee 24       	eor	r14, r14
    a0b2:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a0b4:	08 94       	sec
    a0b6:	a1 08       	sbc	r10, r1
    a0b8:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    a0ba:	3e 01       	movw	r6, r28
    a0bc:	08 94       	sec
    a0be:	61 1c       	adc	r6, r1
    a0c0:	71 1c       	adc	r7, r1
    a0c2:	16 c0       	rjmp	.+44     	; 0xa0f0 <f_gets+0x54>
    a0c4:	c4 01       	movw	r24, r8
    a0c6:	b8 01       	movw	r22, r16
    a0c8:	41 e0       	ldi	r20, 0x01	; 1
    a0ca:	50 e0       	ldi	r21, 0x00	; 0
    a0cc:	93 01       	movw	r18, r6
    a0ce:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    a0d2:	89 81       	ldd	r24, Y+1	; 0x01
    a0d4:	9a 81       	ldd	r25, Y+2	; 0x02
    a0d6:	01 97       	sbiw	r24, 0x01	; 1
    a0d8:	71 f4       	brne	.+28     	; 0xa0f6 <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    a0da:	f8 01       	movw	r30, r16
    a0dc:	80 81       	ld	r24, Z
    a0de:	8d 30       	cpi	r24, 0x0D	; 13
    a0e0:	39 f0       	breq	.+14     	; 0xa0f0 <f_gets+0x54>
#endif
		i++;
    a0e2:	08 94       	sec
    a0e4:	e1 1c       	adc	r14, r1
    a0e6:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    a0e8:	0f 5f       	subi	r16, 0xFF	; 255
    a0ea:	1f 4f       	sbci	r17, 0xFF	; 255
    a0ec:	8a 30       	cpi	r24, 0x0A	; 10
    a0ee:	19 f0       	breq	.+6      	; 0xa0f6 <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a0f0:	ea 14       	cp	r14, r10
    a0f2:	fb 04       	cpc	r15, r11
    a0f4:	3c f3       	brlt	.-50     	; 0xa0c4 <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    a0f6:	f8 01       	movw	r30, r16
    a0f8:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    a0fa:	e1 14       	cp	r14, r1
    a0fc:	f1 04       	cpc	r15, r1
    a0fe:	11 f4       	brne	.+4      	; 0xa104 <f_gets+0x68>
    a100:	cc 24       	eor	r12, r12
    a102:	dd 24       	eor	r13, r13
}
    a104:	c6 01       	movw	r24, r12
    a106:	22 96       	adiw	r28, 0x02	; 2
    a108:	ee e0       	ldi	r30, 0x0E	; 14
    a10a:	0c 94 3e 59 	jmp	0xb27c	; 0xb27c <__epilogue_restores__+0x8>

0000a10e <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    a10e:	82 e3       	ldi	r24, 0x32	; 50
    a110:	80 93 77 25 	sts	0x2577, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a114:	8f ef       	ldi	r24, 0xFF	; 255
    a116:	e0 ec       	ldi	r30, 0xC0	; 192
    a118:	fa e0       	ldi	r31, 0x0A	; 10
    a11a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a11c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a120:	87 ff       	sbrs	r24, 7
    a122:	fc cf       	rjmp	.-8      	; 0xa11c <wait_ready+0xe>
  return SPIE.DATA;
    a124:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a128:	e0 ec       	ldi	r30, 0xC0	; 192
    a12a:	fa e0       	ldi	r31, 0x0A	; 10
    a12c:	2f ef       	ldi	r18, 0xFF	; 255
    a12e:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a130:	80 91 c2 0a 	lds	r24, 0x0AC2
    a134:	87 ff       	sbrs	r24, 7
    a136:	fc cf       	rjmp	.-8      	; 0xa130 <wait_ready+0x22>
  return SPIE.DATA;
    a138:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    a13c:	9f 3f       	cpi	r25, 0xFF	; 255
    a13e:	21 f0       	breq	.+8      	; 0xa148 <wait_ready+0x3a>
    a140:	80 91 77 25 	lds	r24, 0x2577
    a144:	88 23       	and	r24, r24
    a146:	99 f7       	brne	.-26     	; 0xa12e <wait_ready+0x20>

  return res;
}
    a148:	89 2f       	mov	r24, r25
    a14a:	08 95       	ret

0000a14c <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    a14c:	ff 92       	push	r15
    a14e:	0f 93       	push	r16
    a150:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    a152:	00 e8       	ldi	r16, 0x80	; 128
    a154:	16 e0       	ldi	r17, 0x06	; 6
    a156:	80 e1       	ldi	r24, 0x10	; 16
    a158:	f8 2e       	mov	r15, r24
    a15a:	f8 01       	movw	r30, r16
    a15c:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    a15e:	0e 94 87 50 	call	0xa10e	; 0xa10e <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a162:	f8 01       	movw	r30, r16
    a164:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a166:	8f ef       	ldi	r24, 0xFF	; 255
    a168:	e0 ec       	ldi	r30, 0xC0	; 192
    a16a:	fa e0       	ldi	r31, 0x0A	; 10
    a16c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a16e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a172:	87 ff       	sbrs	r24, 7
    a174:	fc cf       	rjmp	.-8      	; 0xa16e <power_off+0x22>
  return SPIE.DATA;
    a176:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    a17a:	80 91 de 24 	lds	r24, 0x24DE
    a17e:	81 60       	ori	r24, 0x01	; 1
    a180:	80 93 de 24 	sts	0x24DE, r24
}
    a184:	1f 91       	pop	r17
    a186:	0f 91       	pop	r16
    a188:	ff 90       	pop	r15
    a18a:	08 95       	ret

0000a18c <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a18c:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    a18e:	84 e1       	ldi	r24, 0x14	; 20
    a190:	80 93 76 25 	sts	0x2576, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a194:	a0 ec       	ldi	r26, 0xC0	; 192
    a196:	ba e0       	ldi	r27, 0x0A	; 10
    a198:	9f ef       	ldi	r25, 0xFF	; 255
    a19a:	13 96       	adiw	r26, 0x03	; 3
    a19c:	9c 93       	st	X, r25
    a19e:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a1a0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1a4:	87 ff       	sbrs	r24, 7
    a1a6:	fc cf       	rjmp	.-8      	; 0xa1a0 <rcvr_datablock+0x14>
  return SPIE.DATA;
    a1a8:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    a1ac:	8f 3f       	cpi	r24, 0xFF	; 255
    a1ae:	29 f4       	brne	.+10     	; 0xa1ba <rcvr_datablock+0x2e>
    a1b0:	80 91 76 25 	lds	r24, 0x2576
    a1b4:	88 23       	and	r24, r24
    a1b6:	89 f7       	brne	.-30     	; 0xa19a <rcvr_datablock+0xe>
    a1b8:	4a c0       	rjmp	.+148    	; 0xa24e <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    a1ba:	8e 3f       	cpi	r24, 0xFE	; 254
    a1bc:	09 f0       	breq	.+2      	; 0xa1c0 <rcvr_datablock+0x34>
    a1be:	47 c0       	rjmp	.+142    	; 0xa24e <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    a1c0:	a0 ec       	ldi	r26, 0xC0	; 192
    a1c2:	ba e0       	ldi	r27, 0x0A	; 10
    a1c4:	9f ef       	ldi	r25, 0xFF	; 255
    a1c6:	13 96       	adiw	r26, 0x03	; 3
    a1c8:	9c 93       	st	X, r25
    a1ca:	13 97       	sbiw	r26, 0x03	; 3
    a1cc:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1d0:	87 ff       	sbrs	r24, 7
    a1d2:	fc cf       	rjmp	.-8      	; 0xa1cc <rcvr_datablock+0x40>
    a1d4:	80 91 c3 0a 	lds	r24, 0x0AC3
    a1d8:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    a1da:	13 96       	adiw	r26, 0x03	; 3
    a1dc:	9c 93       	st	X, r25
    a1de:	13 97       	sbiw	r26, 0x03	; 3
    a1e0:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1e4:	87 ff       	sbrs	r24, 7
    a1e6:	fc cf       	rjmp	.-8      	; 0xa1e0 <rcvr_datablock+0x54>
    a1e8:	80 91 c3 0a 	lds	r24, 0x0AC3
    a1ec:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    a1ee:	13 96       	adiw	r26, 0x03	; 3
    a1f0:	9c 93       	st	X, r25
    a1f2:	13 97       	sbiw	r26, 0x03	; 3
    a1f4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a1f8:	87 ff       	sbrs	r24, 7
    a1fa:	fc cf       	rjmp	.-8      	; 0xa1f4 <rcvr_datablock+0x68>
    a1fc:	80 91 c3 0a 	lds	r24, 0x0AC3
    a200:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    a202:	13 96       	adiw	r26, 0x03	; 3
    a204:	9c 93       	st	X, r25
    a206:	13 97       	sbiw	r26, 0x03	; 3
    a208:	80 91 c2 0a 	lds	r24, 0x0AC2
    a20c:	87 ff       	sbrs	r24, 7
    a20e:	fc cf       	rjmp	.-8      	; 0xa208 <rcvr_datablock+0x7c>
    a210:	80 91 c3 0a 	lds	r24, 0x0AC3
    a214:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    a216:	64 50       	subi	r22, 0x04	; 4
    a218:	70 40       	sbci	r23, 0x00	; 0
    a21a:	11 f0       	breq	.+4      	; 0xa220 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a21c:	34 96       	adiw	r30, 0x04	; 4
    a21e:	d3 cf       	rjmp	.-90     	; 0xa1c6 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a220:	8f ef       	ldi	r24, 0xFF	; 255
    a222:	e0 ec       	ldi	r30, 0xC0	; 192
    a224:	fa e0       	ldi	r31, 0x0A	; 10
    a226:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a228:	80 91 c2 0a 	lds	r24, 0x0AC2
    a22c:	87 ff       	sbrs	r24, 7
    a22e:	fc cf       	rjmp	.-8      	; 0xa228 <rcvr_datablock+0x9c>
  return SPIE.DATA;
    a230:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a234:	8f ef       	ldi	r24, 0xFF	; 255
    a236:	e0 ec       	ldi	r30, 0xC0	; 192
    a238:	fa e0       	ldi	r31, 0x0A	; 10
    a23a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a23c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a240:	87 ff       	sbrs	r24, 7
    a242:	fc cf       	rjmp	.-8      	; 0xa23c <rcvr_datablock+0xb0>
  return SPIE.DATA;
    a244:	80 91 c3 0a 	lds	r24, 0x0AC3
    a248:	21 e0       	ldi	r18, 0x01	; 1
    a24a:	30 e0       	ldi	r19, 0x00	; 0
    a24c:	02 c0       	rjmp	.+4      	; 0xa252 <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    a24e:	20 e0       	ldi	r18, 0x00	; 0
    a250:	30 e0       	ldi	r19, 0x00	; 0
}
    a252:	c9 01       	movw	r24, r18
    a254:	08 95       	ret

0000a256 <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a256:	1f 93       	push	r17
    a258:	cf 93       	push	r28
    a25a:	df 93       	push	r29
    a25c:	ec 01       	movw	r28, r24
    a25e:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    a260:	0e 94 87 50 	call	0xa10e	; 0xa10e <wait_ready>
    a264:	8f 3f       	cpi	r24, 0xFF	; 255
    a266:	19 f0       	breq	.+6      	; 0xa26e <xmit_datablock+0x18>
    a268:	20 e0       	ldi	r18, 0x00	; 0
    a26a:	30 e0       	ldi	r19, 0x00	; 0
    a26c:	42 c0       	rjmp	.+132    	; 0xa2f2 <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    a26e:	e0 ec       	ldi	r30, 0xC0	; 192
    a270:	fa e0       	ldi	r31, 0x0A	; 10
    a272:	13 83       	std	Z+3, r17	; 0x03
    a274:	80 91 c2 0a 	lds	r24, 0x0AC2
    a278:	87 ff       	sbrs	r24, 7
    a27a:	fc cf       	rjmp	.-8      	; 0xa274 <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    a27c:	1d 3f       	cpi	r17, 0xFD	; 253
    a27e:	19 f4       	brne	.+6      	; 0xa286 <xmit_datablock+0x30>
    a280:	21 e0       	ldi	r18, 0x01	; 1
    a282:	30 e0       	ldi	r19, 0x00	; 0
    a284:	36 c0       	rjmp	.+108    	; 0xa2f2 <xmit_datablock+0x9c>
    a286:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    a288:	e0 ec       	ldi	r30, 0xC0	; 192
    a28a:	fa e0       	ldi	r31, 0x0A	; 10
    a28c:	88 81       	ld	r24, Y
    a28e:	83 83       	std	Z+3, r24	; 0x03
    a290:	80 91 c2 0a 	lds	r24, 0x0AC2
    a294:	87 ff       	sbrs	r24, 7
    a296:	fc cf       	rjmp	.-8      	; 0xa290 <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    a298:	89 81       	ldd	r24, Y+1	; 0x01
    a29a:	83 83       	std	Z+3, r24	; 0x03
    a29c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2a0:	87 ff       	sbrs	r24, 7
    a2a2:	fc cf       	rjmp	.-8      	; 0xa29c <xmit_datablock+0x46>
    } while (--wc);
    a2a4:	91 50       	subi	r25, 0x01	; 1
    a2a6:	11 f0       	breq	.+4      	; 0xa2ac <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a2a8:	22 96       	adiw	r28, 0x02	; 2
    a2aa:	f0 cf       	rjmp	.-32     	; 0xa28c <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    a2ac:	8f ef       	ldi	r24, 0xFF	; 255
    a2ae:	e0 ec       	ldi	r30, 0xC0	; 192
    a2b0:	fa e0       	ldi	r31, 0x0A	; 10
    a2b2:	83 83       	std	Z+3, r24	; 0x03
    a2b4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2b8:	87 ff       	sbrs	r24, 7
    a2ba:	fc cf       	rjmp	.-8      	; 0xa2b4 <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    a2bc:	8f ef       	ldi	r24, 0xFF	; 255
    a2be:	e0 ec       	ldi	r30, 0xC0	; 192
    a2c0:	fa e0       	ldi	r31, 0x0A	; 10
    a2c2:	83 83       	std	Z+3, r24	; 0x03
    a2c4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2c8:	87 ff       	sbrs	r24, 7
    a2ca:	fc cf       	rjmp	.-8      	; 0xa2c4 <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a2cc:	8f ef       	ldi	r24, 0xFF	; 255
    a2ce:	e0 ec       	ldi	r30, 0xC0	; 192
    a2d0:	fa e0       	ldi	r31, 0x0A	; 10
    a2d2:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a2d4:	80 91 c2 0a 	lds	r24, 0x0AC2
    a2d8:	87 ff       	sbrs	r24, 7
    a2da:	fc cf       	rjmp	.-8      	; 0xa2d4 <xmit_datablock+0x7e>
  return SPIE.DATA;
    a2dc:	80 91 c3 0a 	lds	r24, 0x0AC3
    a2e0:	90 e0       	ldi	r25, 0x00	; 0
    a2e2:	8f 71       	andi	r24, 0x1F	; 31
    a2e4:	85 30       	cpi	r24, 0x05	; 5
    a2e6:	09 f0       	breq	.+2      	; 0xa2ea <xmit_datablock+0x94>
    a2e8:	91 e0       	ldi	r25, 0x01	; 1
    a2ea:	81 e0       	ldi	r24, 0x01	; 1
    a2ec:	98 27       	eor	r25, r24
    a2ee:	29 2f       	mov	r18, r25
    a2f0:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    a2f2:	c9 01       	movw	r24, r18
    a2f4:	df 91       	pop	r29
    a2f6:	cf 91       	pop	r28
    a2f8:	1f 91       	pop	r17
    a2fa:	08 95       	ret

0000a2fc <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a2fc:	df 92       	push	r13
    a2fe:	ef 92       	push	r14
    a300:	ff 92       	push	r15
    a302:	0f 93       	push	r16
    a304:	1f 93       	push	r17
    a306:	d8 2e       	mov	r13, r24
    a308:	7a 01       	movw	r14, r20
    a30a:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a30c:	87 ff       	sbrs	r24, 7
    a30e:	0c c0       	rjmp	.+24     	; 0xa328 <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a310:	87 e7       	ldi	r24, 0x77	; 119
    a312:	40 e0       	ldi	r20, 0x00	; 0
    a314:	50 e0       	ldi	r21, 0x00	; 0
    a316:	60 e0       	ldi	r22, 0x00	; 0
    a318:	70 e0       	ldi	r23, 0x00	; 0
    a31a:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    if (res > 1) return res;
    a31e:	82 30       	cpi	r24, 0x02	; 2
    a320:	08 f0       	brcs	.+2      	; 0xa324 <send_cmd+0x28>
    a322:	69 c0       	rjmp	.+210    	; 0xa3f6 <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a324:	8f e7       	ldi	r24, 0x7F	; 127
    a326:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a328:	e0 e8       	ldi	r30, 0x80	; 128
    a32a:	f6 e0       	ldi	r31, 0x06	; 6
    a32c:	80 e1       	ldi	r24, 0x10	; 16
    a32e:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a330:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a332:	0e 94 87 50 	call	0xa10e	; 0xa10e <wait_ready>
    a336:	8f 3f       	cpi	r24, 0xFF	; 255
    a338:	11 f0       	breq	.+4      	; 0xa33e <send_cmd+0x42>
    a33a:	8f ef       	ldi	r24, 0xFF	; 255
    a33c:	5c c0       	rjmp	.+184    	; 0xa3f6 <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a33e:	e0 ec       	ldi	r30, 0xC0	; 192
    a340:	fa e0       	ldi	r31, 0x0A	; 10
    a342:	d3 82       	std	Z+3, r13	; 0x03
    a344:	80 91 c2 0a 	lds	r24, 0x0AC2
    a348:	87 ff       	sbrs	r24, 7
    a34a:	fc cf       	rjmp	.-8      	; 0xa344 <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a34c:	81 2f       	mov	r24, r17
    a34e:	99 27       	eor	r25, r25
    a350:	aa 27       	eor	r26, r26
    a352:	bb 27       	eor	r27, r27
    a354:	e0 ec       	ldi	r30, 0xC0	; 192
    a356:	fa e0       	ldi	r31, 0x0A	; 10
    a358:	83 83       	std	Z+3, r24	; 0x03
    a35a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a35e:	87 ff       	sbrs	r24, 7
    a360:	fc cf       	rjmp	.-8      	; 0xa35a <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a362:	c8 01       	movw	r24, r16
    a364:	aa 27       	eor	r26, r26
    a366:	bb 27       	eor	r27, r27
    a368:	e0 ec       	ldi	r30, 0xC0	; 192
    a36a:	fa e0       	ldi	r31, 0x0A	; 10
    a36c:	83 83       	std	Z+3, r24	; 0x03
    a36e:	80 91 c2 0a 	lds	r24, 0x0AC2
    a372:	87 ff       	sbrs	r24, 7
    a374:	fc cf       	rjmp	.-8      	; 0xa36e <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a376:	bb 27       	eor	r27, r27
    a378:	a1 2f       	mov	r26, r17
    a37a:	90 2f       	mov	r25, r16
    a37c:	8f 2d       	mov	r24, r15
    a37e:	e0 ec       	ldi	r30, 0xC0	; 192
    a380:	fa e0       	ldi	r31, 0x0A	; 10
    a382:	83 83       	std	Z+3, r24	; 0x03
    a384:	80 91 c2 0a 	lds	r24, 0x0AC2
    a388:	87 ff       	sbrs	r24, 7
    a38a:	fc cf       	rjmp	.-8      	; 0xa384 <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a38c:	e0 ec       	ldi	r30, 0xC0	; 192
    a38e:	fa e0       	ldi	r31, 0x0A	; 10
    a390:	e3 82       	std	Z+3, r14	; 0x03
    a392:	80 91 c2 0a 	lds	r24, 0x0AC2
    a396:	87 ff       	sbrs	r24, 7
    a398:	fc cf       	rjmp	.-8      	; 0xa392 <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a39a:	80 e4       	ldi	r24, 0x40	; 64
    a39c:	d8 16       	cp	r13, r24
    a39e:	11 f4       	brne	.+4      	; 0xa3a4 <send_cmd+0xa8>
    a3a0:	85 e9       	ldi	r24, 0x95	; 149
    a3a2:	06 c0       	rjmp	.+12     	; 0xa3b0 <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a3a4:	88 e4       	ldi	r24, 0x48	; 72
    a3a6:	d8 16       	cp	r13, r24
    a3a8:	11 f4       	brne	.+4      	; 0xa3ae <send_cmd+0xb2>
    a3aa:	87 e8       	ldi	r24, 0x87	; 135
    a3ac:	01 c0       	rjmp	.+2      	; 0xa3b0 <send_cmd+0xb4>
    a3ae:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a3b0:	e0 ec       	ldi	r30, 0xC0	; 192
    a3b2:	fa e0       	ldi	r31, 0x0A	; 10
    a3b4:	83 83       	std	Z+3, r24	; 0x03
    a3b6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a3ba:	87 ff       	sbrs	r24, 7
    a3bc:	fc cf       	rjmp	.-8      	; 0xa3b6 <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a3be:	8c e4       	ldi	r24, 0x4C	; 76
    a3c0:	d8 16       	cp	r13, r24
    a3c2:	51 f4       	brne	.+20     	; 0xa3d8 <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a3c4:	8f ef       	ldi	r24, 0xFF	; 255
    a3c6:	e0 ec       	ldi	r30, 0xC0	; 192
    a3c8:	fa e0       	ldi	r31, 0x0A	; 10
    a3ca:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a3cc:	80 91 c2 0a 	lds	r24, 0x0AC2
    a3d0:	87 ff       	sbrs	r24, 7
    a3d2:	fc cf       	rjmp	.-8      	; 0xa3cc <send_cmd+0xd0>
  return SPIE.DATA;
    a3d4:	80 91 c3 0a 	lds	r24, 0x0AC3
    a3d8:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a3da:	e0 ec       	ldi	r30, 0xC0	; 192
    a3dc:	fa e0       	ldi	r31, 0x0A	; 10
    a3de:	2f ef       	ldi	r18, 0xFF	; 255
    a3e0:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a3e2:	80 91 c2 0a 	lds	r24, 0x0AC2
    a3e6:	87 ff       	sbrs	r24, 7
    a3e8:	fc cf       	rjmp	.-8      	; 0xa3e2 <send_cmd+0xe6>
  return SPIE.DATA;
    a3ea:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a3ee:	87 ff       	sbrs	r24, 7
    a3f0:	02 c0       	rjmp	.+4      	; 0xa3f6 <send_cmd+0xfa>
    a3f2:	91 50       	subi	r25, 0x01	; 1
    a3f4:	a9 f7       	brne	.-22     	; 0xa3e0 <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a3f6:	1f 91       	pop	r17
    a3f8:	0f 91       	pop	r16
    a3fa:	ff 90       	pop	r15
    a3fc:	ef 90       	pop	r14
    a3fe:	df 90       	pop	r13
    a400:	08 95       	ret

0000a402 <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a402:	88 23       	and	r24, r24
    a404:	11 f0       	breq	.+4      	; 0xa40a <disk_status+0x8>
    a406:	81 e0       	ldi	r24, 0x01	; 1
    a408:	08 95       	ret
  return Stat;
    a40a:	80 91 de 24 	lds	r24, 0x24DE
}
    a40e:	08 95       	ret

0000a410 <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a410:	0f 93       	push	r16
    a412:	cf 93       	push	r28
    a414:	df 93       	push	r29
    a416:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a418:	88 23       	and	r24, r24
    a41a:	09 f0       	breq	.+2      	; 0xa41e <disk_read+0xe>
    a41c:	57 c0       	rjmp	.+174    	; 0xa4cc <disk_read+0xbc>
    a41e:	00 23       	and	r16, r16
    a420:	09 f4       	brne	.+2      	; 0xa424 <disk_read+0x14>
    a422:	54 c0       	rjmp	.+168    	; 0xa4cc <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a424:	80 91 de 24 	lds	r24, 0x24DE
    a428:	80 ff       	sbrs	r24, 0
    a42a:	03 c0       	rjmp	.+6      	; 0xa432 <disk_read+0x22>
    a42c:	23 e0       	ldi	r18, 0x03	; 3
    a42e:	30 e0       	ldi	r19, 0x00	; 0
    a430:	4f c0       	rjmp	.+158    	; 0xa4d0 <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a432:	80 91 78 25 	lds	r24, 0x2578
    a436:	83 fd       	sbrc	r24, 3
    a438:	07 c0       	rjmp	.+14     	; 0xa448 <disk_read+0x38>
    a43a:	69 e0       	ldi	r22, 0x09	; 9
    a43c:	22 0f       	add	r18, r18
    a43e:	33 1f       	adc	r19, r19
    a440:	44 1f       	adc	r20, r20
    a442:	55 1f       	adc	r21, r21
    a444:	6a 95       	dec	r22
    a446:	d1 f7       	brne	.-12     	; 0xa43c <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a448:	01 30       	cpi	r16, 0x01	; 1
    a44a:	89 f4       	brne	.+34     	; 0xa46e <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a44c:	81 e5       	ldi	r24, 0x51	; 81
    a44e:	ba 01       	movw	r22, r20
    a450:	a9 01       	movw	r20, r18
    a452:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a456:	88 23       	and	r24, r24
    a458:	21 f5       	brne	.+72     	; 0xa4a2 <disk_read+0x92>
    a45a:	ce 01       	movw	r24, r28
    a45c:	60 e0       	ldi	r22, 0x00	; 0
    a45e:	72 e0       	ldi	r23, 0x02	; 2
    a460:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a464:	00 e0       	ldi	r16, 0x00	; 0
    a466:	89 2b       	or	r24, r25
    a468:	e1 f4       	brne	.+56     	; 0xa4a2 <disk_read+0x92>
    a46a:	01 e0       	ldi	r16, 0x01	; 1
    a46c:	1a c0       	rjmp	.+52     	; 0xa4a2 <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a46e:	82 e5       	ldi	r24, 0x52	; 82
    a470:	ba 01       	movw	r22, r20
    a472:	a9 01       	movw	r20, r18
    a474:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a478:	88 23       	and	r24, r24
    a47a:	99 f4       	brne	.+38     	; 0xa4a2 <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a47c:	ce 01       	movw	r24, r28
    a47e:	60 e0       	ldi	r22, 0x00	; 0
    a480:	72 e0       	ldi	r23, 0x02	; 2
    a482:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a486:	89 2b       	or	r24, r25
    a488:	29 f0       	breq	.+10     	; 0xa494 <disk_read+0x84>
        buff += 512;
      } while (--count);
    a48a:	01 50       	subi	r16, 0x01	; 1
    a48c:	19 f0       	breq	.+6      	; 0xa494 <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a48e:	c0 50       	subi	r28, 0x00	; 0
    a490:	de 4f       	sbci	r29, 0xFE	; 254
    a492:	f4 cf       	rjmp	.-24     	; 0xa47c <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a494:	8c e4       	ldi	r24, 0x4C	; 76
    a496:	40 e0       	ldi	r20, 0x00	; 0
    a498:	50 e0       	ldi	r21, 0x00	; 0
    a49a:	60 e0       	ldi	r22, 0x00	; 0
    a49c:	70 e0       	ldi	r23, 0x00	; 0
    a49e:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a4a2:	80 e1       	ldi	r24, 0x10	; 16
    a4a4:	e0 e8       	ldi	r30, 0x80	; 128
    a4a6:	f6 e0       	ldi	r31, 0x06	; 6
    a4a8:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a4aa:	8f ef       	ldi	r24, 0xFF	; 255
    a4ac:	e0 ec       	ldi	r30, 0xC0	; 192
    a4ae:	fa e0       	ldi	r31, 0x0A	; 10
    a4b0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a4b2:	80 91 c2 0a 	lds	r24, 0x0AC2
    a4b6:	87 ff       	sbrs	r24, 7
    a4b8:	fc cf       	rjmp	.-8      	; 0xa4b2 <disk_read+0xa2>
  return SPIE.DATA;
    a4ba:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a4be:	20 e0       	ldi	r18, 0x00	; 0
    a4c0:	30 e0       	ldi	r19, 0x00	; 0
    a4c2:	00 23       	and	r16, r16
    a4c4:	29 f0       	breq	.+10     	; 0xa4d0 <disk_read+0xc0>
    a4c6:	21 e0       	ldi	r18, 0x01	; 1
    a4c8:	30 e0       	ldi	r19, 0x00	; 0
    a4ca:	02 c0       	rjmp	.+4      	; 0xa4d0 <disk_read+0xc0>
    a4cc:	24 e0       	ldi	r18, 0x04	; 4
    a4ce:	30 e0       	ldi	r19, 0x00	; 0
}
    a4d0:	c9 01       	movw	r24, r18
    a4d2:	df 91       	pop	r29
    a4d4:	cf 91       	pop	r28
    a4d6:	0f 91       	pop	r16
    a4d8:	08 95       	ret

0000a4da <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a4da:	cf 92       	push	r12
    a4dc:	df 92       	push	r13
    a4de:	ef 92       	push	r14
    a4e0:	ff 92       	push	r15
    a4e2:	0f 93       	push	r16
    a4e4:	cf 93       	push	r28
    a4e6:	df 93       	push	r29
    a4e8:	eb 01       	movw	r28, r22
    a4ea:	69 01       	movw	r12, r18
    a4ec:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a4ee:	88 23       	and	r24, r24
    a4f0:	09 f0       	breq	.+2      	; 0xa4f4 <disk_write+0x1a>
    a4f2:	66 c0       	rjmp	.+204    	; 0xa5c0 <disk_write+0xe6>
    a4f4:	00 23       	and	r16, r16
    a4f6:	09 f4       	brne	.+2      	; 0xa4fa <disk_write+0x20>
    a4f8:	63 c0       	rjmp	.+198    	; 0xa5c0 <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a4fa:	80 91 de 24 	lds	r24, 0x24DE
    a4fe:	80 ff       	sbrs	r24, 0
    a500:	03 c0       	rjmp	.+6      	; 0xa508 <disk_write+0x2e>
    a502:	23 e0       	ldi	r18, 0x03	; 3
    a504:	30 e0       	ldi	r19, 0x00	; 0
    a506:	5e c0       	rjmp	.+188    	; 0xa5c4 <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a508:	80 91 de 24 	lds	r24, 0x24DE
    a50c:	82 ff       	sbrs	r24, 2
    a50e:	03 c0       	rjmp	.+6      	; 0xa516 <disk_write+0x3c>
    a510:	22 e0       	ldi	r18, 0x02	; 2
    a512:	30 e0       	ldi	r19, 0x00	; 0
    a514:	57 c0       	rjmp	.+174    	; 0xa5c4 <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a516:	80 91 78 25 	lds	r24, 0x2578
    a51a:	90 e0       	ldi	r25, 0x00	; 0
    a51c:	83 fd       	sbrc	r24, 3
    a51e:	07 c0       	rjmp	.+14     	; 0xa52e <disk_write+0x54>
    a520:	79 e0       	ldi	r23, 0x09	; 9
    a522:	cc 0c       	add	r12, r12
    a524:	dd 1c       	adc	r13, r13
    a526:	ee 1c       	adc	r14, r14
    a528:	ff 1c       	adc	r15, r15
    a52a:	7a 95       	dec	r23
    a52c:	d1 f7       	brne	.-12     	; 0xa522 <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    a52e:	01 30       	cpi	r16, 0x01	; 1
    a530:	69 f4       	brne	.+26     	; 0xa54c <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    a532:	88 e5       	ldi	r24, 0x58	; 88
    a534:	b7 01       	movw	r22, r14
    a536:	a6 01       	movw	r20, r12
    a538:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a53c:	88 23       	and	r24, r24
    a53e:	59 f5       	brne	.+86     	; 0xa596 <disk_write+0xbc>
    a540:	ce 01       	movw	r24, r28
    a542:	6e ef       	ldi	r22, 0xFE	; 254
    a544:	0e 94 2b 51 	call	0xa256	; 0xa256 <xmit_datablock>
    a548:	00 e0       	ldi	r16, 0x00	; 0
    a54a:	22 c0       	rjmp	.+68     	; 0xa590 <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a54c:	86 70       	andi	r24, 0x06	; 6
    a54e:	90 70       	andi	r25, 0x00	; 0
    a550:	89 2b       	or	r24, r25
    a552:	39 f0       	breq	.+14     	; 0xa562 <disk_write+0x88>
    a554:	40 2f       	mov	r20, r16
    a556:	50 e0       	ldi	r21, 0x00	; 0
    a558:	60 e0       	ldi	r22, 0x00	; 0
    a55a:	70 e0       	ldi	r23, 0x00	; 0
    a55c:	87 ed       	ldi	r24, 0xD7	; 215
    a55e:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    a562:	89 e5       	ldi	r24, 0x59	; 89
    a564:	b7 01       	movw	r22, r14
    a566:	a6 01       	movw	r20, r12
    a568:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a56c:	88 23       	and	r24, r24
    a56e:	99 f4       	brne	.+38     	; 0xa596 <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    a570:	ce 01       	movw	r24, r28
    a572:	6c ef       	ldi	r22, 0xFC	; 252
    a574:	0e 94 2b 51 	call	0xa256	; 0xa256 <xmit_datablock>
    a578:	89 2b       	or	r24, r25
    a57a:	29 f0       	breq	.+10     	; 0xa586 <disk_write+0xac>
        buff += 512;
      } while (--count);
    a57c:	01 50       	subi	r16, 0x01	; 1
    a57e:	19 f0       	breq	.+6      	; 0xa586 <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    a580:	c0 50       	subi	r28, 0x00	; 0
    a582:	de 4f       	sbci	r29, 0xFE	; 254
    a584:	f5 cf       	rjmp	.-22     	; 0xa570 <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    a586:	80 e0       	ldi	r24, 0x00	; 0
    a588:	90 e0       	ldi	r25, 0x00	; 0
    a58a:	6d ef       	ldi	r22, 0xFD	; 253
    a58c:	0e 94 2b 51 	call	0xa256	; 0xa256 <xmit_datablock>
    a590:	89 2b       	or	r24, r25
    a592:	09 f4       	brne	.+2      	; 0xa596 <disk_write+0xbc>
    a594:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a596:	80 e1       	ldi	r24, 0x10	; 16
    a598:	e0 e8       	ldi	r30, 0x80	; 128
    a59a:	f6 e0       	ldi	r31, 0x06	; 6
    a59c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a59e:	8f ef       	ldi	r24, 0xFF	; 255
    a5a0:	e0 ec       	ldi	r30, 0xC0	; 192
    a5a2:	fa e0       	ldi	r31, 0x0A	; 10
    a5a4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5a6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5aa:	87 ff       	sbrs	r24, 7
    a5ac:	fc cf       	rjmp	.-8      	; 0xa5a6 <disk_write+0xcc>
  return SPIE.DATA;
    a5ae:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a5b2:	20 e0       	ldi	r18, 0x00	; 0
    a5b4:	30 e0       	ldi	r19, 0x00	; 0
    a5b6:	00 23       	and	r16, r16
    a5b8:	29 f0       	breq	.+10     	; 0xa5c4 <disk_write+0xea>
    a5ba:	21 e0       	ldi	r18, 0x01	; 1
    a5bc:	30 e0       	ldi	r19, 0x00	; 0
    a5be:	02 c0       	rjmp	.+4      	; 0xa5c4 <disk_write+0xea>
    a5c0:	24 e0       	ldi	r18, 0x04	; 4
    a5c2:	30 e0       	ldi	r19, 0x00	; 0
}
    a5c4:	c9 01       	movw	r24, r18
    a5c6:	df 91       	pop	r29
    a5c8:	cf 91       	pop	r28
    a5ca:	0f 91       	pop	r16
    a5cc:	ff 90       	pop	r15
    a5ce:	ef 90       	pop	r14
    a5d0:	df 90       	pop	r13
    a5d2:	cf 90       	pop	r12
    a5d4:	08 95       	ret

0000a5d6 <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    a5d6:	a0 e1       	ldi	r26, 0x10	; 16
    a5d8:	b0 e0       	ldi	r27, 0x00	; 0
    a5da:	e1 ef       	ldi	r30, 0xF1	; 241
    a5dc:	f2 e5       	ldi	r31, 0x52	; 82
    a5de:	0c 94 2b 59 	jmp	0xb256	; 0xb256 <__prologue_saves__+0x1a>
    a5e2:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    a5e4:	88 23       	and	r24, r24
    a5e6:	09 f0       	breq	.+2      	; 0xa5ea <disk_ioctl+0x14>
    a5e8:	a2 c1       	rjmp	.+836    	; 0xa92e <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    a5ea:	64 30       	cpi	r22, 0x04	; 4
    a5ec:	f1 f4       	brne	.+60     	; 0xa62a <disk_ioctl+0x54>
    switch (*ptr) {
    a5ee:	fa 01       	movw	r30, r20
    a5f0:	80 81       	ld	r24, Z
    a5f2:	81 30       	cpi	r24, 0x01	; 1
    a5f4:	49 f0       	breq	.+18     	; 0xa608 <disk_ioctl+0x32>
    a5f6:	81 30       	cpi	r24, 0x01	; 1
    a5f8:	20 f0       	brcs	.+8      	; 0xa602 <disk_ioctl+0x2c>
    a5fa:	82 30       	cpi	r24, 0x02	; 2
    a5fc:	09 f0       	breq	.+2      	; 0xa600 <disk_ioctl+0x2a>
    a5fe:	97 c1       	rjmp	.+814    	; 0xa92e <disk_ioctl+0x358>
    a600:	0e c0       	rjmp	.+28     	; 0xa61e <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    a602:	0e 94 a6 50 	call	0xa14c	; 0xa14c <power_off>
    a606:	0e c0       	rjmp	.+28     	; 0xa624 <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a608:	83 e0       	ldi	r24, 0x03	; 3
    a60a:	80 93 76 25 	sts	0x2576, r24
    a60e:	80 91 76 25 	lds	r24, 0x2576
    a612:	88 23       	and	r24, r24
    a614:	e1 f7       	brne	.-8      	; 0xa60e <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a616:	83 e5       	ldi	r24, 0x53	; 83
    a618:	80 93 c0 0a 	sts	0x0AC0, r24
    a61c:	03 c0       	rjmp	.+6      	; 0xa624 <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    a61e:	81 e0       	ldi	r24, 0x01	; 1
    a620:	fa 01       	movw	r30, r20
    a622:	81 83       	std	Z+1, r24	; 0x01
    a624:	20 e0       	ldi	r18, 0x00	; 0
    a626:	30 e0       	ldi	r19, 0x00	; 0
    a628:	84 c1       	rjmp	.+776    	; 0xa932 <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    a62a:	80 91 de 24 	lds	r24, 0x24DE
    a62e:	80 ff       	sbrs	r24, 0
    a630:	03 c0       	rjmp	.+6      	; 0xa638 <disk_ioctl+0x62>
    a632:	23 e0       	ldi	r18, 0x03	; 3
    a634:	30 e0       	ldi	r19, 0x00	; 0
    a636:	7d c1       	rjmp	.+762    	; 0xa932 <disk_ioctl+0x35c>

    switch (ctrl) {
    a638:	e6 2f       	mov	r30, r22
    a63a:	f0 e0       	ldi	r31, 0x00	; 0
    a63c:	ef 30       	cpi	r30, 0x0F	; 15
    a63e:	f1 05       	cpc	r31, r1
    a640:	20 f4       	brcc	.+8      	; 0xa64a <disk_ioctl+0x74>
    a642:	e4 5f       	subi	r30, 0xF4	; 244
    a644:	fe 4f       	sbci	r31, 0xFE	; 254
    a646:	0c 94 55 59 	jmp	0xb2aa	; 0xb2aa <__tablejump2__>
    a64a:	24 e0       	ldi	r18, 0x04	; 4
    a64c:	30 e0       	ldi	r19, 0x00	; 0
    a64e:	60 c1       	rjmp	.+704    	; 0xa910 <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    a650:	80 e1       	ldi	r24, 0x10	; 16
    a652:	e0 e8       	ldi	r30, 0x80	; 128
    a654:	f6 e0       	ldi	r31, 0x06	; 6
    a656:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    a658:	0e 94 87 50 	call	0xa10e	; 0xa10e <wait_ready>
    a65c:	20 e0       	ldi	r18, 0x00	; 0
    a65e:	30 e0       	ldi	r19, 0x00	; 0
    a660:	8f 3f       	cpi	r24, 0xFF	; 255
    a662:	09 f0       	breq	.+2      	; 0xa666 <disk_ioctl+0x90>
    a664:	53 c1       	rjmp	.+678    	; 0xa90c <disk_ioctl+0x336>
    a666:	54 c1       	rjmp	.+680    	; 0xa910 <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    a668:	89 e4       	ldi	r24, 0x49	; 73
    a66a:	40 e0       	ldi	r20, 0x00	; 0
    a66c:	50 e0       	ldi	r21, 0x00	; 0
    a66e:	60 e0       	ldi	r22, 0x00	; 0
    a670:	70 e0       	ldi	r23, 0x00	; 0
    a672:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a676:	88 23       	and	r24, r24
    a678:	09 f0       	breq	.+2      	; 0xa67c <disk_ioctl+0xa6>
    a67a:	48 c1       	rjmp	.+656    	; 0xa90c <disk_ioctl+0x336>
    a67c:	ce 01       	movw	r24, r28
    a67e:	01 96       	adiw	r24, 0x01	; 1
    a680:	60 e1       	ldi	r22, 0x10	; 16
    a682:	70 e0       	ldi	r23, 0x00	; 0
    a684:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a688:	89 2b       	or	r24, r25
    a68a:	09 f4       	brne	.+2      	; 0xa68e <disk_ioctl+0xb8>
    a68c:	3f c1       	rjmp	.+638    	; 0xa90c <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    a68e:	89 81       	ldd	r24, Y+1	; 0x01
    a690:	82 95       	swap	r24
    a692:	86 95       	lsr	r24
    a694:	86 95       	lsr	r24
    a696:	83 70       	andi	r24, 0x03	; 3
    a698:	7a 85       	ldd	r23, Y+10	; 0x0a
    a69a:	49 85       	ldd	r20, Y+9	; 0x09
    a69c:	81 30       	cpi	r24, 0x01	; 1
    a69e:	89 f4       	brne	.+34     	; 0xa6c2 <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    a6a0:	87 2f       	mov	r24, r23
    a6a2:	90 e0       	ldi	r25, 0x00	; 0
    a6a4:	01 96       	adiw	r24, 0x01	; 1
    a6a6:	34 2f       	mov	r19, r20
    a6a8:	20 e0       	ldi	r18, 0x00	; 0
    a6aa:	82 0f       	add	r24, r18
    a6ac:	93 1f       	adc	r25, r19
    a6ae:	a0 e0       	ldi	r26, 0x00	; 0
    a6b0:	b0 e0       	ldi	r27, 0x00	; 0
    a6b2:	2a e0       	ldi	r18, 0x0A	; 10
    a6b4:	88 0f       	add	r24, r24
    a6b6:	99 1f       	adc	r25, r25
    a6b8:	aa 1f       	adc	r26, r26
    a6ba:	bb 1f       	adc	r27, r27
    a6bc:	2a 95       	dec	r18
    a6be:	d1 f7       	brne	.-12     	; 0xa6b4 <disk_ioctl+0xde>
    a6c0:	cd c0       	rjmp	.+410    	; 0xa85c <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    a6c2:	42 95       	swap	r20
    a6c4:	46 95       	lsr	r20
    a6c6:	46 95       	lsr	r20
    a6c8:	43 70       	andi	r20, 0x03	; 3
    a6ca:	28 85       	ldd	r18, Y+8	; 0x08
    a6cc:	30 e0       	ldi	r19, 0x00	; 0
    a6ce:	22 0f       	add	r18, r18
    a6d0:	33 1f       	adc	r19, r19
    a6d2:	22 0f       	add	r18, r18
    a6d4:	33 1f       	adc	r19, r19
    a6d6:	24 0f       	add	r18, r20
    a6d8:	31 1d       	adc	r19, r1
    a6da:	2f 5f       	subi	r18, 0xFF	; 255
    a6dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a6de:	8f 81       	ldd	r24, Y+7	; 0x07
    a6e0:	90 e0       	ldi	r25, 0x00	; 0
    a6e2:	83 70       	andi	r24, 0x03	; 3
    a6e4:	90 70       	andi	r25, 0x00	; 0
    a6e6:	98 2f       	mov	r25, r24
    a6e8:	88 27       	eor	r24, r24
    a6ea:	99 0f       	add	r25, r25
    a6ec:	99 0f       	add	r25, r25
    a6ee:	28 0f       	add	r18, r24
    a6f0:	39 1f       	adc	r19, r25
    a6f2:	40 e0       	ldi	r20, 0x00	; 0
    a6f4:	50 e0       	ldi	r21, 0x00	; 0
    a6f6:	8e 81       	ldd	r24, Y+6	; 0x06
    a6f8:	8f 70       	andi	r24, 0x0F	; 15
    a6fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    a6fc:	66 1f       	adc	r22, r22
    a6fe:	66 27       	eor	r22, r22
    a700:	66 1f       	adc	r22, r22
    a702:	86 0f       	add	r24, r22
    a704:	8e 5f       	subi	r24, 0xFE	; 254
    a706:	73 70       	andi	r23, 0x03	; 3
    a708:	77 0f       	add	r23, r23
    a70a:	87 0f       	add	r24, r23
    a70c:	90 e0       	ldi	r25, 0x00	; 0
    a70e:	09 97       	sbiw	r24, 0x09	; 9
    a710:	04 c0       	rjmp	.+8      	; 0xa71a <disk_ioctl+0x144>
    a712:	22 0f       	add	r18, r18
    a714:	33 1f       	adc	r19, r19
    a716:	44 1f       	adc	r20, r20
    a718:	55 1f       	adc	r21, r21
    a71a:	8a 95       	dec	r24
    a71c:	d2 f7       	brpl	.-12     	; 0xa712 <disk_ioctl+0x13c>
    a71e:	f8 01       	movw	r30, r16
    a720:	20 83       	st	Z, r18
    a722:	31 83       	std	Z+1, r19	; 0x01
    a724:	42 83       	std	Z+2, r20	; 0x02
    a726:	53 83       	std	Z+3, r21	; 0x03
    a728:	9e c0       	rjmp	.+316    	; 0xa866 <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    a72a:	80 e0       	ldi	r24, 0x00	; 0
    a72c:	92 e0       	ldi	r25, 0x02	; 2
    a72e:	fa 01       	movw	r30, r20
    a730:	80 83       	st	Z, r24
    a732:	91 83       	std	Z+1, r25	; 0x01
    a734:	98 c0       	rjmp	.+304    	; 0xa866 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    a736:	80 91 78 25 	lds	r24, 0x2578
    a73a:	f8 2e       	mov	r15, r24
    a73c:	82 ff       	sbrs	r24, 2
    a73e:	39 c0       	rjmp	.+114    	; 0xa7b2 <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    a740:	8d ec       	ldi	r24, 0xCD	; 205
    a742:	40 e0       	ldi	r20, 0x00	; 0
    a744:	50 e0       	ldi	r21, 0x00	; 0
    a746:	60 e0       	ldi	r22, 0x00	; 0
    a748:	70 e0       	ldi	r23, 0x00	; 0
    a74a:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a74e:	88 23       	and	r24, r24
    a750:	09 f0       	breq	.+2      	; 0xa754 <disk_ioctl+0x17e>
    a752:	dc c0       	rjmp	.+440    	; 0xa90c <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a754:	8f ef       	ldi	r24, 0xFF	; 255
    a756:	e0 ec       	ldi	r30, 0xC0	; 192
    a758:	fa e0       	ldi	r31, 0x0A	; 10
    a75a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a75c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a760:	87 ff       	sbrs	r24, 7
    a762:	fc cf       	rjmp	.-8      	; 0xa75c <disk_ioctl+0x186>
  return SPIE.DATA;
    a764:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    a768:	ce 01       	movw	r24, r28
    a76a:	01 96       	adiw	r24, 0x01	; 1
    a76c:	60 e1       	ldi	r22, 0x10	; 16
    a76e:	70 e0       	ldi	r23, 0x00	; 0
    a770:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a774:	89 2b       	or	r24, r25
    a776:	09 f4       	brne	.+2      	; 0xa77a <disk_ioctl+0x1a4>
    a778:	c9 c0       	rjmp	.+402    	; 0xa90c <disk_ioctl+0x336>
    a77a:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a77c:	e0 ec       	ldi	r30, 0xC0	; 192
    a77e:	fa e0       	ldi	r31, 0x0A	; 10
    a780:	2f ef       	ldi	r18, 0xFF	; 255
    a782:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a784:	80 91 c2 0a 	lds	r24, 0x0AC2
    a788:	87 ff       	sbrs	r24, 7
    a78a:	fc cf       	rjmp	.-8      	; 0xa784 <disk_ioctl+0x1ae>
  return SPIE.DATA;
    a78c:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    a790:	91 50       	subi	r25, 0x01	; 1
    a792:	b9 f7       	brne	.-18     	; 0xa782 <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    a794:	2b 85       	ldd	r18, Y+11	; 0x0b
    a796:	22 95       	swap	r18
    a798:	2f 70       	andi	r18, 0x0F	; 15
    a79a:	80 e1       	ldi	r24, 0x10	; 16
    a79c:	90 e0       	ldi	r25, 0x00	; 0
    a79e:	a0 e0       	ldi	r26, 0x00	; 0
    a7a0:	b0 e0       	ldi	r27, 0x00	; 0
    a7a2:	04 c0       	rjmp	.+8      	; 0xa7ac <disk_ioctl+0x1d6>
    a7a4:	88 0f       	add	r24, r24
    a7a6:	99 1f       	adc	r25, r25
    a7a8:	aa 1f       	adc	r26, r26
    a7aa:	bb 1f       	adc	r27, r27
    a7ac:	2a 95       	dec	r18
    a7ae:	d2 f7       	brpl	.-12     	; 0xa7a4 <disk_ioctl+0x1ce>
    a7b0:	55 c0       	rjmp	.+170    	; 0xa85c <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    a7b2:	89 e4       	ldi	r24, 0x49	; 73
    a7b4:	40 e0       	ldi	r20, 0x00	; 0
    a7b6:	50 e0       	ldi	r21, 0x00	; 0
    a7b8:	60 e0       	ldi	r22, 0x00	; 0
    a7ba:	70 e0       	ldi	r23, 0x00	; 0
    a7bc:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a7c0:	88 23       	and	r24, r24
    a7c2:	09 f0       	breq	.+2      	; 0xa7c6 <disk_ioctl+0x1f0>
    a7c4:	a3 c0       	rjmp	.+326    	; 0xa90c <disk_ioctl+0x336>
    a7c6:	ce 01       	movw	r24, r28
    a7c8:	01 96       	adiw	r24, 0x01	; 1
    a7ca:	60 e1       	ldi	r22, 0x10	; 16
    a7cc:	70 e0       	ldi	r23, 0x00	; 0
    a7ce:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a7d2:	89 2b       	or	r24, r25
    a7d4:	09 f4       	brne	.+2      	; 0xa7d8 <disk_ioctl+0x202>
    a7d6:	9a c0       	rjmp	.+308    	; 0xa90c <disk_ioctl+0x336>
    a7d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    a7da:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    a7dc:	f1 fe       	sbrs	r15, 1
    a7de:	1b c0       	rjmp	.+54     	; 0xa816 <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    a7e0:	88 1f       	adc	r24, r24
    a7e2:	88 27       	eor	r24, r24
    a7e4:	88 1f       	adc	r24, r24
    a7e6:	90 e0       	ldi	r25, 0x00	; 0
    a7e8:	01 96       	adiw	r24, 0x01	; 1
    a7ea:	24 2f       	mov	r18, r20
    a7ec:	30 e0       	ldi	r19, 0x00	; 0
    a7ee:	2f 73       	andi	r18, 0x3F	; 63
    a7f0:	30 70       	andi	r19, 0x00	; 0
    a7f2:	22 0f       	add	r18, r18
    a7f4:	33 1f       	adc	r19, r19
    a7f6:	82 0f       	add	r24, r18
    a7f8:	93 1f       	adc	r25, r19
    a7fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    a7fc:	22 95       	swap	r18
    a7fe:	26 95       	lsr	r18
    a800:	26 95       	lsr	r18
    a802:	23 70       	andi	r18, 0x03	; 3
    a804:	30 e0       	ldi	r19, 0x00	; 0
    a806:	21 50       	subi	r18, 0x01	; 1
    a808:	30 40       	sbci	r19, 0x00	; 0
    a80a:	02 c0       	rjmp	.+4      	; 0xa810 <disk_ioctl+0x23a>
    a80c:	88 0f       	add	r24, r24
    a80e:	99 1f       	adc	r25, r25
    a810:	2a 95       	dec	r18
    a812:	e2 f7       	brpl	.-8      	; 0xa80c <disk_ioctl+0x236>
    a814:	21 c0       	rjmp	.+66     	; 0xa858 <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    a816:	28 2f       	mov	r18, r24
    a818:	30 e0       	ldi	r19, 0x00	; 0
    a81a:	23 70       	andi	r18, 0x03	; 3
    a81c:	30 70       	andi	r19, 0x00	; 0
    a81e:	f3 e0       	ldi	r31, 0x03	; 3
    a820:	22 0f       	add	r18, r18
    a822:	33 1f       	adc	r19, r19
    a824:	fa 95       	dec	r31
    a826:	e1 f7       	brne	.-8      	; 0xa820 <disk_ioctl+0x24a>
    a828:	82 95       	swap	r24
    a82a:	86 95       	lsr	r24
    a82c:	87 70       	andi	r24, 0x07	; 7
    a82e:	28 0f       	add	r18, r24
    a830:	31 1d       	adc	r19, r1
    a832:	2f 5f       	subi	r18, 0xFF	; 255
    a834:	3f 4f       	sbci	r19, 0xFF	; 255
    a836:	84 2f       	mov	r24, r20
    a838:	90 e0       	ldi	r25, 0x00	; 0
    a83a:	8c 77       	andi	r24, 0x7C	; 124
    a83c:	90 70       	andi	r25, 0x00	; 0
    a83e:	95 95       	asr	r25
    a840:	87 95       	ror	r24
    a842:	95 95       	asr	r25
    a844:	87 95       	ror	r24
    a846:	01 96       	adiw	r24, 0x01	; 1
    a848:	ac 01       	movw	r20, r24
    a84a:	24 9f       	mul	r18, r20
    a84c:	c0 01       	movw	r24, r0
    a84e:	25 9f       	mul	r18, r21
    a850:	90 0d       	add	r25, r0
    a852:	34 9f       	mul	r19, r20
    a854:	90 0d       	add	r25, r0
    a856:	11 24       	eor	r1, r1
    a858:	a0 e0       	ldi	r26, 0x00	; 0
    a85a:	b0 e0       	ldi	r27, 0x00	; 0
    a85c:	f8 01       	movw	r30, r16
    a85e:	80 83       	st	Z, r24
    a860:	91 83       	std	Z+1, r25	; 0x01
    a862:	a2 83       	std	Z+2, r26	; 0x02
    a864:	b3 83       	std	Z+3, r27	; 0x03
    a866:	20 e0       	ldi	r18, 0x00	; 0
    a868:	30 e0       	ldi	r19, 0x00	; 0
    a86a:	52 c0       	rjmp	.+164    	; 0xa910 <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    a86c:	80 91 78 25 	lds	r24, 0x2578
    a870:	fa 01       	movw	r30, r20
    a872:	80 83       	st	Z, r24
    a874:	f8 cf       	rjmp	.-16     	; 0xa866 <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    a876:	89 e4       	ldi	r24, 0x49	; 73
    a878:	01 c0       	rjmp	.+2      	; 0xa87c <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    a87a:	8a e4       	ldi	r24, 0x4A	; 74
    a87c:	40 e0       	ldi	r20, 0x00	; 0
    a87e:	50 e0       	ldi	r21, 0x00	; 0
    a880:	60 e0       	ldi	r22, 0x00	; 0
    a882:	70 e0       	ldi	r23, 0x00	; 0
    a884:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a888:	88 23       	and	r24, r24
    a88a:	09 f0       	breq	.+2      	; 0xa88e <disk_ioctl+0x2b8>
    a88c:	3f c0       	rjmp	.+126    	; 0xa90c <disk_ioctl+0x336>
    a88e:	c8 01       	movw	r24, r16
    a890:	60 e1       	ldi	r22, 0x10	; 16
    a892:	70 e0       	ldi	r23, 0x00	; 0
    a894:	35 c0       	rjmp	.+106    	; 0xa900 <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    a896:	8a e7       	ldi	r24, 0x7A	; 122
    a898:	40 e0       	ldi	r20, 0x00	; 0
    a89a:	50 e0       	ldi	r21, 0x00	; 0
    a89c:	60 e0       	ldi	r22, 0x00	; 0
    a89e:	70 e0       	ldi	r23, 0x00	; 0
    a8a0:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a8a4:	88 23       	and	r24, r24
    a8a6:	91 f5       	brne	.+100    	; 0xa90c <disk_ioctl+0x336>
    a8a8:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8aa:	a0 ec       	ldi	r26, 0xC0	; 192
    a8ac:	ba e0       	ldi	r27, 0x0A	; 10
    a8ae:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a8b0:	98 01       	movw	r18, r16
    a8b2:	2d 5f       	subi	r18, 0xFD	; 253
    a8b4:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8b6:	13 96       	adiw	r26, 0x03	; 3
    a8b8:	9c 93       	st	X, r25
    a8ba:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a8bc:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8c0:	87 ff       	sbrs	r24, 7
    a8c2:	fc cf       	rjmp	.-8      	; 0xa8bc <disk_ioctl+0x2e6>
  return SPIE.DATA;
    a8c4:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    a8c8:	80 83       	st	Z, r24
    a8ca:	e2 17       	cp	r30, r18
    a8cc:	f3 07       	cpc	r31, r19
    a8ce:	59 f2       	breq	.-106    	; 0xa866 <disk_ioctl+0x290>
    a8d0:	31 96       	adiw	r30, 0x01	; 1
    a8d2:	f1 cf       	rjmp	.-30     	; 0xa8b6 <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    a8d4:	8d ec       	ldi	r24, 0xCD	; 205
    a8d6:	40 e0       	ldi	r20, 0x00	; 0
    a8d8:	50 e0       	ldi	r21, 0x00	; 0
    a8da:	60 e0       	ldi	r22, 0x00	; 0
    a8dc:	70 e0       	ldi	r23, 0x00	; 0
    a8de:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    a8e2:	88 23       	and	r24, r24
    a8e4:	99 f4       	brne	.+38     	; 0xa90c <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a8e6:	8f ef       	ldi	r24, 0xFF	; 255
    a8e8:	e0 ec       	ldi	r30, 0xC0	; 192
    a8ea:	fa e0       	ldi	r31, 0x0A	; 10
    a8ec:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a8ee:	80 91 c2 0a 	lds	r24, 0x0AC2
    a8f2:	87 ff       	sbrs	r24, 7
    a8f4:	fc cf       	rjmp	.-8      	; 0xa8ee <disk_ioctl+0x318>
  return SPIE.DATA;
    a8f6:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    a8fa:	c8 01       	movw	r24, r16
    a8fc:	60 e4       	ldi	r22, 0x40	; 64
    a8fe:	70 e0       	ldi	r23, 0x00	; 0
    a900:	0e 94 c6 50 	call	0xa18c	; 0xa18c <rcvr_datablock>
    a904:	20 e0       	ldi	r18, 0x00	; 0
    a906:	30 e0       	ldi	r19, 0x00	; 0
    a908:	89 2b       	or	r24, r25
    a90a:	11 f4       	brne	.+4      	; 0xa910 <disk_ioctl+0x33a>
    a90c:	21 e0       	ldi	r18, 0x01	; 1
    a90e:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a910:	80 e1       	ldi	r24, 0x10	; 16
    a912:	e0 e8       	ldi	r30, 0x80	; 128
    a914:	f6 e0       	ldi	r31, 0x06	; 6
    a916:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a918:	8f ef       	ldi	r24, 0xFF	; 255
    a91a:	e0 ec       	ldi	r30, 0xC0	; 192
    a91c:	fa e0       	ldi	r31, 0x0A	; 10
    a91e:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a920:	80 91 c2 0a 	lds	r24, 0x0AC2
    a924:	87 ff       	sbrs	r24, 7
    a926:	fc cf       	rjmp	.-8      	; 0xa920 <disk_ioctl+0x34a>
  return SPIE.DATA;
    a928:	80 91 c3 0a 	lds	r24, 0x0AC3
    a92c:	02 c0       	rjmp	.+4      	; 0xa932 <disk_ioctl+0x35c>
    a92e:	24 e0       	ldi	r18, 0x04	; 4
    a930:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    a932:	c9 01       	movw	r24, r18
    a934:	60 96       	adiw	r28, 0x10	; 16
    a936:	e5 e0       	ldi	r30, 0x05	; 5
    a938:	0c 94 47 59 	jmp	0xb28e	; 0xb28e <__epilogue_restores__+0x1a>

0000a93c <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    a93c:	80 91 76 25 	lds	r24, 0x2576
  if (n) Timer1 = --n;
    a940:	88 23       	and	r24, r24
    a942:	19 f0       	breq	.+6      	; 0xa94a <disk_timerproc+0xe>
    a944:	81 50       	subi	r24, 0x01	; 1
    a946:	80 93 76 25 	sts	0x2576, r24
  n = Timer2;
    a94a:	80 91 77 25 	lds	r24, 0x2577
  if (n) Timer2 = --n;
    a94e:	88 23       	and	r24, r24
    a950:	19 f0       	breq	.+6      	; 0xa958 <disk_timerproc+0x1c>
    a952:	81 50       	subi	r24, 0x01	; 1
    a954:	80 93 77 25 	sts	0x2577, r24

  n = pv;
    a958:	90 91 75 25 	lds	r25, 0x2575
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    a95c:	80 91 e8 06 	lds	r24, 0x06E8
    a960:	83 70       	andi	r24, 0x03	; 3
    a962:	80 93 75 25 	sts	0x2575, r24

  if (n == pv) {          /* Have contacts stabled? */
    a966:	98 17       	cp	r25, r24
    a968:	71 f4       	brne	.+28     	; 0xa986 <disk_timerproc+0x4a>
    s = Stat;
    a96a:	80 91 de 24 	lds	r24, 0x24DE

    if (pv & SOCKWP)      /* WP is H (write protected) */
    a96e:	90 ff       	sbrs	r25, 0
    a970:	02 c0       	rjmp	.+4      	; 0xa976 <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    a972:	84 60       	ori	r24, 0x04	; 4
    a974:	01 c0       	rjmp	.+2      	; 0xa978 <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    a976:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    a978:	91 ff       	sbrs	r25, 1
    a97a:	02 c0       	rjmp	.+4      	; 0xa980 <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    a97c:	83 60       	ori	r24, 0x03	; 3
    a97e:	01 c0       	rjmp	.+2      	; 0xa982 <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    a980:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    a982:	80 93 de 24 	sts	0x24DE, r24
    a986:	08 95       	ret

0000a988 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    a988:	1f 92       	push	r1
    a98a:	0f 92       	push	r0
    a98c:	0f b6       	in	r0, 0x3f	; 63
    a98e:	0f 92       	push	r0
    a990:	08 b6       	in	r0, 0x38	; 56
    a992:	0f 92       	push	r0
    a994:	09 b6       	in	r0, 0x39	; 57
    a996:	0f 92       	push	r0
    a998:	0b b6       	in	r0, 0x3b	; 59
    a99a:	0f 92       	push	r0
    a99c:	11 24       	eor	r1, r1
    a99e:	18 be       	out	0x38, r1	; 56
    a9a0:	19 be       	out	0x39, r1	; 57
    a9a2:	1b be       	out	0x3b, r1	; 59
    a9a4:	2f 93       	push	r18
    a9a6:	3f 93       	push	r19
    a9a8:	4f 93       	push	r20
    a9aa:	5f 93       	push	r21
    a9ac:	6f 93       	push	r22
    a9ae:	7f 93       	push	r23
    a9b0:	8f 93       	push	r24
    a9b2:	9f 93       	push	r25
    a9b4:	af 93       	push	r26
    a9b6:	bf 93       	push	r27
    a9b8:	ef 93       	push	r30
    a9ba:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    a9bc:	0e 94 9e 54 	call	0xa93c	; 0xa93c <disk_timerproc>
}
    a9c0:	ff 91       	pop	r31
    a9c2:	ef 91       	pop	r30
    a9c4:	bf 91       	pop	r27
    a9c6:	af 91       	pop	r26
    a9c8:	9f 91       	pop	r25
    a9ca:	8f 91       	pop	r24
    a9cc:	7f 91       	pop	r23
    a9ce:	6f 91       	pop	r22
    a9d0:	5f 91       	pop	r21
    a9d2:	4f 91       	pop	r20
    a9d4:	3f 91       	pop	r19
    a9d6:	2f 91       	pop	r18
    a9d8:	0f 90       	pop	r0
    a9da:	0b be       	out	0x3b, r0	; 59
    a9dc:	0f 90       	pop	r0
    a9de:	09 be       	out	0x39, r0	; 57
    a9e0:	0f 90       	pop	r0
    a9e2:	08 be       	out	0x38, r0	; 56
    a9e4:	0f 90       	pop	r0
    a9e6:	0f be       	out	0x3f, r0	; 63
    a9e8:	0f 90       	pop	r0
    a9ea:	1f 90       	pop	r1
    a9ec:	18 95       	reti

0000a9ee <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    a9ee:	a4 e0       	ldi	r26, 0x04	; 4
    a9f0:	b0 e0       	ldi	r27, 0x00	; 0
    a9f2:	ed ef       	ldi	r30, 0xFD	; 253
    a9f4:	f4 e5       	ldi	r31, 0x54	; 84
    a9f6:	0c 94 2a 59 	jmp	0xb254	; 0xb254 <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    a9fa:	88 23       	and	r24, r24
    a9fc:	11 f0       	breq	.+4      	; 0xaa02 <disk_initialize+0x14>
    a9fe:	81 e0       	ldi	r24, 0x01	; 1
    aa00:	d8 c0       	rjmp	.+432    	; 0xabb2 <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    aa02:	80 91 de 24 	lds	r24, 0x24DE
    aa06:	81 fd       	sbrc	r24, 1
    aa08:	d2 c0       	rjmp	.+420    	; 0xabae <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    aa0a:	83 e0       	ldi	r24, 0x03	; 3
    aa0c:	80 93 76 25 	sts	0x2576, r24
    aa10:	80 91 76 25 	lds	r24, 0x2576
    aa14:	88 23       	and	r24, r24
    aa16:	e1 f7       	brne	.-8      	; 0xaa10 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    aa18:	13 e5       	ldi	r17, 0x53	; 83
    aa1a:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    aa1e:	81 e4       	ldi	r24, 0x41	; 65
    aa20:	90 e0       	ldi	r25, 0x00	; 0
    aa22:	64 e0       	ldi	r22, 0x04	; 4
    aa24:	0e 94 c6 21 	call	0x438c	; 0x438c <CCPWrite>
  FCLK_SLOW();
    aa28:	10 93 c0 0a 	sts	0x0AC0, r17
    aa2c:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aa2e:	e0 ec       	ldi	r30, 0xC0	; 192
    aa30:	fa e0       	ldi	r31, 0x0A	; 10
    aa32:	2f ef       	ldi	r18, 0xFF	; 255
    aa34:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aa36:	80 91 c2 0a 	lds	r24, 0x0AC2
    aa3a:	87 ff       	sbrs	r24, 7
    aa3c:	fc cf       	rjmp	.-8      	; 0xaa36 <disk_initialize+0x48>
  return SPIE.DATA;
    aa3e:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    aa42:	91 50       	subi	r25, 0x01	; 1
    aa44:	b9 f7       	brne	.-18     	; 0xaa34 <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    aa46:	80 e4       	ldi	r24, 0x40	; 64
    aa48:	40 e0       	ldi	r20, 0x00	; 0
    aa4a:	50 e0       	ldi	r21, 0x00	; 0
    aa4c:	60 e0       	ldi	r22, 0x00	; 0
    aa4e:	70 e0       	ldi	r23, 0x00	; 0
    aa50:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    aa54:	81 30       	cpi	r24, 0x01	; 1
    aa56:	09 f0       	breq	.+2      	; 0xaa5a <disk_initialize+0x6c>
    aa58:	87 c0       	rjmp	.+270    	; 0xab68 <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    aa5a:	84 e6       	ldi	r24, 0x64	; 100
    aa5c:	80 93 76 25 	sts	0x2576, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    aa60:	88 e4       	ldi	r24, 0x48	; 72
    aa62:	4a ea       	ldi	r20, 0xAA	; 170
    aa64:	51 e0       	ldi	r21, 0x01	; 1
    aa66:	60 e0       	ldi	r22, 0x00	; 0
    aa68:	70 e0       	ldi	r23, 0x00	; 0
    aa6a:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    aa6e:	81 30       	cpi	r24, 0x01	; 1
    aa70:	09 f0       	breq	.+2      	; 0xaa74 <disk_initialize+0x86>
    aa72:	53 c0       	rjmp	.+166    	; 0xab1a <disk_initialize+0x12c>
    aa74:	7e 01       	movw	r14, r28
    aa76:	08 94       	sec
    aa78:	e1 1c       	adc	r14, r1
    aa7a:	f1 1c       	adc	r15, r1
    aa7c:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aa7e:	e0 ec       	ldi	r30, 0xC0	; 192
    aa80:	fa e0       	ldi	r31, 0x0A	; 10
    aa82:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    aa84:	9e 01       	movw	r18, r28
    aa86:	2b 5f       	subi	r18, 0xFB	; 251
    aa88:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aa8a:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aa8c:	80 91 c2 0a 	lds	r24, 0x0AC2
    aa90:	87 ff       	sbrs	r24, 7
    aa92:	fc cf       	rjmp	.-8      	; 0xaa8c <disk_initialize+0x9e>
  return SPIE.DATA;
    aa94:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    aa98:	d8 01       	movw	r26, r16
    aa9a:	8d 93       	st	X+, r24
    aa9c:	8d 01       	movw	r16, r26
    aa9e:	a2 17       	cp	r26, r18
    aaa0:	b3 07       	cpc	r27, r19
    aaa2:	99 f7       	brne	.-26     	; 0xaa8a <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    aaa4:	8b 81       	ldd	r24, Y+3	; 0x03
    aaa6:	81 30       	cpi	r24, 0x01	; 1
    aaa8:	09 f0       	breq	.+2      	; 0xaaac <disk_initialize+0xbe>
    aaaa:	5e c0       	rjmp	.+188    	; 0xab68 <disk_initialize+0x17a>
    aaac:	8c 81       	ldd	r24, Y+4	; 0x04
    aaae:	8a 3a       	cpi	r24, 0xAA	; 170
    aab0:	09 f0       	breq	.+2      	; 0xaab4 <disk_initialize+0xc6>
    aab2:	5a c0       	rjmp	.+180    	; 0xab68 <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    aab4:	80 91 76 25 	lds	r24, 0x2576
    aab8:	88 23       	and	r24, r24
    aaba:	49 f0       	breq	.+18     	; 0xaace <disk_initialize+0xe0>
    aabc:	89 ee       	ldi	r24, 0xE9	; 233
    aabe:	40 e0       	ldi	r20, 0x00	; 0
    aac0:	50 e0       	ldi	r21, 0x00	; 0
    aac2:	60 e0       	ldi	r22, 0x00	; 0
    aac4:	70 e4       	ldi	r23, 0x40	; 64
    aac6:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    aaca:	88 23       	and	r24, r24
    aacc:	99 f7       	brne	.-26     	; 0xaab4 <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    aace:	80 91 76 25 	lds	r24, 0x2576
    aad2:	88 23       	and	r24, r24
    aad4:	09 f4       	brne	.+2      	; 0xaad8 <disk_initialize+0xea>
    aad6:	48 c0       	rjmp	.+144    	; 0xab68 <disk_initialize+0x17a>
    aad8:	8a e7       	ldi	r24, 0x7A	; 122
    aada:	40 e0       	ldi	r20, 0x00	; 0
    aadc:	50 e0       	ldi	r21, 0x00	; 0
    aade:	60 e0       	ldi	r22, 0x00	; 0
    aae0:	70 e0       	ldi	r23, 0x00	; 0
    aae2:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    aae6:	88 23       	and	r24, r24
    aae8:	09 f0       	breq	.+2      	; 0xaaec <disk_initialize+0xfe>
    aaea:	3e c0       	rjmp	.+124    	; 0xab68 <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aaec:	e0 ec       	ldi	r30, 0xC0	; 192
    aaee:	fa e0       	ldi	r31, 0x0A	; 10
    aaf0:	9f ef       	ldi	r25, 0xFF	; 255
    aaf2:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aaf4:	80 91 c2 0a 	lds	r24, 0x0AC2
    aaf8:	87 ff       	sbrs	r24, 7
    aafa:	fc cf       	rjmp	.-8      	; 0xaaf4 <disk_initialize+0x106>
  return SPIE.DATA;
    aafc:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    ab00:	d7 01       	movw	r26, r14
    ab02:	8d 93       	st	X+, r24
    ab04:	7d 01       	movw	r14, r26
    ab06:	a0 17       	cp	r26, r16
    ab08:	b1 07       	cpc	r27, r17
    ab0a:	99 f7       	brne	.-26     	; 0xaaf2 <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    ab0c:	89 81       	ldd	r24, Y+1	; 0x01
    ab0e:	86 fd       	sbrc	r24, 6
    ab10:	02 c0       	rjmp	.+4      	; 0xab16 <disk_initialize+0x128>
    ab12:	14 e0       	ldi	r17, 0x04	; 4
    ab14:	2a c0       	rjmp	.+84     	; 0xab6a <disk_initialize+0x17c>
    ab16:	1c e0       	ldi	r17, 0x0C	; 12
    ab18:	28 c0       	rjmp	.+80     	; 0xab6a <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    ab1a:	89 ee       	ldi	r24, 0xE9	; 233
    ab1c:	40 e0       	ldi	r20, 0x00	; 0
    ab1e:	50 e0       	ldi	r21, 0x00	; 0
    ab20:	60 e0       	ldi	r22, 0x00	; 0
    ab22:	70 e0       	ldi	r23, 0x00	; 0
    ab24:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    ab28:	82 30       	cpi	r24, 0x02	; 2
    ab2a:	18 f0       	brcs	.+6      	; 0xab32 <disk_initialize+0x144>
    ab2c:	01 e4       	ldi	r16, 0x41	; 65
    ab2e:	11 e0       	ldi	r17, 0x01	; 1
    ab30:	02 c0       	rjmp	.+4      	; 0xab36 <disk_initialize+0x148>
    ab32:	09 ee       	ldi	r16, 0xE9	; 233
    ab34:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    ab36:	80 91 76 25 	lds	r24, 0x2576
    ab3a:	88 23       	and	r24, r24
    ab3c:	49 f0       	breq	.+18     	; 0xab50 <disk_initialize+0x162>
    ab3e:	80 2f       	mov	r24, r16
    ab40:	40 e0       	ldi	r20, 0x00	; 0
    ab42:	50 e0       	ldi	r21, 0x00	; 0
    ab44:	60 e0       	ldi	r22, 0x00	; 0
    ab46:	70 e0       	ldi	r23, 0x00	; 0
    ab48:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    ab4c:	88 23       	and	r24, r24
    ab4e:	99 f7       	brne	.-26     	; 0xab36 <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    ab50:	80 91 76 25 	lds	r24, 0x2576
    ab54:	88 23       	and	r24, r24
    ab56:	41 f0       	breq	.+16     	; 0xab68 <disk_initialize+0x17a>
    ab58:	80 e5       	ldi	r24, 0x50	; 80
    ab5a:	40 e0       	ldi	r20, 0x00	; 0
    ab5c:	52 e0       	ldi	r21, 0x02	; 2
    ab5e:	60 e0       	ldi	r22, 0x00	; 0
    ab60:	70 e0       	ldi	r23, 0x00	; 0
    ab62:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <send_cmd>
    ab66:	81 11       	cpse	r24, r1
    ab68:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    ab6a:	10 93 78 25 	sts	0x2578, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    ab6e:	80 e1       	ldi	r24, 0x10	; 16
    ab70:	e0 e8       	ldi	r30, 0x80	; 128
    ab72:	f6 e0       	ldi	r31, 0x06	; 6
    ab74:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ab76:	8f ef       	ldi	r24, 0xFF	; 255
    ab78:	e0 ec       	ldi	r30, 0xC0	; 192
    ab7a:	fa e0       	ldi	r31, 0x0A	; 10
    ab7c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ab7e:	80 91 c2 0a 	lds	r24, 0x0AC2
    ab82:	87 ff       	sbrs	r24, 7
    ab84:	fc cf       	rjmp	.-8      	; 0xab7e <disk_initialize+0x190>
  return SPIE.DATA;
    ab86:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    ab8a:	11 23       	and	r17, r17
    ab8c:	49 f0       	breq	.+18     	; 0xaba0 <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    ab8e:	80 91 de 24 	lds	r24, 0x24DE
    ab92:	8e 7f       	andi	r24, 0xFE	; 254
    ab94:	80 93 de 24 	sts	0x24DE, r24
    FCLK_FAST();
    ab98:	80 ed       	ldi	r24, 0xD0	; 208
    ab9a:	80 93 c0 0a 	sts	0x0AC0, r24
    ab9e:	02 c0       	rjmp	.+4      	; 0xaba4 <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    aba0:	0e 94 a6 50 	call	0xa14c	; 0xa14c <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    aba4:	81 e4       	ldi	r24, 0x41	; 65
    aba6:	90 e0       	ldi	r25, 0x00	; 0
    aba8:	60 e0       	ldi	r22, 0x00	; 0
    abaa:	0e 94 c6 21 	call	0x438c	; 0x438c <CCPWrite>
  return Stat;
    abae:	80 91 de 24 	lds	r24, 0x24DE
}
    abb2:	24 96       	adiw	r28, 0x04	; 4
    abb4:	e6 e0       	ldi	r30, 0x06	; 6
    abb6:	0c 94 46 59 	jmp	0xb28c	; 0xb28c <__epilogue_restores__+0x18>

0000abba <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    abba:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    abbc:	8e e1       	ldi	r24, 0x1E	; 30
    abbe:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    abc0:	8b e3       	ldi	r24, 0x3B	; 59
    abc2:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    abc4:	8b e0       	ldi	r24, 0x0B	; 11
    abc6:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    abc8:	83 e0       	ldi	r24, 0x03	; 3
    abca:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    abcc:	89 e0       	ldi	r24, 0x09	; 9
    abce:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    abd0:	89 ed       	ldi	r24, 0xD9	; 217
    abd2:	97 e0       	ldi	r25, 0x07	; 7
    abd4:	80 83       	st	Z, r24
    abd6:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    abd8:	81 e0       	ldi	r24, 0x01	; 1
    abda:	90 e0       	ldi	r25, 0x00	; 0
    abdc:	08 95       	ret

0000abde <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    abde:	81 e0       	ldi	r24, 0x01	; 1
    abe0:	90 e0       	ldi	r25, 0x00	; 0
    abe2:	08 95       	ret

0000abe4 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    abe4:	81 e0       	ldi	r24, 0x01	; 1
    abe6:	90 e0       	ldi	r25, 0x00	; 0
    abe8:	08 95       	ret

0000abea <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    abea:	6f e6       	ldi	r22, 0x6F	; 111
    abec:	7f e5       	ldi	r23, 0x5F	; 95
    abee:	83 e2       	ldi	r24, 0x23	; 35
    abf0:	9b e3       	ldi	r25, 0x3B	; 59
    abf2:	08 95       	ret

0000abf4 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    abf4:	1f 92       	push	r1
    abf6:	0f 92       	push	r0
    abf8:	0f b6       	in	r0, 0x3f	; 63
    abfa:	0f 92       	push	r0
    abfc:	08 b6       	in	r0, 0x38	; 56
    abfe:	0f 92       	push	r0
    ac00:	09 b6       	in	r0, 0x39	; 57
    ac02:	0f 92       	push	r0
    ac04:	11 24       	eor	r1, r1
    ac06:	18 be       	out	0x38, r1	; 56
    ac08:	19 be       	out	0x39, r1	; 57
    ac0a:	8f 93       	push	r24
    ac0c:	9f 93       	push	r25
    ac0e:	af 93       	push	r26
    ac10:	bf 93       	push	r27
	ticks++;
    ac12:	80 91 79 25 	lds	r24, 0x2579
    ac16:	90 91 7a 25 	lds	r25, 0x257A
    ac1a:	a0 91 7b 25 	lds	r26, 0x257B
    ac1e:	b0 91 7c 25 	lds	r27, 0x257C
    ac22:	01 96       	adiw	r24, 0x01	; 1
    ac24:	a1 1d       	adc	r26, r1
    ac26:	b1 1d       	adc	r27, r1
    ac28:	80 93 79 25 	sts	0x2579, r24
    ac2c:	90 93 7a 25 	sts	0x257A, r25
    ac30:	a0 93 7b 25 	sts	0x257B, r26
    ac34:	b0 93 7c 25 	sts	0x257C, r27
}
    ac38:	bf 91       	pop	r27
    ac3a:	af 91       	pop	r26
    ac3c:	9f 91       	pop	r25
    ac3e:	8f 91       	pop	r24
    ac40:	0f 90       	pop	r0
    ac42:	09 be       	out	0x39, r0	; 57
    ac44:	0f 90       	pop	r0
    ac46:	08 be       	out	0x38, r0	; 56
    ac48:	0f 90       	pop	r0
    ac4a:	0f be       	out	0x3f, r0	; 63
    ac4c:	0f 90       	pop	r0
    ac4e:	1f 90       	pop	r1
    ac50:	18 95       	reti

0000ac52 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    ac52:	10 92 79 25 	sts	0x2579, r1
    ac56:	10 92 7a 25 	sts	0x257A, r1
    ac5a:	10 92 7b 25 	sts	0x257B, r1
    ac5e:	10 92 7c 25 	sts	0x257C, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    ac62:	e0 e0       	ldi	r30, 0x00	; 0
    ac64:	fb e0       	ldi	r31, 0x0B	; 11
    ac66:	84 e0       	ldi	r24, 0x04	; 4
    ac68:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    ac6a:	8f e9       	ldi	r24, 0x9F	; 159
    ac6c:	9f e0       	ldi	r25, 0x0F	; 15
    ac6e:	86 a3       	std	Z+38, r24	; 0x26
    ac70:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    ac72:	82 e0       	ldi	r24, 0x02	; 2
    ac74:	86 83       	std	Z+6, r24	; 0x06
}
    ac76:	08 95       	ret

0000ac78 <Wait>:

void Wait(uint16_t delay)
{
    ac78:	ef 92       	push	r14
    ac7a:	ff 92       	push	r15
    ac7c:	0f 93       	push	r16
    ac7e:	1f 93       	push	r17
	uint32_t temp=ticks;
    ac80:	e0 90 79 25 	lds	r14, 0x2579
    ac84:	f0 90 7a 25 	lds	r15, 0x257A
    ac88:	00 91 7b 25 	lds	r16, 0x257B
    ac8c:	10 91 7c 25 	lds	r17, 0x257C

	while(ticks - temp < delay);
    ac90:	9c 01       	movw	r18, r24
    ac92:	40 e0       	ldi	r20, 0x00	; 0
    ac94:	50 e0       	ldi	r21, 0x00	; 0
    ac96:	80 91 79 25 	lds	r24, 0x2579
    ac9a:	90 91 7a 25 	lds	r25, 0x257A
    ac9e:	a0 91 7b 25 	lds	r26, 0x257B
    aca2:	b0 91 7c 25 	lds	r27, 0x257C
    aca6:	8e 19       	sub	r24, r14
    aca8:	9f 09       	sbc	r25, r15
    acaa:	a0 0b       	sbc	r26, r16
    acac:	b1 0b       	sbc	r27, r17
    acae:	82 17       	cp	r24, r18
    acb0:	93 07       	cpc	r25, r19
    acb2:	a4 07       	cpc	r26, r20
    acb4:	b5 07       	cpc	r27, r21
    acb6:	78 f3       	brcs	.-34     	; 0xac96 <Wait+0x1e>
}
    acb8:	1f 91       	pop	r17
    acba:	0f 91       	pop	r16
    acbc:	ff 90       	pop	r15
    acbe:	ef 90       	pop	r14
    acc0:	08 95       	ret

0000acc2 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    acc2:	e0 e4       	ldi	r30, 0x40	; 64
    acc4:	fb e0       	ldi	r31, 0x0B	; 11
    acc6:	85 e0       	ldi	r24, 0x05	; 5
    acc8:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    acca:	10 a2       	std	Z+32, r1	; 0x20
    accc:	11 a2       	std	Z+33, r1	; 0x21
}
    acce:	08 95       	ret

0000acd0 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    acd0:	e0 e4       	ldi	r30, 0x40	; 64
    acd2:	fb e0       	ldi	r31, 0x0B	; 11
    acd4:	20 a1       	ldd	r18, Z+32	; 0x20
    acd6:	31 a1       	ldd	r19, Z+33	; 0x21
    acd8:	22 0f       	add	r18, r18
    acda:	33 1f       	adc	r19, r19
	return del_t;
}	
    acdc:	c9 01       	movw	r24, r18
    acde:	08 95       	ret

0000ace0 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    ace0:	10 92 79 25 	sts	0x2579, r1
    ace4:	10 92 7a 25 	sts	0x257A, r1
    ace8:	10 92 7b 25 	sts	0x257B, r1
    acec:	10 92 7c 25 	sts	0x257C, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    acf0:	e0 e0       	ldi	r30, 0x00	; 0
    acf2:	fb e0       	ldi	r31, 0x0B	; 11
    acf4:	84 e0       	ldi	r24, 0x04	; 4
    acf6:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    acf8:	8f e9       	ldi	r24, 0x9F	; 159
    acfa:	9f e0       	ldi	r25, 0x0F	; 15
    acfc:	86 a3       	std	Z+38, r24	; 0x26
    acfe:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    ad00:	82 e0       	ldi	r24, 0x02	; 2
    ad02:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    ad04:	10 a2       	std	Z+32, r1	; 0x20
    ad06:	11 a2       	std	Z+33, r1	; 0x21
}
    ad08:	08 95       	ret

0000ad0a <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    ad0a:	20 91 79 25 	lds	r18, 0x2579
    ad0e:	30 91 7a 25 	lds	r19, 0x257A
    ad12:	40 91 7b 25 	lds	r20, 0x257B
    ad16:	50 91 7c 25 	lds	r21, 0x257C
	return del_t;
}	
    ad1a:	b9 01       	movw	r22, r18
    ad1c:	ca 01       	movw	r24, r20
    ad1e:	08 95       	ret

0000ad20 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    ad20:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ad22:	e0 ec       	ldi	r30, 0xC0	; 192
    ad24:	f1 e0       	ldi	r31, 0x01	; 1
    ad26:	80 91 cf 01 	lds	r24, 0x01CF
    ad2a:	87 fd       	sbrc	r24, 7
    ad2c:	fa cf       	rjmp	.-12     	; 0xad22 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    ad2e:	26 2f       	mov	r18, r22
    ad30:	30 e0       	ldi	r19, 0x00	; 0
    ad32:	2f 71       	andi	r18, 0x1F	; 31
    ad34:	30 70       	andi	r19, 0x00	; 0
    ad36:	89 2f       	mov	r24, r25
    ad38:	90 e0       	ldi	r25, 0x00	; 0
    ad3a:	45 e0       	ldi	r20, 0x05	; 5
    ad3c:	88 0f       	add	r24, r24
    ad3e:	99 1f       	adc	r25, r25
    ad40:	4a 95       	dec	r20
    ad42:	e1 f7       	brne	.-8      	; 0xad3c <EEPROM_ReadByte+0x1c>
    ad44:	28 2b       	or	r18, r24
    ad46:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    ad48:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ad4c:	83 2f       	mov	r24, r19
    ad4e:	8f 71       	andi	r24, 0x1F	; 31
    ad50:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ad52:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    ad54:	86 e0       	ldi	r24, 0x06	; 6
    ad56:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ad58:	eb ec       	ldi	r30, 0xCB	; 203
    ad5a:	f1 e0       	ldi	r31, 0x01	; 1
    ad5c:	21 e0       	ldi	r18, 0x01	; 1
    ad5e:	30 e0       	ldi	r19, 0x00	; 0
    ad60:	88 ed       	ldi	r24, 0xD8	; 216
    ad62:	90 e0       	ldi	r25, 0x00	; 0
    ad64:	84 bf       	out	0x34, r24	; 52
    ad66:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    ad68:	80 91 c4 01 	lds	r24, 0x01C4
}
    ad6c:	08 95       	ret

0000ad6e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ad6e:	80 91 cf 01 	lds	r24, 0x01CF
    ad72:	87 fd       	sbrc	r24, 7
    ad74:	fc cf       	rjmp	.-8      	; 0xad6e <EEPROM_WaitForNVM>
}
    ad76:	08 95       	ret

0000ad78 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ad78:	80 91 cf 01 	lds	r24, 0x01CF
    ad7c:	87 fd       	sbrc	r24, 7
    ad7e:	fc cf       	rjmp	.-8      	; 0xad78 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    ad80:	80 91 cf 01 	lds	r24, 0x01CF
    ad84:	81 ff       	sbrs	r24, 1
    ad86:	0c c0       	rjmp	.+24     	; 0xada0 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    ad88:	86 e3       	ldi	r24, 0x36	; 54
    ad8a:	e0 ec       	ldi	r30, 0xC0	; 192
    ad8c:	f1 e0       	ldi	r31, 0x01	; 1
    ad8e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ad90:	eb ec       	ldi	r30, 0xCB	; 203
    ad92:	f1 e0       	ldi	r31, 0x01	; 1
    ad94:	21 e0       	ldi	r18, 0x01	; 1
    ad96:	30 e0       	ldi	r19, 0x00	; 0
    ad98:	88 ed       	ldi	r24, 0xD8	; 216
    ad9a:	90 e0       	ldi	r25, 0x00	; 0
    ad9c:	84 bf       	out	0x34, r24	; 52
    ad9e:	20 83       	st	Z, r18
    ada0:	08 95       	ret

0000ada2 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    ada2:	df 92       	push	r13
    ada4:	ef 92       	push	r14
    ada6:	ff 92       	push	r15
    ada8:	0f 93       	push	r16
    adaa:	1f 93       	push	r17
    adac:	e8 2e       	mov	r14, r24
    adae:	06 2f       	mov	r16, r22
    adb0:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    adb2:	0e 94 bc 56 	call	0xad78	; 0xad78 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    adb6:	e0 ec       	ldi	r30, 0xC0	; 192
    adb8:	f1 e0       	ldi	r31, 0x01	; 1
    adba:	83 e3       	ldi	r24, 0x33	; 51
    adbc:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    adbe:	10 e0       	ldi	r17, 0x00	; 0
    adc0:	0f 71       	andi	r16, 0x1F	; 31
    adc2:	10 70       	andi	r17, 0x00	; 0
    adc4:	ff 24       	eor	r15, r15
    adc6:	55 e0       	ldi	r21, 0x05	; 5
    adc8:	ee 0c       	add	r14, r14
    adca:	ff 1c       	adc	r15, r15
    adcc:	5a 95       	dec	r21
    adce:	e1 f7       	brne	.-8      	; 0xadc8 <EEPROM_WriteByte+0x26>
    add0:	0e 29       	or	r16, r14
    add2:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    add4:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    add6:	81 2f       	mov	r24, r17
    add8:	8f 71       	andi	r24, 0x1F	; 31
    adda:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    addc:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    adde:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    ade0:	85 e3       	ldi	r24, 0x35	; 53
    ade2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ade4:	eb ec       	ldi	r30, 0xCB	; 203
    ade6:	f1 e0       	ldi	r31, 0x01	; 1
    ade8:	21 e0       	ldi	r18, 0x01	; 1
    adea:	30 e0       	ldi	r19, 0x00	; 0
    adec:	88 ed       	ldi	r24, 0xD8	; 216
    adee:	90 e0       	ldi	r25, 0x00	; 0
    adf0:	84 bf       	out	0x34, r24	; 52
    adf2:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    adf4:	1f 91       	pop	r17
    adf6:	0f 91       	pop	r16
    adf8:	ff 90       	pop	r15
    adfa:	ef 90       	pop	r14
    adfc:	df 90       	pop	r13
    adfe:	08 95       	ret

0000ae00 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    ae00:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ae02:	e0 ec       	ldi	r30, 0xC0	; 192
    ae04:	f1 e0       	ldi	r31, 0x01	; 1
    ae06:	80 91 cf 01 	lds	r24, 0x01CF
    ae0a:	87 fd       	sbrc	r24, 7
    ae0c:	fa cf       	rjmp	.-12     	; 0xae02 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ae0e:	83 e3       	ldi	r24, 0x33	; 51
    ae10:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    ae12:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    ae16:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ae18:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    ae1a:	64 83       	std	Z+4, r22	; 0x04
}
    ae1c:	08 95       	ret

0000ae1e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    ae1e:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ae20:	e0 ec       	ldi	r30, 0xC0	; 192
    ae22:	f1 e0       	ldi	r31, 0x01	; 1
    ae24:	80 91 cf 01 	lds	r24, 0x01CF
    ae28:	87 fd       	sbrc	r24, 7
    ae2a:	fa cf       	rjmp	.-12     	; 0xae20 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    ae2c:	83 e3       	ldi	r24, 0x33	; 51
    ae2e:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    ae30:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    ae32:	12 82       	std	Z+2, r1	; 0x02
    ae34:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    ae36:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    ae3a:	8d 91       	ld	r24, X+
    ae3c:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    ae3e:	9f 5f       	subi	r25, 0xFF	; 255
    ae40:	90 32       	cpi	r25, 0x20	; 32
    ae42:	c9 f7       	brne	.-14     	; 0xae36 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    ae44:	08 95       	ret

0000ae46 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    ae46:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ae48:	e0 ec       	ldi	r30, 0xC0	; 192
    ae4a:	f1 e0       	ldi	r31, 0x01	; 1
    ae4c:	80 91 cf 01 	lds	r24, 0x01CF
    ae50:	87 fd       	sbrc	r24, 7
    ae52:	fa cf       	rjmp	.-12     	; 0xae48 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ae54:	89 2f       	mov	r24, r25
    ae56:	90 e0       	ldi	r25, 0x00	; 0
    ae58:	65 e0       	ldi	r22, 0x05	; 5
    ae5a:	88 0f       	add	r24, r24
    ae5c:	99 1f       	adc	r25, r25
    ae5e:	6a 95       	dec	r22
    ae60:	e1 f7       	brne	.-8      	; 0xae5a <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    ae62:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    ae66:	89 2f       	mov	r24, r25
    ae68:	8f 71       	andi	r24, 0x1F	; 31
    ae6a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    ae6c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    ae6e:	85 e3       	ldi	r24, 0x35	; 53
    ae70:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    ae72:	eb ec       	ldi	r30, 0xCB	; 203
    ae74:	f1 e0       	ldi	r31, 0x01	; 1
    ae76:	21 e0       	ldi	r18, 0x01	; 1
    ae78:	30 e0       	ldi	r19, 0x00	; 0
    ae7a:	88 ed       	ldi	r24, 0xD8	; 216
    ae7c:	90 e0       	ldi	r25, 0x00	; 0
    ae7e:	84 bf       	out	0x34, r24	; 52
    ae80:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    ae82:	08 95       	ret

0000ae84 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    ae84:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    ae86:	e0 ec       	ldi	r30, 0xC0	; 192
    ae88:	f1 e0       	ldi	r31, 0x01	; 1
    ae8a:	80 91 cf 01 	lds	r24, 0x01CF
    ae8e:	87 fd       	sbrc	r24, 7
    ae90:	fa cf       	rjmp	.-12     	; 0xae86 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    ae92:	89 2f       	mov	r24, r25
    ae94:	90 e0       	ldi	r25, 0x00	; 0
    ae96:	75 e0       	ldi	r23, 0x05	; 5
    ae98:	88 0f       	add	r24, r24
    ae9a:	99 1f       	adc	r25, r25
    ae9c:	7a 95       	dec	r23
    ae9e:	e1 f7       	brne	.-8      	; 0xae98 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    aea0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aea4:	89 2f       	mov	r24, r25
    aea6:	8f 71       	andi	r24, 0x1F	; 31
    aea8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aeaa:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    aeac:	82 e3       	ldi	r24, 0x32	; 50
    aeae:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aeb0:	eb ec       	ldi	r30, 0xCB	; 203
    aeb2:	f1 e0       	ldi	r31, 0x01	; 1
    aeb4:	21 e0       	ldi	r18, 0x01	; 1
    aeb6:	30 e0       	ldi	r19, 0x00	; 0
    aeb8:	88 ed       	ldi	r24, 0xD8	; 216
    aeba:	90 e0       	ldi	r25, 0x00	; 0
    aebc:	84 bf       	out	0x34, r24	; 52
    aebe:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    aec0:	08 95       	ret

0000aec2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    aec2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    aec4:	e0 ec       	ldi	r30, 0xC0	; 192
    aec6:	f1 e0       	ldi	r31, 0x01	; 1
    aec8:	80 91 cf 01 	lds	r24, 0x01CF
    aecc:	87 fd       	sbrc	r24, 7
    aece:	fa cf       	rjmp	.-12     	; 0xaec4 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    aed0:	89 2f       	mov	r24, r25
    aed2:	90 e0       	ldi	r25, 0x00	; 0
    aed4:	a5 e0       	ldi	r26, 0x05	; 5
    aed6:	88 0f       	add	r24, r24
    aed8:	99 1f       	adc	r25, r25
    aeda:	aa 95       	dec	r26
    aedc:	e1 f7       	brne	.-8      	; 0xaed6 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    aede:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    aee2:	89 2f       	mov	r24, r25
    aee4:	8f 71       	andi	r24, 0x1F	; 31
    aee6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    aee8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    aeea:	84 e3       	ldi	r24, 0x34	; 52
    aeec:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    aeee:	eb ec       	ldi	r30, 0xCB	; 203
    aef0:	f1 e0       	ldi	r31, 0x01	; 1
    aef2:	21 e0       	ldi	r18, 0x01	; 1
    aef4:	30 e0       	ldi	r19, 0x00	; 0
    aef6:	88 ed       	ldi	r24, 0xD8	; 216
    aef8:	90 e0       	ldi	r25, 0x00	; 0
    aefa:	84 bf       	out	0x34, r24	; 52
    aefc:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    aefe:	08 95       	ret

0000af00 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    af00:	80 91 cf 01 	lds	r24, 0x01CF
    af04:	87 fd       	sbrc	r24, 7
    af06:	fc cf       	rjmp	.-8      	; 0xaf00 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    af08:	80 e3       	ldi	r24, 0x30	; 48
    af0a:	e0 ec       	ldi	r30, 0xC0	; 192
    af0c:	f1 e0       	ldi	r31, 0x01	; 1
    af0e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    af10:	eb ec       	ldi	r30, 0xCB	; 203
    af12:	f1 e0       	ldi	r31, 0x01	; 1
    af14:	21 e0       	ldi	r18, 0x01	; 1
    af16:	30 e0       	ldi	r19, 0x00	; 0
    af18:	88 ed       	ldi	r24, 0xD8	; 216
    af1a:	90 e0       	ldi	r25, 0x00	; 0
    af1c:	84 bf       	out	0x34, r24	; 52
    af1e:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    af20:	08 95       	ret

0000af22 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    af22:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    af24:	19 f4       	brne	.+6      	; 0xaf2c <xputc+0xa>
	ldi	r24, 13		;
    af26:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    af28:	01 d0       	rcall	.+2      	; 0xaf2c <xputc+0xa>
	ldi	r24, 10		;/
    af2a:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    af2c:	ff 93       	push	r31
	push	ZL
    af2e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    af30:	e0 91 7d 25 	lds	r30, 0x257D
	lds	ZH, xfunc_out+1	;/
    af34:	f0 91 7e 25 	lds	r31, 0x257E
	icall
    af38:	09 95       	icall
	pop	ZL
    af3a:	ef 91       	pop	r30
	pop	ZH
    af3c:	ff 91       	pop	r31
	ret
    af3e:	08 95       	ret

0000af40 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    af40:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    af42:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    af44:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    af46:	11 f0       	breq	.+4      	; 0xaf4c <xputs+0xc>
	rcall	xputc
    af48:	ec df       	rcall	.-40     	; 0xaf22 <xputc>
	rjmp	1b
    af4a:	fb cf       	rjmp	.-10     	; 0xaf42 <xputs+0x2>
2:	ret
    af4c:	08 95       	ret

0000af4e <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    af4e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    af50:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    af52:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    af54:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    af56:	0c c0       	rjmp	.+24     	; 0xaf70 <xitoa+0x22>
	neg	r20		;
    af58:	41 95       	neg	r20
	sbrs	r25, 7		;
    af5a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    af5c:	09 c0       	rjmp	.+18     	; 0xaf70 <xitoa+0x22>
	ldi	r30, '-'	;
    af5e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    af60:	60 95       	com	r22
	com	r23		;
    af62:	70 95       	com	r23
	com	r24		;
    af64:	80 95       	com	r24
	com	r25		;
    af66:	90 95       	com	r25
	adc	r22, r1		;
    af68:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    af6a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    af6c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    af6e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    af70:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    af72:	02 c0       	rjmp	.+4      	; 0xaf78 <xitoa+0x2a>
	neg	r18		;
    af74:	21 95       	neg	r18
	ldi	r19, '0'	;/
    af76:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    af78:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    af7a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    af7c:	66 0f       	add	r22, r22
	rol	r23		;
    af7e:	77 1f       	adc	r23, r23
	rol	r24		;
    af80:	88 1f       	adc	r24, r24
	rol	r25		;
    af82:	99 1f       	adc	r25, r25
	rol	r26		;
    af84:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    af86:	a4 17       	cp	r26, r20
	brcs	3f		;
    af88:	10 f0       	brcs	.+4      	; 0xaf8e <xitoa+0x40>
	sub	r26, r20	;
    af8a:	a4 1b       	sub	r26, r20
	inc	r22		;
    af8c:	63 95       	inc	r22
3:	dec	r21		;
    af8e:	5a 95       	dec	r21
	brne	2b		;/
    af90:	a9 f7       	brne	.-22     	; 0xaf7c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    af92:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    af94:	08 f0       	brcs	.+2      	; 0xaf98 <xitoa+0x4a>
	subi	r26, -7		;
    af96:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    af98:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    af9a:	af 93       	push	r26
	inc	r31		;/
    af9c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    af9e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    afa0:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    afa2:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    afa4:	91 05       	cpc	r25, r1
	brne	1b		;/
    afa6:	41 f7       	brne	.-48     	; 0xaf78 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    afa8:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    afaa:	11 f4       	brne	.+4      	; 0xafb0 <xitoa+0x62>
	push	r30		;
    afac:	ef 93       	push	r30
	inc	r31		;/
    afae:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    afb0:	f2 17       	cp	r31, r18
	brcc	6f		;
    afb2:	18 f4       	brcc	.+6      	; 0xafba <xitoa+0x6c>
	push	r19		;
    afb4:	3f 93       	push	r19
	inc	r31		;
    afb6:	f3 95       	inc	r31
	rjmp	5b		;/
    afb8:	fb cf       	rjmp	.-10     	; 0xafb0 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    afba:	8f 91       	pop	r24
	rcall	xputc		;
    afbc:	b2 df       	rcall	.-156    	; 0xaf22 <xputc>
	dec	r31		;
    afbe:	fa 95       	dec	r31
	brne	6b		;/
    afc0:	e1 f7       	brne	.-8      	; 0xafba <xitoa+0x6c>

	ret
    afc2:	08 95       	ret

0000afc4 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    afc4:	df 93       	push	r29
	push	YL
    afc6:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    afc8:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    afca:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    afcc:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    afce:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    afd0:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    afd2:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    afd4:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    afd6:	21 f0       	breq	.+8      	; 0xafe0 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    afd8:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    afda:	29 f0       	breq	.+10     	; 0xafe6 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    afdc:	a2 df       	rcall	.-188    	; 0xaf22 <xputc>
	rjmp	0b		;/
    afde:	f9 cf       	rjmp	.-14     	; 0xafd2 <xprintf+0xe>
90:	pop	YL
    afe0:	cf 91       	pop	r28
	pop	YH
    afe2:	df 91       	pop	r29
	ret
    afe4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    afe6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    afe8:	e8 94       	clt
	_LPMI	r21		;Get flags
    afea:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    afec:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    afee:	b1 f3       	breq	.-20     	; 0xafdc <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    aff0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    aff2:	11 f4       	brne	.+4      	; 0xaff8 <xprintf+0x34>
	set			;/
    aff4:	68 94       	set
22:	_LPMI	r21		;Get width
    aff6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    aff8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    affa:	48 f4       	brcc	.+18     	; 0xb00e <xprintf+0x4a>
	subi	r21, '0'	;
    affc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    affe:	80 f3       	brcs	.-32     	; 0xafe0 <xprintf+0x1c>
	lsl	r18		;
    b000:	22 0f       	add	r18, r18
	mov	r0, r18		;
    b002:	02 2e       	mov	r0, r18
	lsl	r18		;
    b004:	22 0f       	add	r18, r18
	lsl	r18		;
    b006:	22 0f       	add	r18, r18
	add	r18, r0		;
    b008:	20 0d       	add	r18, r0
	add	r18, r21	;
    b00a:	25 0f       	add	r18, r21
	rjmp	22b		;/
    b00c:	f4 cf       	rjmp	.-24     	; 0xaff6 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    b00e:	0e f4       	brtc	.+2      	; 0xb012 <xprintf+0x4e>
	neg	r18		;
    b010:	21 95       	neg	r18
25:	ld	r24, Y+		;
    b012:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    b014:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    b016:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    b018:	09 f3       	breq	.-62     	; 0xafdc <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    b01a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    b01c:	29 f1       	breq	.+74     	; 0xb068 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    b01e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    b020:	59 f1       	breq	.+86     	; 0xb078 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    b022:	bc 01       	movw	r22, r24
	clr	r24		;
    b024:	88 27       	eor	r24, r24
	clr	r25		;
    b026:	99 27       	eor	r25, r25
	clt			;/
    b028:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    b02a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    b02c:	21 f4       	brne	.+8      	; 0xb036 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    b02e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    b030:	99 91       	ld	r25, Y+
	set			;
    b032:	68 94       	set
	_LPMI	r21		;/
    b034:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    b036:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    b038:	39 f4       	brne	.+14     	; 0xb048 <xprintf+0x84>
	ldi	r20, -10	;
    b03a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    b03c:	7e f0       	brts	.+30     	; 0xb05c <xprintf+0x98>
	sbrs	r23, 7		;
    b03e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    b040:	0d c0       	rjmp	.+26     	; 0xb05c <xprintf+0x98>
	ldi	r24, -1		;
    b042:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    b044:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    b046:	0a c0       	rjmp	.+20     	; 0xb05c <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    b048:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    b04a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    b04c:	39 f0       	breq	.+14     	; 0xb05c <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    b04e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    b050:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    b052:	21 f0       	breq	.+8      	; 0xb05c <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    b054:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    b056:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    b058:	09 f0       	breq	.+2      	; 0xb05c <xprintf+0x98>
	rjmp	90b		;abort
    b05a:	c2 cf       	rjmp	.-124    	; 0xafe0 <xprintf+0x1c>
40:	push	ZH		;Output the value
    b05c:	ff 93       	push	r31
	push	ZL		;
    b05e:	ef 93       	push	r30
	rcall	xitoa		;
    b060:	76 df       	rcall	.-276    	; 0xaf4e <xitoa>
42:	pop	ZL		;
    b062:	ef 91       	pop	r30
	pop	ZH		;
    b064:	ff 91       	pop	r31
	rjmp	0b		;/
    b066:	b5 cf       	rjmp	.-150    	; 0xafd2 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    b068:	ff 93       	push	r31
	push	ZL
    b06a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    b06c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    b06e:	81 91       	ld	r24, Z+
	cpi	r24, 0
    b070:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    b072:	b9 f3       	breq	.-18     	; 0xb062 <xprintf+0x9e>
	rcall	xputc
    b074:	56 df       	rcall	.-340    	; 0xaf22 <xputc>
	rjmp	51b
    b076:	fb cf       	rjmp	.-10     	; 0xb06e <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    b078:	ff 93       	push	r31
	push	ZL
    b07a:	ef 93       	push	r30
	rcall	xputs
    b07c:	61 df       	rcall	.-318    	; 0xaf40 <xputs>
	rjmp	42b
    b07e:	f1 cf       	rjmp	.-30     	; 0xb062 <xprintf+0x9e>

0000b080 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    b080:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    b082:	dc 01       	movw	r26, r24
	ld	ZL, X+
    b084:	ed 91       	ld	r30, X+
	ld	ZH, X+
    b086:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    b088:	22 27       	eor	r18, r18
	clr	r19		;
    b08a:	33 27       	eor	r19, r19
	clr	r20		;
    b08c:	44 27       	eor	r20, r20
	clr	r21		;/
    b08e:	55 27       	eor	r21, r21
	clt			;T = 0;
    b090:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    b092:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    b094:	01 c0       	rjmp	.+2      	; 0xb098 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    b096:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    b098:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    b09a:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    b09c:	e1 f3       	breq	.-8      	; 0xb096 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    b09e:	a8 f1       	brcs	.+106    	; 0xb10a <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    b0a0:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    b0a2:	11 f4       	brne	.+4      	; 0xb0a8 <xatoi+0x28>
	set			; continue;
    b0a4:	68 94       	set
	rjmp	40b		;}
    b0a6:	f7 cf       	rjmp	.-18     	; 0xb096 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    b0a8:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    b0aa:	78 f5       	brcc	.+94     	; 0xb10a <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    b0ac:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    b0ae:	68 f1       	brcs	.+90     	; 0xb10a <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    b0b0:	71 f4       	brne	.+28     	; 0xb0ce <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    b0b2:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    b0b4:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    b0b6:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    b0b8:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b0ba:	48 f1       	brcs	.+82     	; 0xb10e <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    b0bc:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    b0be:	11 f4       	brne	.+4      	; 0xb0c4 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    b0c0:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    b0c2:	03 c0       	rjmp	.+6      	; 0xb0ca <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    b0c4:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    b0c6:	19 f4       	brne	.+6      	; 0xb0ce <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    b0c8:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    b0ca:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    b0cc:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    b0ce:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b0d0:	f0 f0       	brcs	.+60     	; 0xb10e <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    b0d2:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    b0d4:	08 f0       	brcs	.+2      	; 0xb0d8 <xatoi+0x58>
	subi	r22, 0x20	;/
    b0d6:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    b0d8:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    b0da:	b8 f0       	brcs	.+46     	; 0xb10a <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    b0dc:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    b0de:	18 f0       	brcs	.+6      	; 0xb0e6 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    b0e0:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    b0e2:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    b0e4:	90 f0       	brcs	.+36     	; 0xb10a <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    b0e6:	69 17       	cp	r22, r25
	brcc	70f		;/
    b0e8:	80 f4       	brcc	.+32     	; 0xb10a <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    b0ea:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    b0ec:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    b0ee:	08 f4       	brcc	.+2      	; 0xb0f2 <xatoi+0x72>
	add	r23, r25	;
    b0f0:	79 0f       	add	r23, r25
62:	lsr	r23		;
    b0f2:	76 95       	lsr	r23
	ror	r21		;
    b0f4:	57 95       	ror	r21
	ror	r20		;
    b0f6:	47 95       	ror	r20
	ror	r19		;
    b0f8:	37 95       	ror	r19
	ror	r18		;
    b0fa:	27 95       	ror	r18
	dec	r24		;
    b0fc:	8a 95       	dec	r24
	brne	61b		;/
    b0fe:	b9 f7       	brne	.-18     	; 0xb0ee <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    b100:	26 0f       	add	r18, r22
	adc	r19, r24	;
    b102:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    b104:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    b106:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    b108:	e0 cf       	rjmp	.-64     	; 0xb0ca <xatoi+0x4a>

70:	ldi	r24, 0
    b10a:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    b10c:	01 c0       	rjmp	.+2      	; 0xb110 <xatoi+0x90>
80:	ldi	r24, 1
    b10e:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    b110:	4e f4       	brtc	.+18     	; 0xb124 <xatoi+0xa4>
	clr	r22
    b112:	66 27       	eor	r22, r22
	com	r18
    b114:	20 95       	com	r18
	com	r19
    b116:	30 95       	com	r19
	com	r20
    b118:	40 95       	com	r20
	com	r21
    b11a:	50 95       	com	r21
	adc	r18, r22
    b11c:	26 1f       	adc	r18, r22
	adc	r19, r22
    b11e:	36 1f       	adc	r19, r22
	adc	r20, r22
    b120:	46 1f       	adc	r20, r22
	adc	r21, r22
    b122:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    b124:	fe 93       	st	-X, r31
	st	-X, ZL
    b126:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    b128:	d0 01       	movw	r26, r0
	st	X+, r18
    b12a:	2d 93       	st	X+, r18
	st	X+, r19
    b12c:	3d 93       	st	X+, r19
	st	X+, r20
    b12e:	4d 93       	st	X+, r20
	st	X+, r21
    b130:	5d 93       	st	X+, r21
	clr	r1
    b132:	11 24       	eor	r1, r1
	ret
    b134:	08 95       	ret

0000b136 <__mulsi3>:
    b136:	62 9f       	mul	r22, r18
    b138:	d0 01       	movw	r26, r0
    b13a:	73 9f       	mul	r23, r19
    b13c:	f0 01       	movw	r30, r0
    b13e:	82 9f       	mul	r24, r18
    b140:	e0 0d       	add	r30, r0
    b142:	f1 1d       	adc	r31, r1
    b144:	64 9f       	mul	r22, r20
    b146:	e0 0d       	add	r30, r0
    b148:	f1 1d       	adc	r31, r1
    b14a:	92 9f       	mul	r25, r18
    b14c:	f0 0d       	add	r31, r0
    b14e:	83 9f       	mul	r24, r19
    b150:	f0 0d       	add	r31, r0
    b152:	74 9f       	mul	r23, r20
    b154:	f0 0d       	add	r31, r0
    b156:	65 9f       	mul	r22, r21
    b158:	f0 0d       	add	r31, r0
    b15a:	99 27       	eor	r25, r25
    b15c:	72 9f       	mul	r23, r18
    b15e:	b0 0d       	add	r27, r0
    b160:	e1 1d       	adc	r30, r1
    b162:	f9 1f       	adc	r31, r25
    b164:	63 9f       	mul	r22, r19
    b166:	b0 0d       	add	r27, r0
    b168:	e1 1d       	adc	r30, r1
    b16a:	f9 1f       	adc	r31, r25
    b16c:	bd 01       	movw	r22, r26
    b16e:	cf 01       	movw	r24, r30
    b170:	11 24       	eor	r1, r1
    b172:	08 95       	ret

0000b174 <__udivmodhi4>:
    b174:	aa 1b       	sub	r26, r26
    b176:	bb 1b       	sub	r27, r27
    b178:	51 e1       	ldi	r21, 0x11	; 17
    b17a:	07 c0       	rjmp	.+14     	; 0xb18a <__udivmodhi4_ep>

0000b17c <__udivmodhi4_loop>:
    b17c:	aa 1f       	adc	r26, r26
    b17e:	bb 1f       	adc	r27, r27
    b180:	a6 17       	cp	r26, r22
    b182:	b7 07       	cpc	r27, r23
    b184:	10 f0       	brcs	.+4      	; 0xb18a <__udivmodhi4_ep>
    b186:	a6 1b       	sub	r26, r22
    b188:	b7 0b       	sbc	r27, r23

0000b18a <__udivmodhi4_ep>:
    b18a:	88 1f       	adc	r24, r24
    b18c:	99 1f       	adc	r25, r25
    b18e:	5a 95       	dec	r21
    b190:	a9 f7       	brne	.-22     	; 0xb17c <__udivmodhi4_loop>
    b192:	80 95       	com	r24
    b194:	90 95       	com	r25
    b196:	bc 01       	movw	r22, r24
    b198:	cd 01       	movw	r24, r26
    b19a:	08 95       	ret

0000b19c <__divmodhi4>:
    b19c:	97 fb       	bst	r25, 7
    b19e:	09 2e       	mov	r0, r25
    b1a0:	07 26       	eor	r0, r23
    b1a2:	0a d0       	rcall	.+20     	; 0xb1b8 <__divmodhi4_neg1>
    b1a4:	77 fd       	sbrc	r23, 7
    b1a6:	04 d0       	rcall	.+8      	; 0xb1b0 <__divmodhi4_neg2>
    b1a8:	e5 df       	rcall	.-54     	; 0xb174 <__udivmodhi4>
    b1aa:	06 d0       	rcall	.+12     	; 0xb1b8 <__divmodhi4_neg1>
    b1ac:	00 20       	and	r0, r0
    b1ae:	1a f4       	brpl	.+6      	; 0xb1b6 <__divmodhi4_exit>

0000b1b0 <__divmodhi4_neg2>:
    b1b0:	70 95       	com	r23
    b1b2:	61 95       	neg	r22
    b1b4:	7f 4f       	sbci	r23, 0xFF	; 255

0000b1b6 <__divmodhi4_exit>:
    b1b6:	08 95       	ret

0000b1b8 <__divmodhi4_neg1>:
    b1b8:	f6 f7       	brtc	.-4      	; 0xb1b6 <__divmodhi4_exit>
    b1ba:	90 95       	com	r25
    b1bc:	81 95       	neg	r24
    b1be:	9f 4f       	sbci	r25, 0xFF	; 255
    b1c0:	08 95       	ret

0000b1c2 <__udivmodsi4>:
    b1c2:	a1 e2       	ldi	r26, 0x21	; 33
    b1c4:	1a 2e       	mov	r1, r26
    b1c6:	aa 1b       	sub	r26, r26
    b1c8:	bb 1b       	sub	r27, r27
    b1ca:	fd 01       	movw	r30, r26
    b1cc:	0d c0       	rjmp	.+26     	; 0xb1e8 <__udivmodsi4_ep>

0000b1ce <__udivmodsi4_loop>:
    b1ce:	aa 1f       	adc	r26, r26
    b1d0:	bb 1f       	adc	r27, r27
    b1d2:	ee 1f       	adc	r30, r30
    b1d4:	ff 1f       	adc	r31, r31
    b1d6:	a2 17       	cp	r26, r18
    b1d8:	b3 07       	cpc	r27, r19
    b1da:	e4 07       	cpc	r30, r20
    b1dc:	f5 07       	cpc	r31, r21
    b1de:	20 f0       	brcs	.+8      	; 0xb1e8 <__udivmodsi4_ep>
    b1e0:	a2 1b       	sub	r26, r18
    b1e2:	b3 0b       	sbc	r27, r19
    b1e4:	e4 0b       	sbc	r30, r20
    b1e6:	f5 0b       	sbc	r31, r21

0000b1e8 <__udivmodsi4_ep>:
    b1e8:	66 1f       	adc	r22, r22
    b1ea:	77 1f       	adc	r23, r23
    b1ec:	88 1f       	adc	r24, r24
    b1ee:	99 1f       	adc	r25, r25
    b1f0:	1a 94       	dec	r1
    b1f2:	69 f7       	brne	.-38     	; 0xb1ce <__udivmodsi4_loop>
    b1f4:	60 95       	com	r22
    b1f6:	70 95       	com	r23
    b1f8:	80 95       	com	r24
    b1fa:	90 95       	com	r25
    b1fc:	9b 01       	movw	r18, r22
    b1fe:	ac 01       	movw	r20, r24
    b200:	bd 01       	movw	r22, r26
    b202:	cf 01       	movw	r24, r30
    b204:	08 95       	ret

0000b206 <__divmodsi4>:
    b206:	97 fb       	bst	r25, 7
    b208:	09 2e       	mov	r0, r25
    b20a:	05 26       	eor	r0, r21
    b20c:	0e d0       	rcall	.+28     	; 0xb22a <__divmodsi4_neg1>
    b20e:	57 fd       	sbrc	r21, 7
    b210:	04 d0       	rcall	.+8      	; 0xb21a <__divmodsi4_neg2>
    b212:	d7 df       	rcall	.-82     	; 0xb1c2 <__udivmodsi4>
    b214:	0a d0       	rcall	.+20     	; 0xb22a <__divmodsi4_neg1>
    b216:	00 1c       	adc	r0, r0
    b218:	38 f4       	brcc	.+14     	; 0xb228 <__divmodsi4_exit>

0000b21a <__divmodsi4_neg2>:
    b21a:	50 95       	com	r21
    b21c:	40 95       	com	r20
    b21e:	30 95       	com	r19
    b220:	21 95       	neg	r18
    b222:	3f 4f       	sbci	r19, 0xFF	; 255
    b224:	4f 4f       	sbci	r20, 0xFF	; 255
    b226:	5f 4f       	sbci	r21, 0xFF	; 255

0000b228 <__divmodsi4_exit>:
    b228:	08 95       	ret

0000b22a <__divmodsi4_neg1>:
    b22a:	f6 f7       	brtc	.-4      	; 0xb228 <__divmodsi4_exit>
    b22c:	90 95       	com	r25
    b22e:	80 95       	com	r24
    b230:	70 95       	com	r23
    b232:	61 95       	neg	r22
    b234:	7f 4f       	sbci	r23, 0xFF	; 255
    b236:	8f 4f       	sbci	r24, 0xFF	; 255
    b238:	9f 4f       	sbci	r25, 0xFF	; 255
    b23a:	08 95       	ret

0000b23c <__prologue_saves__>:
    b23c:	2f 92       	push	r2
    b23e:	3f 92       	push	r3
    b240:	4f 92       	push	r4
    b242:	5f 92       	push	r5
    b244:	6f 92       	push	r6
    b246:	7f 92       	push	r7
    b248:	8f 92       	push	r8
    b24a:	9f 92       	push	r9
    b24c:	af 92       	push	r10
    b24e:	bf 92       	push	r11
    b250:	cf 92       	push	r12
    b252:	df 92       	push	r13
    b254:	ef 92       	push	r14
    b256:	ff 92       	push	r15
    b258:	0f 93       	push	r16
    b25a:	1f 93       	push	r17
    b25c:	cf 93       	push	r28
    b25e:	df 93       	push	r29
    b260:	cd b7       	in	r28, 0x3d	; 61
    b262:	de b7       	in	r29, 0x3e	; 62
    b264:	ca 1b       	sub	r28, r26
    b266:	db 0b       	sbc	r29, r27
    b268:	0f b6       	in	r0, 0x3f	; 63
    b26a:	f8 94       	cli
    b26c:	de bf       	out	0x3e, r29	; 62
    b26e:	0f be       	out	0x3f, r0	; 63
    b270:	cd bf       	out	0x3d, r28	; 61
    b272:	19 94       	eijmp

0000b274 <__epilogue_restores__>:
    b274:	2a 88       	ldd	r2, Y+18	; 0x12
    b276:	39 88       	ldd	r3, Y+17	; 0x11
    b278:	48 88       	ldd	r4, Y+16	; 0x10
    b27a:	5f 84       	ldd	r5, Y+15	; 0x0f
    b27c:	6e 84       	ldd	r6, Y+14	; 0x0e
    b27e:	7d 84       	ldd	r7, Y+13	; 0x0d
    b280:	8c 84       	ldd	r8, Y+12	; 0x0c
    b282:	9b 84       	ldd	r9, Y+11	; 0x0b
    b284:	aa 84       	ldd	r10, Y+10	; 0x0a
    b286:	b9 84       	ldd	r11, Y+9	; 0x09
    b288:	c8 84       	ldd	r12, Y+8	; 0x08
    b28a:	df 80       	ldd	r13, Y+7	; 0x07
    b28c:	ee 80       	ldd	r14, Y+6	; 0x06
    b28e:	fd 80       	ldd	r15, Y+5	; 0x05
    b290:	0c 81       	ldd	r16, Y+4	; 0x04
    b292:	1b 81       	ldd	r17, Y+3	; 0x03
    b294:	aa 81       	ldd	r26, Y+2	; 0x02
    b296:	b9 81       	ldd	r27, Y+1	; 0x01
    b298:	ce 0f       	add	r28, r30
    b29a:	d1 1d       	adc	r29, r1
    b29c:	0f b6       	in	r0, 0x3f	; 63
    b29e:	f8 94       	cli
    b2a0:	de bf       	out	0x3e, r29	; 62
    b2a2:	0f be       	out	0x3f, r0	; 63
    b2a4:	cd bf       	out	0x3d, r28	; 61
    b2a6:	ed 01       	movw	r28, r26
    b2a8:	08 95       	ret

0000b2aa <__tablejump2__>:
    b2aa:	ee 0f       	add	r30, r30
    b2ac:	ff 1f       	adc	r31, r31

0000b2ae <__tablejump__>:
    b2ae:	05 90       	lpm	r0, Z+
    b2b0:	f4 91       	lpm	r31, Z+
    b2b2:	e0 2d       	mov	r30, r0
    b2b4:	19 94       	eijmp

0000b2b6 <malloc>:
    b2b6:	cf 93       	push	r28
    b2b8:	df 93       	push	r29
    b2ba:	bc 01       	movw	r22, r24
    b2bc:	82 30       	cpi	r24, 0x02	; 2
    b2be:	91 05       	cpc	r25, r1
    b2c0:	10 f4       	brcc	.+4      	; 0xb2c6 <malloc+0x10>
    b2c2:	62 e0       	ldi	r22, 0x02	; 2
    b2c4:	70 e0       	ldi	r23, 0x00	; 0
    b2c6:	a0 91 1f 2c 	lds	r26, 0x2C1F
    b2ca:	b0 91 20 2c 	lds	r27, 0x2C20
    b2ce:	ed 01       	movw	r28, r26
    b2d0:	e0 e0       	ldi	r30, 0x00	; 0
    b2d2:	f0 e0       	ldi	r31, 0x00	; 0
    b2d4:	40 e0       	ldi	r20, 0x00	; 0
    b2d6:	50 e0       	ldi	r21, 0x00	; 0
    b2d8:	21 c0       	rjmp	.+66     	; 0xb31c <malloc+0x66>
    b2da:	88 81       	ld	r24, Y
    b2dc:	99 81       	ldd	r25, Y+1	; 0x01
    b2de:	86 17       	cp	r24, r22
    b2e0:	97 07       	cpc	r25, r23
    b2e2:	69 f4       	brne	.+26     	; 0xb2fe <malloc+0x48>
    b2e4:	8a 81       	ldd	r24, Y+2	; 0x02
    b2e6:	9b 81       	ldd	r25, Y+3	; 0x03
    b2e8:	30 97       	sbiw	r30, 0x00	; 0
    b2ea:	19 f0       	breq	.+6      	; 0xb2f2 <malloc+0x3c>
    b2ec:	82 83       	std	Z+2, r24	; 0x02
    b2ee:	93 83       	std	Z+3, r25	; 0x03
    b2f0:	04 c0       	rjmp	.+8      	; 0xb2fa <malloc+0x44>
    b2f2:	80 93 1f 2c 	sts	0x2C1F, r24
    b2f6:	90 93 20 2c 	sts	0x2C20, r25
    b2fa:	fe 01       	movw	r30, r28
    b2fc:	34 c0       	rjmp	.+104    	; 0xb366 <malloc+0xb0>
    b2fe:	68 17       	cp	r22, r24
    b300:	79 07       	cpc	r23, r25
    b302:	38 f4       	brcc	.+14     	; 0xb312 <malloc+0x5c>
    b304:	41 15       	cp	r20, r1
    b306:	51 05       	cpc	r21, r1
    b308:	19 f0       	breq	.+6      	; 0xb310 <malloc+0x5a>
    b30a:	84 17       	cp	r24, r20
    b30c:	95 07       	cpc	r25, r21
    b30e:	08 f4       	brcc	.+2      	; 0xb312 <malloc+0x5c>
    b310:	ac 01       	movw	r20, r24
    b312:	fe 01       	movw	r30, r28
    b314:	8a 81       	ldd	r24, Y+2	; 0x02
    b316:	9b 81       	ldd	r25, Y+3	; 0x03
    b318:	9c 01       	movw	r18, r24
    b31a:	e9 01       	movw	r28, r18
    b31c:	20 97       	sbiw	r28, 0x00	; 0
    b31e:	e9 f6       	brne	.-70     	; 0xb2da <malloc+0x24>
    b320:	41 15       	cp	r20, r1
    b322:	51 05       	cpc	r21, r1
    b324:	a9 f1       	breq	.+106    	; 0xb390 <malloc+0xda>
    b326:	ca 01       	movw	r24, r20
    b328:	86 1b       	sub	r24, r22
    b32a:	97 0b       	sbc	r25, r23
    b32c:	04 97       	sbiw	r24, 0x04	; 4
    b32e:	08 f4       	brcc	.+2      	; 0xb332 <malloc+0x7c>
    b330:	ba 01       	movw	r22, r20
    b332:	e0 e0       	ldi	r30, 0x00	; 0
    b334:	f0 e0       	ldi	r31, 0x00	; 0
    b336:	2a c0       	rjmp	.+84     	; 0xb38c <malloc+0xd6>
    b338:	8d 91       	ld	r24, X+
    b33a:	9c 91       	ld	r25, X
    b33c:	11 97       	sbiw	r26, 0x01	; 1
    b33e:	84 17       	cp	r24, r20
    b340:	95 07       	cpc	r25, r21
    b342:	f9 f4       	brne	.+62     	; 0xb382 <malloc+0xcc>
    b344:	64 17       	cp	r22, r20
    b346:	75 07       	cpc	r23, r21
    b348:	81 f4       	brne	.+32     	; 0xb36a <malloc+0xb4>
    b34a:	12 96       	adiw	r26, 0x02	; 2
    b34c:	8d 91       	ld	r24, X+
    b34e:	9c 91       	ld	r25, X
    b350:	13 97       	sbiw	r26, 0x03	; 3
    b352:	30 97       	sbiw	r30, 0x00	; 0
    b354:	19 f0       	breq	.+6      	; 0xb35c <malloc+0xa6>
    b356:	82 83       	std	Z+2, r24	; 0x02
    b358:	93 83       	std	Z+3, r25	; 0x03
    b35a:	04 c0       	rjmp	.+8      	; 0xb364 <malloc+0xae>
    b35c:	80 93 1f 2c 	sts	0x2C1F, r24
    b360:	90 93 20 2c 	sts	0x2C20, r25
    b364:	fd 01       	movw	r30, r26
    b366:	32 96       	adiw	r30, 0x02	; 2
    b368:	4f c0       	rjmp	.+158    	; 0xb408 <malloc+0x152>
    b36a:	ca 01       	movw	r24, r20
    b36c:	86 1b       	sub	r24, r22
    b36e:	97 0b       	sbc	r25, r23
    b370:	fd 01       	movw	r30, r26
    b372:	e8 0f       	add	r30, r24
    b374:	f9 1f       	adc	r31, r25
    b376:	61 93       	st	Z+, r22
    b378:	71 93       	st	Z+, r23
    b37a:	02 97       	sbiw	r24, 0x02	; 2
    b37c:	8d 93       	st	X+, r24
    b37e:	9c 93       	st	X, r25
    b380:	43 c0       	rjmp	.+134    	; 0xb408 <malloc+0x152>
    b382:	fd 01       	movw	r30, r26
    b384:	82 81       	ldd	r24, Z+2	; 0x02
    b386:	93 81       	ldd	r25, Z+3	; 0x03
    b388:	9c 01       	movw	r18, r24
    b38a:	d9 01       	movw	r26, r18
    b38c:	10 97       	sbiw	r26, 0x00	; 0
    b38e:	a1 f6       	brne	.-88     	; 0xb338 <malloc+0x82>
    b390:	80 91 1d 2c 	lds	r24, 0x2C1D
    b394:	90 91 1e 2c 	lds	r25, 0x2C1E
    b398:	89 2b       	or	r24, r25
    b39a:	41 f4       	brne	.+16     	; 0xb3ac <malloc+0xf6>
    b39c:	80 91 e1 24 	lds	r24, 0x24E1
    b3a0:	90 91 e2 24 	lds	r25, 0x24E2
    b3a4:	80 93 1d 2c 	sts	0x2C1D, r24
    b3a8:	90 93 1e 2c 	sts	0x2C1E, r25
    b3ac:	40 91 e3 24 	lds	r20, 0x24E3
    b3b0:	50 91 e4 24 	lds	r21, 0x24E4
    b3b4:	41 15       	cp	r20, r1
    b3b6:	51 05       	cpc	r21, r1
    b3b8:	41 f4       	brne	.+16     	; 0xb3ca <malloc+0x114>
    b3ba:	4d b7       	in	r20, 0x3d	; 61
    b3bc:	5e b7       	in	r21, 0x3e	; 62
    b3be:	80 91 df 24 	lds	r24, 0x24DF
    b3c2:	90 91 e0 24 	lds	r25, 0x24E0
    b3c6:	48 1b       	sub	r20, r24
    b3c8:	59 0b       	sbc	r21, r25
    b3ca:	20 91 1d 2c 	lds	r18, 0x2C1D
    b3ce:	30 91 1e 2c 	lds	r19, 0x2C1E
    b3d2:	24 17       	cp	r18, r20
    b3d4:	35 07       	cpc	r19, r21
    b3d6:	b0 f4       	brcc	.+44     	; 0xb404 <malloc+0x14e>
    b3d8:	ca 01       	movw	r24, r20
    b3da:	82 1b       	sub	r24, r18
    b3dc:	93 0b       	sbc	r25, r19
    b3de:	86 17       	cp	r24, r22
    b3e0:	97 07       	cpc	r25, r23
    b3e2:	80 f0       	brcs	.+32     	; 0xb404 <malloc+0x14e>
    b3e4:	ab 01       	movw	r20, r22
    b3e6:	4e 5f       	subi	r20, 0xFE	; 254
    b3e8:	5f 4f       	sbci	r21, 0xFF	; 255
    b3ea:	84 17       	cp	r24, r20
    b3ec:	95 07       	cpc	r25, r21
    b3ee:	50 f0       	brcs	.+20     	; 0xb404 <malloc+0x14e>
    b3f0:	42 0f       	add	r20, r18
    b3f2:	53 1f       	adc	r21, r19
    b3f4:	40 93 1d 2c 	sts	0x2C1D, r20
    b3f8:	50 93 1e 2c 	sts	0x2C1E, r21
    b3fc:	f9 01       	movw	r30, r18
    b3fe:	61 93       	st	Z+, r22
    b400:	71 93       	st	Z+, r23
    b402:	02 c0       	rjmp	.+4      	; 0xb408 <malloc+0x152>
    b404:	e0 e0       	ldi	r30, 0x00	; 0
    b406:	f0 e0       	ldi	r31, 0x00	; 0
    b408:	cf 01       	movw	r24, r30
    b40a:	df 91       	pop	r29
    b40c:	cf 91       	pop	r28
    b40e:	08 95       	ret

0000b410 <free>:
    b410:	cf 93       	push	r28
    b412:	df 93       	push	r29
    b414:	00 97       	sbiw	r24, 0x00	; 0
    b416:	09 f4       	brne	.+2      	; 0xb41a <free+0xa>
    b418:	50 c0       	rjmp	.+160    	; 0xb4ba <free+0xaa>
    b41a:	ec 01       	movw	r28, r24
    b41c:	22 97       	sbiw	r28, 0x02	; 2
    b41e:	1a 82       	std	Y+2, r1	; 0x02
    b420:	1b 82       	std	Y+3, r1	; 0x03
    b422:	a0 91 1f 2c 	lds	r26, 0x2C1F
    b426:	b0 91 20 2c 	lds	r27, 0x2C20
    b42a:	10 97       	sbiw	r26, 0x00	; 0
    b42c:	09 f1       	breq	.+66     	; 0xb470 <free+0x60>
    b42e:	40 e0       	ldi	r20, 0x00	; 0
    b430:	50 e0       	ldi	r21, 0x00	; 0
    b432:	ac 17       	cp	r26, r28
    b434:	bd 07       	cpc	r27, r29
    b436:	08 f1       	brcs	.+66     	; 0xb47a <free+0x6a>
    b438:	aa 83       	std	Y+2, r26	; 0x02
    b43a:	bb 83       	std	Y+3, r27	; 0x03
    b43c:	fe 01       	movw	r30, r28
    b43e:	21 91       	ld	r18, Z+
    b440:	31 91       	ld	r19, Z+
    b442:	e2 0f       	add	r30, r18
    b444:	f3 1f       	adc	r31, r19
    b446:	ae 17       	cp	r26, r30
    b448:	bf 07       	cpc	r27, r31
    b44a:	79 f4       	brne	.+30     	; 0xb46a <free+0x5a>
    b44c:	8d 91       	ld	r24, X+
    b44e:	9c 91       	ld	r25, X
    b450:	11 97       	sbiw	r26, 0x01	; 1
    b452:	28 0f       	add	r18, r24
    b454:	39 1f       	adc	r19, r25
    b456:	2e 5f       	subi	r18, 0xFE	; 254
    b458:	3f 4f       	sbci	r19, 0xFF	; 255
    b45a:	28 83       	st	Y, r18
    b45c:	39 83       	std	Y+1, r19	; 0x01
    b45e:	12 96       	adiw	r26, 0x02	; 2
    b460:	8d 91       	ld	r24, X+
    b462:	9c 91       	ld	r25, X
    b464:	13 97       	sbiw	r26, 0x03	; 3
    b466:	8a 83       	std	Y+2, r24	; 0x02
    b468:	9b 83       	std	Y+3, r25	; 0x03
    b46a:	41 15       	cp	r20, r1
    b46c:	51 05       	cpc	r21, r1
    b46e:	71 f4       	brne	.+28     	; 0xb48c <free+0x7c>
    b470:	c0 93 1f 2c 	sts	0x2C1F, r28
    b474:	d0 93 20 2c 	sts	0x2C20, r29
    b478:	20 c0       	rjmp	.+64     	; 0xb4ba <free+0xaa>
    b47a:	12 96       	adiw	r26, 0x02	; 2
    b47c:	8d 91       	ld	r24, X+
    b47e:	9c 91       	ld	r25, X
    b480:	13 97       	sbiw	r26, 0x03	; 3
    b482:	ad 01       	movw	r20, r26
    b484:	00 97       	sbiw	r24, 0x00	; 0
    b486:	11 f0       	breq	.+4      	; 0xb48c <free+0x7c>
    b488:	dc 01       	movw	r26, r24
    b48a:	d3 cf       	rjmp	.-90     	; 0xb432 <free+0x22>
    b48c:	fa 01       	movw	r30, r20
    b48e:	c2 83       	std	Z+2, r28	; 0x02
    b490:	d3 83       	std	Z+3, r29	; 0x03
    b492:	21 91       	ld	r18, Z+
    b494:	31 91       	ld	r19, Z+
    b496:	e2 0f       	add	r30, r18
    b498:	f3 1f       	adc	r31, r19
    b49a:	ce 17       	cp	r28, r30
    b49c:	df 07       	cpc	r29, r31
    b49e:	69 f4       	brne	.+26     	; 0xb4ba <free+0xaa>
    b4a0:	88 81       	ld	r24, Y
    b4a2:	99 81       	ldd	r25, Y+1	; 0x01
    b4a4:	28 0f       	add	r18, r24
    b4a6:	39 1f       	adc	r19, r25
    b4a8:	2e 5f       	subi	r18, 0xFE	; 254
    b4aa:	3f 4f       	sbci	r19, 0xFF	; 255
    b4ac:	fa 01       	movw	r30, r20
    b4ae:	20 83       	st	Z, r18
    b4b0:	31 83       	std	Z+1, r19	; 0x01
    b4b2:	8a 81       	ldd	r24, Y+2	; 0x02
    b4b4:	9b 81       	ldd	r25, Y+3	; 0x03
    b4b6:	82 83       	std	Z+2, r24	; 0x02
    b4b8:	93 83       	std	Z+3, r25	; 0x03
    b4ba:	df 91       	pop	r29
    b4bc:	cf 91       	pop	r28
    b4be:	08 95       	ret

0000b4c0 <do_rand>:
    b4c0:	af 92       	push	r10
    b4c2:	bf 92       	push	r11
    b4c4:	cf 92       	push	r12
    b4c6:	df 92       	push	r13
    b4c8:	ef 92       	push	r14
    b4ca:	ff 92       	push	r15
    b4cc:	0f 93       	push	r16
    b4ce:	1f 93       	push	r17
    b4d0:	cf 93       	push	r28
    b4d2:	df 93       	push	r29
    b4d4:	ec 01       	movw	r28, r24
    b4d6:	a8 80       	ld	r10, Y
    b4d8:	b9 80       	ldd	r11, Y+1	; 0x01
    b4da:	ca 80       	ldd	r12, Y+2	; 0x02
    b4dc:	db 80       	ldd	r13, Y+3	; 0x03
    b4de:	a1 14       	cp	r10, r1
    b4e0:	b1 04       	cpc	r11, r1
    b4e2:	c1 04       	cpc	r12, r1
    b4e4:	d1 04       	cpc	r13, r1
    b4e6:	41 f4       	brne	.+16     	; 0xb4f8 <do_rand+0x38>
    b4e8:	84 e2       	ldi	r24, 0x24	; 36
    b4ea:	a8 2e       	mov	r10, r24
    b4ec:	89 ed       	ldi	r24, 0xD9	; 217
    b4ee:	b8 2e       	mov	r11, r24
    b4f0:	8b e5       	ldi	r24, 0x5B	; 91
    b4f2:	c8 2e       	mov	r12, r24
    b4f4:	87 e0       	ldi	r24, 0x07	; 7
    b4f6:	d8 2e       	mov	r13, r24
    b4f8:	c6 01       	movw	r24, r12
    b4fa:	b5 01       	movw	r22, r10
    b4fc:	2d e1       	ldi	r18, 0x1D	; 29
    b4fe:	33 ef       	ldi	r19, 0xF3	; 243
    b500:	41 e0       	ldi	r20, 0x01	; 1
    b502:	50 e0       	ldi	r21, 0x00	; 0
    b504:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    b508:	27 ea       	ldi	r18, 0xA7	; 167
    b50a:	31 e4       	ldi	r19, 0x41	; 65
    b50c:	40 e0       	ldi	r20, 0x00	; 0
    b50e:	50 e0       	ldi	r21, 0x00	; 0
    b510:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    b514:	7b 01       	movw	r14, r22
    b516:	8c 01       	movw	r16, r24
    b518:	c6 01       	movw	r24, r12
    b51a:	b5 01       	movw	r22, r10
    b51c:	2d e1       	ldi	r18, 0x1D	; 29
    b51e:	33 ef       	ldi	r19, 0xF3	; 243
    b520:	41 e0       	ldi	r20, 0x01	; 1
    b522:	50 e0       	ldi	r21, 0x00	; 0
    b524:	0e 94 03 59 	call	0xb206	; 0xb206 <__divmodsi4>
    b528:	ca 01       	movw	r24, r20
    b52a:	b9 01       	movw	r22, r18
    b52c:	2c ee       	ldi	r18, 0xEC	; 236
    b52e:	34 ef       	ldi	r19, 0xF4	; 244
    b530:	4f ef       	ldi	r20, 0xFF	; 255
    b532:	5f ef       	ldi	r21, 0xFF	; 255
    b534:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    b538:	6e 0d       	add	r22, r14
    b53a:	7f 1d       	adc	r23, r15
    b53c:	80 1f       	adc	r24, r16
    b53e:	91 1f       	adc	r25, r17
    b540:	97 ff       	sbrs	r25, 7
    b542:	04 c0       	rjmp	.+8      	; 0xb54c <do_rand+0x8c>
    b544:	61 50       	subi	r22, 0x01	; 1
    b546:	70 40       	sbci	r23, 0x00	; 0
    b548:	80 40       	sbci	r24, 0x00	; 0
    b54a:	90 48       	sbci	r25, 0x80	; 128
    b54c:	68 83       	st	Y, r22
    b54e:	79 83       	std	Y+1, r23	; 0x01
    b550:	8a 83       	std	Y+2, r24	; 0x02
    b552:	9b 83       	std	Y+3, r25	; 0x03
    b554:	9b 01       	movw	r18, r22
    b556:	3f 77       	andi	r19, 0x7F	; 127
    b558:	c9 01       	movw	r24, r18
    b55a:	df 91       	pop	r29
    b55c:	cf 91       	pop	r28
    b55e:	1f 91       	pop	r17
    b560:	0f 91       	pop	r16
    b562:	ff 90       	pop	r15
    b564:	ef 90       	pop	r14
    b566:	df 90       	pop	r13
    b568:	cf 90       	pop	r12
    b56a:	bf 90       	pop	r11
    b56c:	af 90       	pop	r10
    b56e:	08 95       	ret

0000b570 <rand_r>:
    b570:	0e 94 60 5a 	call	0xb4c0	; 0xb4c0 <do_rand>
    b574:	08 95       	ret

0000b576 <rand>:
    b576:	85 ee       	ldi	r24, 0xE5	; 229
    b578:	94 e2       	ldi	r25, 0x24	; 36
    b57a:	0e 94 60 5a 	call	0xb4c0	; 0xb4c0 <do_rand>
    b57e:	08 95       	ret

0000b580 <srand>:
    b580:	a0 e0       	ldi	r26, 0x00	; 0
    b582:	b0 e0       	ldi	r27, 0x00	; 0
    b584:	80 93 e5 24 	sts	0x24E5, r24
    b588:	90 93 e6 24 	sts	0x24E6, r25
    b58c:	a0 93 e7 24 	sts	0x24E7, r26
    b590:	b0 93 e8 24 	sts	0x24E8, r27
    b594:	08 95       	ret

0000b596 <strtoul>:
    b596:	3f 92       	push	r3
    b598:	4f 92       	push	r4
    b59a:	5f 92       	push	r5
    b59c:	6f 92       	push	r6
    b59e:	7f 92       	push	r7
    b5a0:	8f 92       	push	r8
    b5a2:	9f 92       	push	r9
    b5a4:	af 92       	push	r10
    b5a6:	bf 92       	push	r11
    b5a8:	cf 92       	push	r12
    b5aa:	df 92       	push	r13
    b5ac:	ef 92       	push	r14
    b5ae:	ff 92       	push	r15
    b5b0:	0f 93       	push	r16
    b5b2:	1f 93       	push	r17
    b5b4:	cf 93       	push	r28
    b5b6:	df 93       	push	r29
    b5b8:	ec 01       	movw	r28, r24
    b5ba:	2b 01       	movw	r4, r22
    b5bc:	6a 01       	movw	r12, r20
    b5be:	61 15       	cp	r22, r1
    b5c0:	71 05       	cpc	r23, r1
    b5c2:	19 f0       	breq	.+6      	; 0xb5ca <strtoul+0x34>
    b5c4:	fb 01       	movw	r30, r22
    b5c6:	80 83       	st	Z, r24
    b5c8:	91 83       	std	Z+1, r25	; 0x01
    b5ca:	c1 14       	cp	r12, r1
    b5cc:	d1 04       	cpc	r13, r1
    b5ce:	49 f0       	breq	.+18     	; 0xb5e2 <strtoul+0x4c>
    b5d0:	c6 01       	movw	r24, r12
    b5d2:	02 97       	sbiw	r24, 0x02	; 2
    b5d4:	83 97       	sbiw	r24, 0x23	; 35
    b5d6:	28 f0       	brcs	.+10     	; 0xb5e2 <strtoul+0x4c>
    b5d8:	20 e0       	ldi	r18, 0x00	; 0
    b5da:	30 e0       	ldi	r19, 0x00	; 0
    b5dc:	40 e0       	ldi	r20, 0x00	; 0
    b5de:	50 e0       	ldi	r21, 0x00	; 0
    b5e0:	dc c0       	rjmp	.+440    	; 0xb79a <strtoul+0x204>
    b5e2:	a9 90       	ld	r10, Y+
    b5e4:	8a 2d       	mov	r24, r10
    b5e6:	90 e0       	ldi	r25, 0x00	; 0
    b5e8:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <isspace>
    b5ec:	89 2b       	or	r24, r25
    b5ee:	c9 f7       	brne	.-14     	; 0xb5e2 <strtoul+0x4c>
    b5f0:	fd e2       	ldi	r31, 0x2D	; 45
    b5f2:	af 16       	cp	r10, r31
    b5f4:	21 f4       	brne	.+8      	; 0xb5fe <strtoul+0x68>
    b5f6:	a9 90       	ld	r10, Y+
    b5f8:	33 24       	eor	r3, r3
    b5fa:	33 94       	inc	r3
    b5fc:	05 c0       	rjmp	.+10     	; 0xb608 <strtoul+0x72>
    b5fe:	8b e2       	ldi	r24, 0x2B	; 43
    b600:	a8 16       	cp	r10, r24
    b602:	09 f4       	brne	.+2      	; 0xb606 <strtoul+0x70>
    b604:	a9 90       	ld	r10, Y+
    b606:	33 24       	eor	r3, r3
    b608:	c1 14       	cp	r12, r1
    b60a:	d1 04       	cpc	r13, r1
    b60c:	21 f0       	breq	.+8      	; 0xb616 <strtoul+0x80>
    b60e:	e0 e1       	ldi	r30, 0x10	; 16
    b610:	ce 16       	cp	r12, r30
    b612:	d1 04       	cpc	r13, r1
    b614:	11 f5       	brne	.+68     	; 0xb65a <strtoul+0xc4>
    b616:	f0 e3       	ldi	r31, 0x30	; 48
    b618:	af 16       	cp	r10, r31
    b61a:	69 f4       	brne	.+26     	; 0xb636 <strtoul+0xa0>
    b61c:	88 81       	ld	r24, Y
    b61e:	88 37       	cpi	r24, 0x78	; 120
    b620:	11 f0       	breq	.+4      	; 0xb626 <strtoul+0x90>
    b622:	88 35       	cpi	r24, 0x58	; 88
    b624:	41 f4       	brne	.+16     	; 0xb636 <strtoul+0xa0>
    b626:	a9 80       	ldd	r10, Y+1	; 0x01
    b628:	22 96       	adiw	r28, 0x02	; 2
    b62a:	82 e0       	ldi	r24, 0x02	; 2
    b62c:	38 2a       	or	r3, r24
    b62e:	20 e1       	ldi	r18, 0x10	; 16
    b630:	c2 2e       	mov	r12, r18
    b632:	d1 2c       	mov	r13, r1
    b634:	12 c0       	rjmp	.+36     	; 0xb65a <strtoul+0xc4>
    b636:	c1 14       	cp	r12, r1
    b638:	d1 04       	cpc	r13, r1
    b63a:	79 f4       	brne	.+30     	; 0xb65a <strtoul+0xc4>
    b63c:	e0 e3       	ldi	r30, 0x30	; 48
    b63e:	ae 16       	cp	r10, r30
    b640:	59 f1       	breq	.+86     	; 0xb698 <strtoul+0x102>
    b642:	99 e9       	ldi	r25, 0x99	; 153
    b644:	e9 2e       	mov	r14, r25
    b646:	99 e9       	ldi	r25, 0x99	; 153
    b648:	f9 2e       	mov	r15, r25
    b64a:	99 e9       	ldi	r25, 0x99	; 153
    b64c:	09 2f       	mov	r16, r25
    b64e:	99 e1       	ldi	r25, 0x19	; 25
    b650:	19 2f       	mov	r17, r25
    b652:	8a e0       	ldi	r24, 0x0A	; 10
    b654:	c8 2e       	mov	r12, r24
    b656:	d1 2c       	mov	r13, r1
    b658:	3a c0       	rjmp	.+116    	; 0xb6ce <strtoul+0x138>
    b65a:	fa e0       	ldi	r31, 0x0A	; 10
    b65c:	cf 16       	cp	r12, r31
    b65e:	d1 04       	cpc	r13, r1
    b660:	91 f0       	breq	.+36     	; 0xb686 <strtoul+0xf0>
    b662:	80 e1       	ldi	r24, 0x10	; 16
    b664:	c8 16       	cp	r12, r24
    b666:	d1 04       	cpc	r13, r1
    b668:	29 f0       	breq	.+10     	; 0xb674 <strtoul+0xde>
    b66a:	e8 e0       	ldi	r30, 0x08	; 8
    b66c:	ce 16       	cp	r12, r30
    b66e:	d1 04       	cpc	r13, r1
    b670:	f9 f4       	brne	.+62     	; 0xb6b0 <strtoul+0x11a>
    b672:	15 c0       	rjmp	.+42     	; 0xb69e <strtoul+0x108>
    b674:	bf ef       	ldi	r27, 0xFF	; 255
    b676:	eb 2e       	mov	r14, r27
    b678:	bf ef       	ldi	r27, 0xFF	; 255
    b67a:	fb 2e       	mov	r15, r27
    b67c:	bf ef       	ldi	r27, 0xFF	; 255
    b67e:	0b 2f       	mov	r16, r27
    b680:	bf e0       	ldi	r27, 0x0F	; 15
    b682:	1b 2f       	mov	r17, r27
    b684:	24 c0       	rjmp	.+72     	; 0xb6ce <strtoul+0x138>
    b686:	a9 e9       	ldi	r26, 0x99	; 153
    b688:	ea 2e       	mov	r14, r26
    b68a:	a9 e9       	ldi	r26, 0x99	; 153
    b68c:	fa 2e       	mov	r15, r26
    b68e:	a9 e9       	ldi	r26, 0x99	; 153
    b690:	0a 2f       	mov	r16, r26
    b692:	a9 e1       	ldi	r26, 0x19	; 25
    b694:	1a 2f       	mov	r17, r26
    b696:	1b c0       	rjmp	.+54     	; 0xb6ce <strtoul+0x138>
    b698:	f8 e0       	ldi	r31, 0x08	; 8
    b69a:	cf 2e       	mov	r12, r31
    b69c:	d1 2c       	mov	r13, r1
    b69e:	ef ef       	ldi	r30, 0xFF	; 255
    b6a0:	ee 2e       	mov	r14, r30
    b6a2:	ef ef       	ldi	r30, 0xFF	; 255
    b6a4:	fe 2e       	mov	r15, r30
    b6a6:	ef ef       	ldi	r30, 0xFF	; 255
    b6a8:	0e 2f       	mov	r16, r30
    b6aa:	ef e1       	ldi	r30, 0x1F	; 31
    b6ac:	1e 2f       	mov	r17, r30
    b6ae:	0f c0       	rjmp	.+30     	; 0xb6ce <strtoul+0x138>
    b6b0:	96 01       	movw	r18, r12
    b6b2:	44 27       	eor	r20, r20
    b6b4:	37 fd       	sbrc	r19, 7
    b6b6:	40 95       	com	r20
    b6b8:	54 2f       	mov	r21, r20
    b6ba:	6f ef       	ldi	r22, 0xFF	; 255
    b6bc:	7f ef       	ldi	r23, 0xFF	; 255
    b6be:	8f ef       	ldi	r24, 0xFF	; 255
    b6c0:	9f ef       	ldi	r25, 0xFF	; 255
    b6c2:	0e 94 e1 58 	call	0xb1c2	; 0xb1c2 <__udivmodsi4>
    b6c6:	c9 01       	movw	r24, r18
    b6c8:	da 01       	movw	r26, r20
    b6ca:	7c 01       	movw	r14, r24
    b6cc:	8d 01       	movw	r16, r26
    b6ce:	20 e0       	ldi	r18, 0x00	; 0
    b6d0:	30 e0       	ldi	r19, 0x00	; 0
    b6d2:	40 e0       	ldi	r20, 0x00	; 0
    b6d4:	50 e0       	ldi	r21, 0x00	; 0
    b6d6:	60 e0       	ldi	r22, 0x00	; 0
    b6d8:	36 01       	movw	r6, r12
    b6da:	88 24       	eor	r8, r8
    b6dc:	77 fc       	sbrc	r7, 7
    b6de:	80 94       	com	r8
    b6e0:	98 2c       	mov	r9, r8
    b6e2:	70 ed       	ldi	r23, 0xD0	; 208
    b6e4:	b7 2e       	mov	r11, r23
    b6e6:	ba 0c       	add	r11, r10
    b6e8:	f9 e0       	ldi	r31, 0x09	; 9
    b6ea:	fb 15       	cp	r31, r11
    b6ec:	70 f4       	brcc	.+28     	; 0xb70a <strtoul+0x174>
    b6ee:	8a 2d       	mov	r24, r10
    b6f0:	81 54       	subi	r24, 0x41	; 65
    b6f2:	8a 31       	cpi	r24, 0x1A	; 26
    b6f4:	18 f4       	brcc	.+6      	; 0xb6fc <strtoul+0x166>
    b6f6:	99 ec       	ldi	r25, 0xC9	; 201
    b6f8:	b9 2e       	mov	r11, r25
    b6fa:	06 c0       	rjmp	.+12     	; 0xb708 <strtoul+0x172>
    b6fc:	8a 2d       	mov	r24, r10
    b6fe:	81 56       	subi	r24, 0x61	; 97
    b700:	8a 31       	cpi	r24, 0x1A	; 26
    b702:	48 f5       	brcc	.+82     	; 0xb756 <strtoul+0x1c0>
    b704:	89 ea       	ldi	r24, 0xA9	; 169
    b706:	b8 2e       	mov	r11, r24
    b708:	ba 0c       	add	r11, r10
    b70a:	8b 2d       	mov	r24, r11
    b70c:	90 e0       	ldi	r25, 0x00	; 0
    b70e:	8c 15       	cp	r24, r12
    b710:	9d 05       	cpc	r25, r13
    b712:	0c f5       	brge	.+66     	; 0xb756 <strtoul+0x1c0>
    b714:	6f 3f       	cpi	r22, 0xFF	; 255
    b716:	e9 f0       	breq	.+58     	; 0xb752 <strtoul+0x1bc>
    b718:	e2 16       	cp	r14, r18
    b71a:	f3 06       	cpc	r15, r19
    b71c:	04 07       	cpc	r16, r20
    b71e:	15 07       	cpc	r17, r21
    b720:	b8 f0       	brcs	.+46     	; 0xb750 <strtoul+0x1ba>
    b722:	ca 01       	movw	r24, r20
    b724:	b9 01       	movw	r22, r18
    b726:	a4 01       	movw	r20, r8
    b728:	93 01       	movw	r18, r6
    b72a:	0e 94 9b 58 	call	0xb136	; 0xb136 <__mulsi3>
    b72e:	9b 01       	movw	r18, r22
    b730:	ac 01       	movw	r20, r24
    b732:	8b 2d       	mov	r24, r11
    b734:	90 e0       	ldi	r25, 0x00	; 0
    b736:	a0 e0       	ldi	r26, 0x00	; 0
    b738:	b0 e0       	ldi	r27, 0x00	; 0
    b73a:	28 0f       	add	r18, r24
    b73c:	39 1f       	adc	r19, r25
    b73e:	4a 1f       	adc	r20, r26
    b740:	5b 1f       	adc	r21, r27
    b742:	28 17       	cp	r18, r24
    b744:	39 07       	cpc	r19, r25
    b746:	4a 07       	cpc	r20, r26
    b748:	5b 07       	cpc	r21, r27
    b74a:	10 f0       	brcs	.+4      	; 0xb750 <strtoul+0x1ba>
    b74c:	61 e0       	ldi	r22, 0x01	; 1
    b74e:	01 c0       	rjmp	.+2      	; 0xb752 <strtoul+0x1bc>
    b750:	6f ef       	ldi	r22, 0xFF	; 255
    b752:	a9 90       	ld	r10, Y+
    b754:	c6 cf       	rjmp	.-116    	; 0xb6e2 <strtoul+0x14c>
    b756:	41 14       	cp	r4, r1
    b758:	51 04       	cpc	r5, r1
    b75a:	51 f0       	breq	.+20     	; 0xb770 <strtoul+0x1da>
    b75c:	66 23       	and	r22, r22
    b75e:	11 f0       	breq	.+4      	; 0xb764 <strtoul+0x1ce>
    b760:	21 97       	sbiw	r28, 0x01	; 1
    b762:	03 c0       	rjmp	.+6      	; 0xb76a <strtoul+0x1d4>
    b764:	31 fe       	sbrs	r3, 1
    b766:	04 c0       	rjmp	.+8      	; 0xb770 <strtoul+0x1da>
    b768:	22 97       	sbiw	r28, 0x02	; 2
    b76a:	f2 01       	movw	r30, r4
    b76c:	c0 83       	st	Z, r28
    b76e:	d1 83       	std	Z+1, r29	; 0x01
    b770:	30 fe       	sbrs	r3, 0
    b772:	07 c0       	rjmp	.+14     	; 0xb782 <strtoul+0x1ec>
    b774:	50 95       	com	r21
    b776:	40 95       	com	r20
    b778:	30 95       	com	r19
    b77a:	21 95       	neg	r18
    b77c:	3f 4f       	sbci	r19, 0xFF	; 255
    b77e:	4f 4f       	sbci	r20, 0xFF	; 255
    b780:	5f 4f       	sbci	r21, 0xFF	; 255
    b782:	67 ff       	sbrs	r22, 7
    b784:	0a c0       	rjmp	.+20     	; 0xb79a <strtoul+0x204>
    b786:	82 e2       	ldi	r24, 0x22	; 34
    b788:	90 e0       	ldi	r25, 0x00	; 0
    b78a:	80 93 21 2c 	sts	0x2C21, r24
    b78e:	90 93 22 2c 	sts	0x2C22, r25
    b792:	2f ef       	ldi	r18, 0xFF	; 255
    b794:	3f ef       	ldi	r19, 0xFF	; 255
    b796:	4f ef       	ldi	r20, 0xFF	; 255
    b798:	5f ef       	ldi	r21, 0xFF	; 255
    b79a:	b9 01       	movw	r22, r18
    b79c:	ca 01       	movw	r24, r20
    b79e:	df 91       	pop	r29
    b7a0:	cf 91       	pop	r28
    b7a2:	1f 91       	pop	r17
    b7a4:	0f 91       	pop	r16
    b7a6:	ff 90       	pop	r15
    b7a8:	ef 90       	pop	r14
    b7aa:	df 90       	pop	r13
    b7ac:	cf 90       	pop	r12
    b7ae:	bf 90       	pop	r11
    b7b0:	af 90       	pop	r10
    b7b2:	9f 90       	pop	r9
    b7b4:	8f 90       	pop	r8
    b7b6:	7f 90       	pop	r7
    b7b8:	6f 90       	pop	r6
    b7ba:	5f 90       	pop	r5
    b7bc:	4f 90       	pop	r4
    b7be:	3f 90       	pop	r3
    b7c0:	08 95       	ret

0000b7c2 <isspace>:
    b7c2:	91 11       	cpse	r25, r1
    b7c4:	64 c2       	rjmp	.+1224   	; 0xbc8e <__ctype_isfalse>
    b7c6:	80 32       	cpi	r24, 0x20	; 32
    b7c8:	19 f0       	breq	.+6      	; 0xb7d0 <isspace+0xe>
    b7ca:	89 50       	subi	r24, 0x09	; 9
    b7cc:	85 50       	subi	r24, 0x05	; 5
    b7ce:	d0 f7       	brcc	.-12     	; 0xb7c4 <isspace+0x2>
    b7d0:	08 95       	ret

0000b7d2 <sprintf>:
    b7d2:	0f 93       	push	r16
    b7d4:	1f 93       	push	r17
    b7d6:	df 93       	push	r29
    b7d8:	cf 93       	push	r28
    b7da:	cd b7       	in	r28, 0x3d	; 61
    b7dc:	de b7       	in	r29, 0x3e	; 62
    b7de:	2e 97       	sbiw	r28, 0x0e	; 14
    b7e0:	cd bf       	out	0x3d, r28	; 61
    b7e2:	de bf       	out	0x3e, r29	; 62
    b7e4:	0e 89       	ldd	r16, Y+22	; 0x16
    b7e6:	1f 89       	ldd	r17, Y+23	; 0x17
    b7e8:	86 e0       	ldi	r24, 0x06	; 6
    b7ea:	8c 83       	std	Y+4, r24	; 0x04
    b7ec:	09 83       	std	Y+1, r16	; 0x01
    b7ee:	1a 83       	std	Y+2, r17	; 0x02
    b7f0:	8f ef       	ldi	r24, 0xFF	; 255
    b7f2:	9f e7       	ldi	r25, 0x7F	; 127
    b7f4:	8d 83       	std	Y+5, r24	; 0x05
    b7f6:	9e 83       	std	Y+6, r25	; 0x06
    b7f8:	9e 01       	movw	r18, r28
    b7fa:	26 5e       	subi	r18, 0xE6	; 230
    b7fc:	3f 4f       	sbci	r19, 0xFF	; 255
    b7fe:	ce 01       	movw	r24, r28
    b800:	01 96       	adiw	r24, 0x01	; 1
    b802:	68 8d       	ldd	r22, Y+24	; 0x18
    b804:	79 8d       	ldd	r23, Y+25	; 0x19
    b806:	a9 01       	movw	r20, r18
    b808:	0e 94 14 5c 	call	0xb828	; 0xb828 <vfprintf>
    b80c:	2f 81       	ldd	r18, Y+7	; 0x07
    b80e:	38 85       	ldd	r19, Y+8	; 0x08
    b810:	02 0f       	add	r16, r18
    b812:	13 1f       	adc	r17, r19
    b814:	f8 01       	movw	r30, r16
    b816:	10 82       	st	Z, r1
    b818:	2e 96       	adiw	r28, 0x0e	; 14
    b81a:	cd bf       	out	0x3d, r28	; 61
    b81c:	de bf       	out	0x3e, r29	; 62
    b81e:	cf 91       	pop	r28
    b820:	df 91       	pop	r29
    b822:	1f 91       	pop	r17
    b824:	0f 91       	pop	r16
    b826:	08 95       	ret

0000b828 <vfprintf>:
    b828:	2f 92       	push	r2
    b82a:	3f 92       	push	r3
    b82c:	4f 92       	push	r4
    b82e:	5f 92       	push	r5
    b830:	6f 92       	push	r6
    b832:	7f 92       	push	r7
    b834:	8f 92       	push	r8
    b836:	9f 92       	push	r9
    b838:	af 92       	push	r10
    b83a:	bf 92       	push	r11
    b83c:	cf 92       	push	r12
    b83e:	df 92       	push	r13
    b840:	ef 92       	push	r14
    b842:	ff 92       	push	r15
    b844:	0f 93       	push	r16
    b846:	1f 93       	push	r17
    b848:	df 93       	push	r29
    b84a:	cf 93       	push	r28
    b84c:	cd b7       	in	r28, 0x3d	; 61
    b84e:	de b7       	in	r29, 0x3e	; 62
    b850:	2b 97       	sbiw	r28, 0x0b	; 11
    b852:	cd bf       	out	0x3d, r28	; 61
    b854:	de bf       	out	0x3e, r29	; 62
    b856:	3c 01       	movw	r6, r24
    b858:	2b 01       	movw	r4, r22
    b85a:	5a 01       	movw	r10, r20
    b85c:	fc 01       	movw	r30, r24
    b85e:	16 82       	std	Z+6, r1	; 0x06
    b860:	17 82       	std	Z+7, r1	; 0x07
    b862:	83 81       	ldd	r24, Z+3	; 0x03
    b864:	81 fd       	sbrc	r24, 1
    b866:	03 c0       	rjmp	.+6      	; 0xb86e <vfprintf+0x46>
    b868:	6f ef       	ldi	r22, 0xFF	; 255
    b86a:	7f ef       	ldi	r23, 0xFF	; 255
    b86c:	c6 c1       	rjmp	.+908    	; 0xbbfa <vfprintf+0x3d2>
    b86e:	9a e0       	ldi	r25, 0x0A	; 10
    b870:	89 2e       	mov	r8, r25
    b872:	1e 01       	movw	r2, r28
    b874:	08 94       	sec
    b876:	21 1c       	adc	r2, r1
    b878:	31 1c       	adc	r3, r1
    b87a:	f3 01       	movw	r30, r6
    b87c:	23 81       	ldd	r18, Z+3	; 0x03
    b87e:	f2 01       	movw	r30, r4
    b880:	23 fd       	sbrc	r18, 3
    b882:	85 91       	lpm	r24, Z+
    b884:	23 ff       	sbrs	r18, 3
    b886:	81 91       	ld	r24, Z+
    b888:	2f 01       	movw	r4, r30
    b88a:	88 23       	and	r24, r24
    b88c:	09 f4       	brne	.+2      	; 0xb890 <vfprintf+0x68>
    b88e:	b2 c1       	rjmp	.+868    	; 0xbbf4 <vfprintf+0x3cc>
    b890:	85 32       	cpi	r24, 0x25	; 37
    b892:	39 f4       	brne	.+14     	; 0xb8a2 <vfprintf+0x7a>
    b894:	23 fd       	sbrc	r18, 3
    b896:	85 91       	lpm	r24, Z+
    b898:	23 ff       	sbrs	r18, 3
    b89a:	81 91       	ld	r24, Z+
    b89c:	2f 01       	movw	r4, r30
    b89e:	85 32       	cpi	r24, 0x25	; 37
    b8a0:	29 f4       	brne	.+10     	; 0xb8ac <vfprintf+0x84>
    b8a2:	90 e0       	ldi	r25, 0x00	; 0
    b8a4:	b3 01       	movw	r22, r6
    b8a6:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    b8aa:	e7 cf       	rjmp	.-50     	; 0xb87a <vfprintf+0x52>
    b8ac:	98 2f       	mov	r25, r24
    b8ae:	ff 24       	eor	r15, r15
    b8b0:	ee 24       	eor	r14, r14
    b8b2:	99 24       	eor	r9, r9
    b8b4:	ff e1       	ldi	r31, 0x1F	; 31
    b8b6:	ff 15       	cp	r31, r15
    b8b8:	d0 f0       	brcs	.+52     	; 0xb8ee <vfprintf+0xc6>
    b8ba:	9b 32       	cpi	r25, 0x2B	; 43
    b8bc:	69 f0       	breq	.+26     	; 0xb8d8 <vfprintf+0xb0>
    b8be:	9c 32       	cpi	r25, 0x2C	; 44
    b8c0:	28 f4       	brcc	.+10     	; 0xb8cc <vfprintf+0xa4>
    b8c2:	90 32       	cpi	r25, 0x20	; 32
    b8c4:	59 f0       	breq	.+22     	; 0xb8dc <vfprintf+0xb4>
    b8c6:	93 32       	cpi	r25, 0x23	; 35
    b8c8:	91 f4       	brne	.+36     	; 0xb8ee <vfprintf+0xc6>
    b8ca:	0e c0       	rjmp	.+28     	; 0xb8e8 <vfprintf+0xc0>
    b8cc:	9d 32       	cpi	r25, 0x2D	; 45
    b8ce:	49 f0       	breq	.+18     	; 0xb8e2 <vfprintf+0xba>
    b8d0:	90 33       	cpi	r25, 0x30	; 48
    b8d2:	69 f4       	brne	.+26     	; 0xb8ee <vfprintf+0xc6>
    b8d4:	41 e0       	ldi	r20, 0x01	; 1
    b8d6:	24 c0       	rjmp	.+72     	; 0xb920 <vfprintf+0xf8>
    b8d8:	52 e0       	ldi	r21, 0x02	; 2
    b8da:	f5 2a       	or	r15, r21
    b8dc:	84 e0       	ldi	r24, 0x04	; 4
    b8de:	f8 2a       	or	r15, r24
    b8e0:	28 c0       	rjmp	.+80     	; 0xb932 <vfprintf+0x10a>
    b8e2:	98 e0       	ldi	r25, 0x08	; 8
    b8e4:	f9 2a       	or	r15, r25
    b8e6:	25 c0       	rjmp	.+74     	; 0xb932 <vfprintf+0x10a>
    b8e8:	e0 e1       	ldi	r30, 0x10	; 16
    b8ea:	fe 2a       	or	r15, r30
    b8ec:	22 c0       	rjmp	.+68     	; 0xb932 <vfprintf+0x10a>
    b8ee:	f7 fc       	sbrc	r15, 7
    b8f0:	29 c0       	rjmp	.+82     	; 0xb944 <vfprintf+0x11c>
    b8f2:	89 2f       	mov	r24, r25
    b8f4:	80 53       	subi	r24, 0x30	; 48
    b8f6:	8a 30       	cpi	r24, 0x0A	; 10
    b8f8:	70 f4       	brcc	.+28     	; 0xb916 <vfprintf+0xee>
    b8fa:	f6 fe       	sbrs	r15, 6
    b8fc:	05 c0       	rjmp	.+10     	; 0xb908 <vfprintf+0xe0>
    b8fe:	98 9c       	mul	r9, r8
    b900:	90 2c       	mov	r9, r0
    b902:	11 24       	eor	r1, r1
    b904:	98 0e       	add	r9, r24
    b906:	15 c0       	rjmp	.+42     	; 0xb932 <vfprintf+0x10a>
    b908:	e8 9c       	mul	r14, r8
    b90a:	e0 2c       	mov	r14, r0
    b90c:	11 24       	eor	r1, r1
    b90e:	e8 0e       	add	r14, r24
    b910:	f0 e2       	ldi	r31, 0x20	; 32
    b912:	ff 2a       	or	r15, r31
    b914:	0e c0       	rjmp	.+28     	; 0xb932 <vfprintf+0x10a>
    b916:	9e 32       	cpi	r25, 0x2E	; 46
    b918:	29 f4       	brne	.+10     	; 0xb924 <vfprintf+0xfc>
    b91a:	f6 fc       	sbrc	r15, 6
    b91c:	6b c1       	rjmp	.+726    	; 0xbbf4 <vfprintf+0x3cc>
    b91e:	40 e4       	ldi	r20, 0x40	; 64
    b920:	f4 2a       	or	r15, r20
    b922:	07 c0       	rjmp	.+14     	; 0xb932 <vfprintf+0x10a>
    b924:	9c 36       	cpi	r25, 0x6C	; 108
    b926:	19 f4       	brne	.+6      	; 0xb92e <vfprintf+0x106>
    b928:	50 e8       	ldi	r21, 0x80	; 128
    b92a:	f5 2a       	or	r15, r21
    b92c:	02 c0       	rjmp	.+4      	; 0xb932 <vfprintf+0x10a>
    b92e:	98 36       	cpi	r25, 0x68	; 104
    b930:	49 f4       	brne	.+18     	; 0xb944 <vfprintf+0x11c>
    b932:	f2 01       	movw	r30, r4
    b934:	23 fd       	sbrc	r18, 3
    b936:	95 91       	lpm	r25, Z+
    b938:	23 ff       	sbrs	r18, 3
    b93a:	91 91       	ld	r25, Z+
    b93c:	2f 01       	movw	r4, r30
    b93e:	99 23       	and	r25, r25
    b940:	09 f0       	breq	.+2      	; 0xb944 <vfprintf+0x11c>
    b942:	b8 cf       	rjmp	.-144    	; 0xb8b4 <vfprintf+0x8c>
    b944:	89 2f       	mov	r24, r25
    b946:	85 54       	subi	r24, 0x45	; 69
    b948:	83 30       	cpi	r24, 0x03	; 3
    b94a:	18 f0       	brcs	.+6      	; 0xb952 <vfprintf+0x12a>
    b94c:	80 52       	subi	r24, 0x20	; 32
    b94e:	83 30       	cpi	r24, 0x03	; 3
    b950:	38 f4       	brcc	.+14     	; 0xb960 <vfprintf+0x138>
    b952:	44 e0       	ldi	r20, 0x04	; 4
    b954:	50 e0       	ldi	r21, 0x00	; 0
    b956:	a4 0e       	add	r10, r20
    b958:	b5 1e       	adc	r11, r21
    b95a:	5f e3       	ldi	r21, 0x3F	; 63
    b95c:	59 83       	std	Y+1, r21	; 0x01
    b95e:	0f c0       	rjmp	.+30     	; 0xb97e <vfprintf+0x156>
    b960:	93 36       	cpi	r25, 0x63	; 99
    b962:	31 f0       	breq	.+12     	; 0xb970 <vfprintf+0x148>
    b964:	93 37       	cpi	r25, 0x73	; 115
    b966:	79 f0       	breq	.+30     	; 0xb986 <vfprintf+0x15e>
    b968:	93 35       	cpi	r25, 0x53	; 83
    b96a:	09 f0       	breq	.+2      	; 0xb96e <vfprintf+0x146>
    b96c:	56 c0       	rjmp	.+172    	; 0xba1a <vfprintf+0x1f2>
    b96e:	20 c0       	rjmp	.+64     	; 0xb9b0 <vfprintf+0x188>
    b970:	f5 01       	movw	r30, r10
    b972:	80 81       	ld	r24, Z
    b974:	89 83       	std	Y+1, r24	; 0x01
    b976:	42 e0       	ldi	r20, 0x02	; 2
    b978:	50 e0       	ldi	r21, 0x00	; 0
    b97a:	a4 0e       	add	r10, r20
    b97c:	b5 1e       	adc	r11, r21
    b97e:	61 01       	movw	r12, r2
    b980:	01 e0       	ldi	r16, 0x01	; 1
    b982:	10 e0       	ldi	r17, 0x00	; 0
    b984:	12 c0       	rjmp	.+36     	; 0xb9aa <vfprintf+0x182>
    b986:	f5 01       	movw	r30, r10
    b988:	c0 80       	ld	r12, Z
    b98a:	d1 80       	ldd	r13, Z+1	; 0x01
    b98c:	f6 fc       	sbrc	r15, 6
    b98e:	03 c0       	rjmp	.+6      	; 0xb996 <vfprintf+0x16e>
    b990:	6f ef       	ldi	r22, 0xFF	; 255
    b992:	7f ef       	ldi	r23, 0xFF	; 255
    b994:	02 c0       	rjmp	.+4      	; 0xb99a <vfprintf+0x172>
    b996:	69 2d       	mov	r22, r9
    b998:	70 e0       	ldi	r23, 0x00	; 0
    b99a:	42 e0       	ldi	r20, 0x02	; 2
    b99c:	50 e0       	ldi	r21, 0x00	; 0
    b99e:	a4 0e       	add	r10, r20
    b9a0:	b5 1e       	adc	r11, r21
    b9a2:	c6 01       	movw	r24, r12
    b9a4:	0e 94 55 5e 	call	0xbcaa	; 0xbcaa <strnlen>
    b9a8:	8c 01       	movw	r16, r24
    b9aa:	5f e7       	ldi	r21, 0x7F	; 127
    b9ac:	f5 22       	and	r15, r21
    b9ae:	14 c0       	rjmp	.+40     	; 0xb9d8 <vfprintf+0x1b0>
    b9b0:	f5 01       	movw	r30, r10
    b9b2:	c0 80       	ld	r12, Z
    b9b4:	d1 80       	ldd	r13, Z+1	; 0x01
    b9b6:	f6 fc       	sbrc	r15, 6
    b9b8:	03 c0       	rjmp	.+6      	; 0xb9c0 <vfprintf+0x198>
    b9ba:	6f ef       	ldi	r22, 0xFF	; 255
    b9bc:	7f ef       	ldi	r23, 0xFF	; 255
    b9be:	02 c0       	rjmp	.+4      	; 0xb9c4 <vfprintf+0x19c>
    b9c0:	69 2d       	mov	r22, r9
    b9c2:	70 e0       	ldi	r23, 0x00	; 0
    b9c4:	42 e0       	ldi	r20, 0x02	; 2
    b9c6:	50 e0       	ldi	r21, 0x00	; 0
    b9c8:	a4 0e       	add	r10, r20
    b9ca:	b5 1e       	adc	r11, r21
    b9cc:	c6 01       	movw	r24, r12
    b9ce:	0e 94 4a 5e 	call	0xbc94	; 0xbc94 <strnlen_P>
    b9d2:	8c 01       	movw	r16, r24
    b9d4:	50 e8       	ldi	r21, 0x80	; 128
    b9d6:	f5 2a       	or	r15, r21
    b9d8:	f3 fe       	sbrs	r15, 3
    b9da:	07 c0       	rjmp	.+14     	; 0xb9ea <vfprintf+0x1c2>
    b9dc:	1a c0       	rjmp	.+52     	; 0xba12 <vfprintf+0x1ea>
    b9de:	80 e2       	ldi	r24, 0x20	; 32
    b9e0:	90 e0       	ldi	r25, 0x00	; 0
    b9e2:	b3 01       	movw	r22, r6
    b9e4:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    b9e8:	ea 94       	dec	r14
    b9ea:	8e 2d       	mov	r24, r14
    b9ec:	90 e0       	ldi	r25, 0x00	; 0
    b9ee:	08 17       	cp	r16, r24
    b9f0:	19 07       	cpc	r17, r25
    b9f2:	a8 f3       	brcs	.-22     	; 0xb9de <vfprintf+0x1b6>
    b9f4:	0e c0       	rjmp	.+28     	; 0xba12 <vfprintf+0x1ea>
    b9f6:	f6 01       	movw	r30, r12
    b9f8:	f7 fc       	sbrc	r15, 7
    b9fa:	85 91       	lpm	r24, Z+
    b9fc:	f7 fe       	sbrs	r15, 7
    b9fe:	81 91       	ld	r24, Z+
    ba00:	6f 01       	movw	r12, r30
    ba02:	90 e0       	ldi	r25, 0x00	; 0
    ba04:	b3 01       	movw	r22, r6
    ba06:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    ba0a:	e1 10       	cpse	r14, r1
    ba0c:	ea 94       	dec	r14
    ba0e:	01 50       	subi	r16, 0x01	; 1
    ba10:	10 40       	sbci	r17, 0x00	; 0
    ba12:	01 15       	cp	r16, r1
    ba14:	11 05       	cpc	r17, r1
    ba16:	79 f7       	brne	.-34     	; 0xb9f6 <vfprintf+0x1ce>
    ba18:	ea c0       	rjmp	.+468    	; 0xbbee <vfprintf+0x3c6>
    ba1a:	94 36       	cpi	r25, 0x64	; 100
    ba1c:	11 f0       	breq	.+4      	; 0xba22 <vfprintf+0x1fa>
    ba1e:	99 36       	cpi	r25, 0x69	; 105
    ba20:	69 f5       	brne	.+90     	; 0xba7c <vfprintf+0x254>
    ba22:	f7 fe       	sbrs	r15, 7
    ba24:	08 c0       	rjmp	.+16     	; 0xba36 <vfprintf+0x20e>
    ba26:	f5 01       	movw	r30, r10
    ba28:	20 81       	ld	r18, Z
    ba2a:	31 81       	ldd	r19, Z+1	; 0x01
    ba2c:	42 81       	ldd	r20, Z+2	; 0x02
    ba2e:	53 81       	ldd	r21, Z+3	; 0x03
    ba30:	84 e0       	ldi	r24, 0x04	; 4
    ba32:	90 e0       	ldi	r25, 0x00	; 0
    ba34:	0a c0       	rjmp	.+20     	; 0xba4a <vfprintf+0x222>
    ba36:	f5 01       	movw	r30, r10
    ba38:	80 81       	ld	r24, Z
    ba3a:	91 81       	ldd	r25, Z+1	; 0x01
    ba3c:	9c 01       	movw	r18, r24
    ba3e:	44 27       	eor	r20, r20
    ba40:	37 fd       	sbrc	r19, 7
    ba42:	40 95       	com	r20
    ba44:	54 2f       	mov	r21, r20
    ba46:	82 e0       	ldi	r24, 0x02	; 2
    ba48:	90 e0       	ldi	r25, 0x00	; 0
    ba4a:	a8 0e       	add	r10, r24
    ba4c:	b9 1e       	adc	r11, r25
    ba4e:	9f e6       	ldi	r25, 0x6F	; 111
    ba50:	f9 22       	and	r15, r25
    ba52:	57 ff       	sbrs	r21, 7
    ba54:	09 c0       	rjmp	.+18     	; 0xba68 <vfprintf+0x240>
    ba56:	50 95       	com	r21
    ba58:	40 95       	com	r20
    ba5a:	30 95       	com	r19
    ba5c:	21 95       	neg	r18
    ba5e:	3f 4f       	sbci	r19, 0xFF	; 255
    ba60:	4f 4f       	sbci	r20, 0xFF	; 255
    ba62:	5f 4f       	sbci	r21, 0xFF	; 255
    ba64:	e0 e8       	ldi	r30, 0x80	; 128
    ba66:	fe 2a       	or	r15, r30
    ba68:	ca 01       	movw	r24, r20
    ba6a:	b9 01       	movw	r22, r18
    ba6c:	a1 01       	movw	r20, r2
    ba6e:	2a e0       	ldi	r18, 0x0A	; 10
    ba70:	30 e0       	ldi	r19, 0x00	; 0
    ba72:	0e 94 8c 5e 	call	0xbd18	; 0xbd18 <__ultoa_invert>
    ba76:	d8 2e       	mov	r13, r24
    ba78:	d2 18       	sub	r13, r2
    ba7a:	40 c0       	rjmp	.+128    	; 0xbafc <vfprintf+0x2d4>
    ba7c:	95 37       	cpi	r25, 0x75	; 117
    ba7e:	29 f4       	brne	.+10     	; 0xba8a <vfprintf+0x262>
    ba80:	1f 2d       	mov	r17, r15
    ba82:	1f 7e       	andi	r17, 0xEF	; 239
    ba84:	2a e0       	ldi	r18, 0x0A	; 10
    ba86:	30 e0       	ldi	r19, 0x00	; 0
    ba88:	1d c0       	rjmp	.+58     	; 0xbac4 <vfprintf+0x29c>
    ba8a:	1f 2d       	mov	r17, r15
    ba8c:	19 7f       	andi	r17, 0xF9	; 249
    ba8e:	9f 36       	cpi	r25, 0x6F	; 111
    ba90:	61 f0       	breq	.+24     	; 0xbaaa <vfprintf+0x282>
    ba92:	90 37       	cpi	r25, 0x70	; 112
    ba94:	20 f4       	brcc	.+8      	; 0xba9e <vfprintf+0x276>
    ba96:	98 35       	cpi	r25, 0x58	; 88
    ba98:	09 f0       	breq	.+2      	; 0xba9c <vfprintf+0x274>
    ba9a:	ac c0       	rjmp	.+344    	; 0xbbf4 <vfprintf+0x3cc>
    ba9c:	0f c0       	rjmp	.+30     	; 0xbabc <vfprintf+0x294>
    ba9e:	90 37       	cpi	r25, 0x70	; 112
    baa0:	39 f0       	breq	.+14     	; 0xbab0 <vfprintf+0x288>
    baa2:	98 37       	cpi	r25, 0x78	; 120
    baa4:	09 f0       	breq	.+2      	; 0xbaa8 <vfprintf+0x280>
    baa6:	a6 c0       	rjmp	.+332    	; 0xbbf4 <vfprintf+0x3cc>
    baa8:	04 c0       	rjmp	.+8      	; 0xbab2 <vfprintf+0x28a>
    baaa:	28 e0       	ldi	r18, 0x08	; 8
    baac:	30 e0       	ldi	r19, 0x00	; 0
    baae:	0a c0       	rjmp	.+20     	; 0xbac4 <vfprintf+0x29c>
    bab0:	10 61       	ori	r17, 0x10	; 16
    bab2:	14 fd       	sbrc	r17, 4
    bab4:	14 60       	ori	r17, 0x04	; 4
    bab6:	20 e1       	ldi	r18, 0x10	; 16
    bab8:	30 e0       	ldi	r19, 0x00	; 0
    baba:	04 c0       	rjmp	.+8      	; 0xbac4 <vfprintf+0x29c>
    babc:	14 fd       	sbrc	r17, 4
    babe:	16 60       	ori	r17, 0x06	; 6
    bac0:	20 e1       	ldi	r18, 0x10	; 16
    bac2:	32 e0       	ldi	r19, 0x02	; 2
    bac4:	17 ff       	sbrs	r17, 7
    bac6:	08 c0       	rjmp	.+16     	; 0xbad8 <vfprintf+0x2b0>
    bac8:	f5 01       	movw	r30, r10
    baca:	60 81       	ld	r22, Z
    bacc:	71 81       	ldd	r23, Z+1	; 0x01
    bace:	82 81       	ldd	r24, Z+2	; 0x02
    bad0:	93 81       	ldd	r25, Z+3	; 0x03
    bad2:	44 e0       	ldi	r20, 0x04	; 4
    bad4:	50 e0       	ldi	r21, 0x00	; 0
    bad6:	08 c0       	rjmp	.+16     	; 0xbae8 <vfprintf+0x2c0>
    bad8:	f5 01       	movw	r30, r10
    bada:	80 81       	ld	r24, Z
    badc:	91 81       	ldd	r25, Z+1	; 0x01
    bade:	bc 01       	movw	r22, r24
    bae0:	80 e0       	ldi	r24, 0x00	; 0
    bae2:	90 e0       	ldi	r25, 0x00	; 0
    bae4:	42 e0       	ldi	r20, 0x02	; 2
    bae6:	50 e0       	ldi	r21, 0x00	; 0
    bae8:	a4 0e       	add	r10, r20
    baea:	b5 1e       	adc	r11, r21
    baec:	a1 01       	movw	r20, r2
    baee:	0e 94 8c 5e 	call	0xbd18	; 0xbd18 <__ultoa_invert>
    baf2:	d8 2e       	mov	r13, r24
    baf4:	d2 18       	sub	r13, r2
    baf6:	8f e7       	ldi	r24, 0x7F	; 127
    baf8:	f8 2e       	mov	r15, r24
    bafa:	f1 22       	and	r15, r17
    bafc:	f6 fe       	sbrs	r15, 6
    bafe:	0b c0       	rjmp	.+22     	; 0xbb16 <vfprintf+0x2ee>
    bb00:	5e ef       	ldi	r21, 0xFE	; 254
    bb02:	f5 22       	and	r15, r21
    bb04:	d9 14       	cp	r13, r9
    bb06:	38 f4       	brcc	.+14     	; 0xbb16 <vfprintf+0x2ee>
    bb08:	f4 fe       	sbrs	r15, 4
    bb0a:	07 c0       	rjmp	.+14     	; 0xbb1a <vfprintf+0x2f2>
    bb0c:	f2 fc       	sbrc	r15, 2
    bb0e:	05 c0       	rjmp	.+10     	; 0xbb1a <vfprintf+0x2f2>
    bb10:	8f ee       	ldi	r24, 0xEF	; 239
    bb12:	f8 22       	and	r15, r24
    bb14:	02 c0       	rjmp	.+4      	; 0xbb1a <vfprintf+0x2f2>
    bb16:	1d 2d       	mov	r17, r13
    bb18:	01 c0       	rjmp	.+2      	; 0xbb1c <vfprintf+0x2f4>
    bb1a:	19 2d       	mov	r17, r9
    bb1c:	f4 fe       	sbrs	r15, 4
    bb1e:	0d c0       	rjmp	.+26     	; 0xbb3a <vfprintf+0x312>
    bb20:	fe 01       	movw	r30, r28
    bb22:	ed 0d       	add	r30, r13
    bb24:	f1 1d       	adc	r31, r1
    bb26:	80 81       	ld	r24, Z
    bb28:	80 33       	cpi	r24, 0x30	; 48
    bb2a:	19 f4       	brne	.+6      	; 0xbb32 <vfprintf+0x30a>
    bb2c:	99 ee       	ldi	r25, 0xE9	; 233
    bb2e:	f9 22       	and	r15, r25
    bb30:	08 c0       	rjmp	.+16     	; 0xbb42 <vfprintf+0x31a>
    bb32:	1f 5f       	subi	r17, 0xFF	; 255
    bb34:	f2 fe       	sbrs	r15, 2
    bb36:	05 c0       	rjmp	.+10     	; 0xbb42 <vfprintf+0x31a>
    bb38:	03 c0       	rjmp	.+6      	; 0xbb40 <vfprintf+0x318>
    bb3a:	8f 2d       	mov	r24, r15
    bb3c:	86 78       	andi	r24, 0x86	; 134
    bb3e:	09 f0       	breq	.+2      	; 0xbb42 <vfprintf+0x31a>
    bb40:	1f 5f       	subi	r17, 0xFF	; 255
    bb42:	0f 2d       	mov	r16, r15
    bb44:	f3 fc       	sbrc	r15, 3
    bb46:	14 c0       	rjmp	.+40     	; 0xbb70 <vfprintf+0x348>
    bb48:	f0 fe       	sbrs	r15, 0
    bb4a:	0f c0       	rjmp	.+30     	; 0xbb6a <vfprintf+0x342>
    bb4c:	1e 15       	cp	r17, r14
    bb4e:	10 f0       	brcs	.+4      	; 0xbb54 <vfprintf+0x32c>
    bb50:	9d 2c       	mov	r9, r13
    bb52:	0b c0       	rjmp	.+22     	; 0xbb6a <vfprintf+0x342>
    bb54:	9d 2c       	mov	r9, r13
    bb56:	9e 0c       	add	r9, r14
    bb58:	91 1a       	sub	r9, r17
    bb5a:	1e 2d       	mov	r17, r14
    bb5c:	06 c0       	rjmp	.+12     	; 0xbb6a <vfprintf+0x342>
    bb5e:	80 e2       	ldi	r24, 0x20	; 32
    bb60:	90 e0       	ldi	r25, 0x00	; 0
    bb62:	b3 01       	movw	r22, r6
    bb64:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bb68:	1f 5f       	subi	r17, 0xFF	; 255
    bb6a:	1e 15       	cp	r17, r14
    bb6c:	c0 f3       	brcs	.-16     	; 0xbb5e <vfprintf+0x336>
    bb6e:	04 c0       	rjmp	.+8      	; 0xbb78 <vfprintf+0x350>
    bb70:	1e 15       	cp	r17, r14
    bb72:	10 f4       	brcc	.+4      	; 0xbb78 <vfprintf+0x350>
    bb74:	e1 1a       	sub	r14, r17
    bb76:	01 c0       	rjmp	.+2      	; 0xbb7a <vfprintf+0x352>
    bb78:	ee 24       	eor	r14, r14
    bb7a:	04 ff       	sbrs	r16, 4
    bb7c:	0f c0       	rjmp	.+30     	; 0xbb9c <vfprintf+0x374>
    bb7e:	80 e3       	ldi	r24, 0x30	; 48
    bb80:	90 e0       	ldi	r25, 0x00	; 0
    bb82:	b3 01       	movw	r22, r6
    bb84:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bb88:	02 ff       	sbrs	r16, 2
    bb8a:	1d c0       	rjmp	.+58     	; 0xbbc6 <vfprintf+0x39e>
    bb8c:	01 fd       	sbrc	r16, 1
    bb8e:	03 c0       	rjmp	.+6      	; 0xbb96 <vfprintf+0x36e>
    bb90:	88 e7       	ldi	r24, 0x78	; 120
    bb92:	90 e0       	ldi	r25, 0x00	; 0
    bb94:	0e c0       	rjmp	.+28     	; 0xbbb2 <vfprintf+0x38a>
    bb96:	88 e5       	ldi	r24, 0x58	; 88
    bb98:	90 e0       	ldi	r25, 0x00	; 0
    bb9a:	0b c0       	rjmp	.+22     	; 0xbbb2 <vfprintf+0x38a>
    bb9c:	80 2f       	mov	r24, r16
    bb9e:	86 78       	andi	r24, 0x86	; 134
    bba0:	91 f0       	breq	.+36     	; 0xbbc6 <vfprintf+0x39e>
    bba2:	01 ff       	sbrs	r16, 1
    bba4:	02 c0       	rjmp	.+4      	; 0xbbaa <vfprintf+0x382>
    bba6:	8b e2       	ldi	r24, 0x2B	; 43
    bba8:	01 c0       	rjmp	.+2      	; 0xbbac <vfprintf+0x384>
    bbaa:	80 e2       	ldi	r24, 0x20	; 32
    bbac:	f7 fc       	sbrc	r15, 7
    bbae:	8d e2       	ldi	r24, 0x2D	; 45
    bbb0:	90 e0       	ldi	r25, 0x00	; 0
    bbb2:	b3 01       	movw	r22, r6
    bbb4:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bbb8:	06 c0       	rjmp	.+12     	; 0xbbc6 <vfprintf+0x39e>
    bbba:	80 e3       	ldi	r24, 0x30	; 48
    bbbc:	90 e0       	ldi	r25, 0x00	; 0
    bbbe:	b3 01       	movw	r22, r6
    bbc0:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bbc4:	9a 94       	dec	r9
    bbc6:	d9 14       	cp	r13, r9
    bbc8:	c0 f3       	brcs	.-16     	; 0xbbba <vfprintf+0x392>
    bbca:	da 94       	dec	r13
    bbcc:	f1 01       	movw	r30, r2
    bbce:	ed 0d       	add	r30, r13
    bbd0:	f1 1d       	adc	r31, r1
    bbd2:	80 81       	ld	r24, Z
    bbd4:	90 e0       	ldi	r25, 0x00	; 0
    bbd6:	b3 01       	movw	r22, r6
    bbd8:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bbdc:	dd 20       	and	r13, r13
    bbde:	a9 f7       	brne	.-22     	; 0xbbca <vfprintf+0x3a2>
    bbe0:	06 c0       	rjmp	.+12     	; 0xbbee <vfprintf+0x3c6>
    bbe2:	80 e2       	ldi	r24, 0x20	; 32
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	b3 01       	movw	r22, r6
    bbe8:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <fputc>
    bbec:	ea 94       	dec	r14
    bbee:	ee 20       	and	r14, r14
    bbf0:	c1 f7       	brne	.-16     	; 0xbbe2 <vfprintf+0x3ba>
    bbf2:	43 ce       	rjmp	.-890    	; 0xb87a <vfprintf+0x52>
    bbf4:	f3 01       	movw	r30, r6
    bbf6:	66 81       	ldd	r22, Z+6	; 0x06
    bbf8:	77 81       	ldd	r23, Z+7	; 0x07
    bbfa:	cb 01       	movw	r24, r22
    bbfc:	2b 96       	adiw	r28, 0x0b	; 11
    bbfe:	cd bf       	out	0x3d, r28	; 61
    bc00:	de bf       	out	0x3e, r29	; 62
    bc02:	cf 91       	pop	r28
    bc04:	df 91       	pop	r29
    bc06:	1f 91       	pop	r17
    bc08:	0f 91       	pop	r16
    bc0a:	ff 90       	pop	r15
    bc0c:	ef 90       	pop	r14
    bc0e:	df 90       	pop	r13
    bc10:	cf 90       	pop	r12
    bc12:	bf 90       	pop	r11
    bc14:	af 90       	pop	r10
    bc16:	9f 90       	pop	r9
    bc18:	8f 90       	pop	r8
    bc1a:	7f 90       	pop	r7
    bc1c:	6f 90       	pop	r6
    bc1e:	5f 90       	pop	r5
    bc20:	4f 90       	pop	r4
    bc22:	3f 90       	pop	r3
    bc24:	2f 90       	pop	r2
    bc26:	08 95       	ret

0000bc28 <__eerd_byte_x128a1>:
    bc28:	03 d0       	rcall	.+6      	; 0xbc30 <eeprom_mapen>
    bc2a:	80 81       	ld	r24, Z
    bc2c:	99 27       	eor	r25, r25
    bc2e:	08 95       	ret

0000bc30 <eeprom_mapen>:
    bc30:	e0 ec       	ldi	r30, 0xC0	; 192
    bc32:	f1 e0       	ldi	r31, 0x01	; 1
    bc34:	37 85       	ldd	r19, Z+15	; 0x0f
    bc36:	37 fd       	sbrc	r19, 7
    bc38:	fd cf       	rjmp	.-6      	; 0xbc34 <eeprom_mapen+0x4>
    bc3a:	34 85       	ldd	r19, Z+12	; 0x0c
    bc3c:	38 60       	ori	r19, 0x08	; 8
    bc3e:	34 87       	std	Z+12, r19	; 0x0c
    bc40:	fc 01       	movw	r30, r24
    bc42:	e0 50       	subi	r30, 0x00	; 0
    bc44:	f0 4f       	sbci	r31, 0xF0	; 240
    bc46:	08 95       	ret

0000bc48 <__eewr_byte_x128a1>:
    bc48:	26 2f       	mov	r18, r22

0000bc4a <__eewr_r18_x128a1>:
    bc4a:	e0 ec       	ldi	r30, 0xC0	; 192
    bc4c:	f1 e0       	ldi	r31, 0x01	; 1
    bc4e:	37 85       	ldd	r19, Z+15	; 0x0f
    bc50:	37 fd       	sbrc	r19, 7
    bc52:	fd cf       	rjmp	.-6      	; 0xbc4e <__eewr_r18_x128a1+0x4>
    bc54:	34 85       	ldd	r19, Z+12	; 0x0c
    bc56:	37 7f       	andi	r19, 0xF7	; 247
    bc58:	34 87       	std	Z+12, r19	; 0x0c
    bc5a:	37 85       	ldd	r19, Z+15	; 0x0f
    bc5c:	31 ff       	sbrs	r19, 1
    bc5e:	09 c0       	rjmp	.+18     	; 0xbc72 <__eewr_r18_x128a1+0x28>
    bc60:	36 e3       	ldi	r19, 0x36	; 54
    bc62:	32 87       	std	Z+10, r19	; 0x0a
    bc64:	38 ed       	ldi	r19, 0xD8	; 216
    bc66:	34 bf       	out	0x34, r19	; 52
    bc68:	31 e0       	ldi	r19, 0x01	; 1
    bc6a:	33 87       	std	Z+11, r19	; 0x0b
    bc6c:	37 85       	ldd	r19, Z+15	; 0x0f
    bc6e:	37 fd       	sbrc	r19, 7
    bc70:	fd cf       	rjmp	.-6      	; 0xbc6c <__eewr_r18_x128a1+0x22>
    bc72:	33 e3       	ldi	r19, 0x33	; 51
    bc74:	32 87       	std	Z+10, r19	; 0x0a
    bc76:	80 83       	st	Z, r24
    bc78:	91 83       	std	Z+1, r25	; 0x01
    bc7a:	12 82       	std	Z+2, r1	; 0x02
    bc7c:	24 83       	std	Z+4, r18	; 0x04
    bc7e:	25 e3       	ldi	r18, 0x35	; 53
    bc80:	22 87       	std	Z+10, r18	; 0x0a
    bc82:	28 ed       	ldi	r18, 0xD8	; 216
    bc84:	31 e0       	ldi	r19, 0x01	; 1
    bc86:	24 bf       	out	0x34, r18	; 52
    bc88:	33 87       	std	Z+11, r19	; 0x0b
    bc8a:	01 96       	adiw	r24, 0x01	; 1
    bc8c:	08 95       	ret

0000bc8e <__ctype_isfalse>:
    bc8e:	99 27       	eor	r25, r25
    bc90:	88 27       	eor	r24, r24

0000bc92 <__ctype_istrue>:
    bc92:	08 95       	ret

0000bc94 <strnlen_P>:
    bc94:	fc 01       	movw	r30, r24
    bc96:	05 90       	lpm	r0, Z+
    bc98:	61 50       	subi	r22, 0x01	; 1
    bc9a:	70 40       	sbci	r23, 0x00	; 0
    bc9c:	01 10       	cpse	r0, r1
    bc9e:	d8 f7       	brcc	.-10     	; 0xbc96 <strnlen_P+0x2>
    bca0:	80 95       	com	r24
    bca2:	90 95       	com	r25
    bca4:	8e 0f       	add	r24, r30
    bca6:	9f 1f       	adc	r25, r31
    bca8:	08 95       	ret

0000bcaa <strnlen>:
    bcaa:	fc 01       	movw	r30, r24
    bcac:	61 50       	subi	r22, 0x01	; 1
    bcae:	70 40       	sbci	r23, 0x00	; 0
    bcb0:	01 90       	ld	r0, Z+
    bcb2:	01 10       	cpse	r0, r1
    bcb4:	d8 f7       	brcc	.-10     	; 0xbcac <strnlen+0x2>
    bcb6:	80 95       	com	r24
    bcb8:	90 95       	com	r25
    bcba:	8e 0f       	add	r24, r30
    bcbc:	9f 1f       	adc	r25, r31
    bcbe:	08 95       	ret

0000bcc0 <fputc>:
    bcc0:	0f 93       	push	r16
    bcc2:	1f 93       	push	r17
    bcc4:	cf 93       	push	r28
    bcc6:	df 93       	push	r29
    bcc8:	8c 01       	movw	r16, r24
    bcca:	eb 01       	movw	r28, r22
    bccc:	8b 81       	ldd	r24, Y+3	; 0x03
    bcce:	81 ff       	sbrs	r24, 1
    bcd0:	1b c0       	rjmp	.+54     	; 0xbd08 <fputc+0x48>
    bcd2:	82 ff       	sbrs	r24, 2
    bcd4:	0d c0       	rjmp	.+26     	; 0xbcf0 <fputc+0x30>
    bcd6:	2e 81       	ldd	r18, Y+6	; 0x06
    bcd8:	3f 81       	ldd	r19, Y+7	; 0x07
    bcda:	8c 81       	ldd	r24, Y+4	; 0x04
    bcdc:	9d 81       	ldd	r25, Y+5	; 0x05
    bcde:	28 17       	cp	r18, r24
    bce0:	39 07       	cpc	r19, r25
    bce2:	64 f4       	brge	.+24     	; 0xbcfc <fputc+0x3c>
    bce4:	e8 81       	ld	r30, Y
    bce6:	f9 81       	ldd	r31, Y+1	; 0x01
    bce8:	01 93       	st	Z+, r16
    bcea:	e8 83       	st	Y, r30
    bcec:	f9 83       	std	Y+1, r31	; 0x01
    bcee:	06 c0       	rjmp	.+12     	; 0xbcfc <fputc+0x3c>
    bcf0:	e8 85       	ldd	r30, Y+8	; 0x08
    bcf2:	f9 85       	ldd	r31, Y+9	; 0x09
    bcf4:	80 2f       	mov	r24, r16
    bcf6:	19 95       	eicall
    bcf8:	89 2b       	or	r24, r25
    bcfa:	31 f4       	brne	.+12     	; 0xbd08 <fputc+0x48>
    bcfc:	8e 81       	ldd	r24, Y+6	; 0x06
    bcfe:	9f 81       	ldd	r25, Y+7	; 0x07
    bd00:	01 96       	adiw	r24, 0x01	; 1
    bd02:	8e 83       	std	Y+6, r24	; 0x06
    bd04:	9f 83       	std	Y+7, r25	; 0x07
    bd06:	02 c0       	rjmp	.+4      	; 0xbd0c <fputc+0x4c>
    bd08:	0f ef       	ldi	r16, 0xFF	; 255
    bd0a:	1f ef       	ldi	r17, 0xFF	; 255
    bd0c:	c8 01       	movw	r24, r16
    bd0e:	df 91       	pop	r29
    bd10:	cf 91       	pop	r28
    bd12:	1f 91       	pop	r17
    bd14:	0f 91       	pop	r16
    bd16:	08 95       	ret

0000bd18 <__ultoa_invert>:
    bd18:	fa 01       	movw	r30, r20
    bd1a:	aa 27       	eor	r26, r26
    bd1c:	28 30       	cpi	r18, 0x08	; 8
    bd1e:	51 f1       	breq	.+84     	; 0xbd74 <__ultoa_invert+0x5c>
    bd20:	20 31       	cpi	r18, 0x10	; 16
    bd22:	81 f1       	breq	.+96     	; 0xbd84 <__ultoa_invert+0x6c>
    bd24:	e8 94       	clt
    bd26:	6f 93       	push	r22
    bd28:	6e 7f       	andi	r22, 0xFE	; 254
    bd2a:	6e 5f       	subi	r22, 0xFE	; 254
    bd2c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd2e:	8f 4f       	sbci	r24, 0xFF	; 255
    bd30:	9f 4f       	sbci	r25, 0xFF	; 255
    bd32:	af 4f       	sbci	r26, 0xFF	; 255
    bd34:	b1 e0       	ldi	r27, 0x01	; 1
    bd36:	3e d0       	rcall	.+124    	; 0xbdb4 <__ultoa_invert+0x9c>
    bd38:	b4 e0       	ldi	r27, 0x04	; 4
    bd3a:	3c d0       	rcall	.+120    	; 0xbdb4 <__ultoa_invert+0x9c>
    bd3c:	67 0f       	add	r22, r23
    bd3e:	78 1f       	adc	r23, r24
    bd40:	89 1f       	adc	r24, r25
    bd42:	9a 1f       	adc	r25, r26
    bd44:	a1 1d       	adc	r26, r1
    bd46:	68 0f       	add	r22, r24
    bd48:	79 1f       	adc	r23, r25
    bd4a:	8a 1f       	adc	r24, r26
    bd4c:	91 1d       	adc	r25, r1
    bd4e:	a1 1d       	adc	r26, r1
    bd50:	6a 0f       	add	r22, r26
    bd52:	71 1d       	adc	r23, r1
    bd54:	81 1d       	adc	r24, r1
    bd56:	91 1d       	adc	r25, r1
    bd58:	a1 1d       	adc	r26, r1
    bd5a:	20 d0       	rcall	.+64     	; 0xbd9c <__ultoa_invert+0x84>
    bd5c:	09 f4       	brne	.+2      	; 0xbd60 <__ultoa_invert+0x48>
    bd5e:	68 94       	set
    bd60:	3f 91       	pop	r19
    bd62:	2a e0       	ldi	r18, 0x0A	; 10
    bd64:	26 9f       	mul	r18, r22
    bd66:	11 24       	eor	r1, r1
    bd68:	30 19       	sub	r19, r0
    bd6a:	30 5d       	subi	r19, 0xD0	; 208
    bd6c:	31 93       	st	Z+, r19
    bd6e:	de f6       	brtc	.-74     	; 0xbd26 <__ultoa_invert+0xe>
    bd70:	cf 01       	movw	r24, r30
    bd72:	08 95       	ret
    bd74:	46 2f       	mov	r20, r22
    bd76:	47 70       	andi	r20, 0x07	; 7
    bd78:	40 5d       	subi	r20, 0xD0	; 208
    bd7a:	41 93       	st	Z+, r20
    bd7c:	b3 e0       	ldi	r27, 0x03	; 3
    bd7e:	0f d0       	rcall	.+30     	; 0xbd9e <__ultoa_invert+0x86>
    bd80:	c9 f7       	brne	.-14     	; 0xbd74 <__ultoa_invert+0x5c>
    bd82:	f6 cf       	rjmp	.-20     	; 0xbd70 <__ultoa_invert+0x58>
    bd84:	46 2f       	mov	r20, r22
    bd86:	4f 70       	andi	r20, 0x0F	; 15
    bd88:	40 5d       	subi	r20, 0xD0	; 208
    bd8a:	4a 33       	cpi	r20, 0x3A	; 58
    bd8c:	18 f0       	brcs	.+6      	; 0xbd94 <__ultoa_invert+0x7c>
    bd8e:	49 5d       	subi	r20, 0xD9	; 217
    bd90:	31 fd       	sbrc	r19, 1
    bd92:	40 52       	subi	r20, 0x20	; 32
    bd94:	41 93       	st	Z+, r20
    bd96:	02 d0       	rcall	.+4      	; 0xbd9c <__ultoa_invert+0x84>
    bd98:	a9 f7       	brne	.-22     	; 0xbd84 <__ultoa_invert+0x6c>
    bd9a:	ea cf       	rjmp	.-44     	; 0xbd70 <__ultoa_invert+0x58>
    bd9c:	b4 e0       	ldi	r27, 0x04	; 4
    bd9e:	a6 95       	lsr	r26
    bda0:	97 95       	ror	r25
    bda2:	87 95       	ror	r24
    bda4:	77 95       	ror	r23
    bda6:	67 95       	ror	r22
    bda8:	ba 95       	dec	r27
    bdaa:	c9 f7       	brne	.-14     	; 0xbd9e <__ultoa_invert+0x86>
    bdac:	00 97       	sbiw	r24, 0x00	; 0
    bdae:	61 05       	cpc	r22, r1
    bdb0:	71 05       	cpc	r23, r1
    bdb2:	08 95       	ret
    bdb4:	9b 01       	movw	r18, r22
    bdb6:	ac 01       	movw	r20, r24
    bdb8:	0a 2e       	mov	r0, r26
    bdba:	06 94       	lsr	r0
    bdbc:	57 95       	ror	r21
    bdbe:	47 95       	ror	r20
    bdc0:	37 95       	ror	r19
    bdc2:	27 95       	ror	r18
    bdc4:	ba 95       	dec	r27
    bdc6:	c9 f7       	brne	.-14     	; 0xbdba <__ultoa_invert+0xa2>
    bdc8:	62 0f       	add	r22, r18
    bdca:	73 1f       	adc	r23, r19
    bdcc:	84 1f       	adc	r24, r20
    bdce:	95 1f       	adc	r25, r21
    bdd0:	a0 1d       	adc	r26, r0
    bdd2:	08 95       	ret

0000bdd4 <_exit>:
    bdd4:	f8 94       	cli

0000bdd6 <__stop_program>:
    bdd6:	ff cf       	rjmp	.-2      	; 0xbdd6 <__stop_program>
